// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package IFFixedSaleV8

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IFVestableCliff is an auto generated low-level Go binding around an user-defined struct.
type IFVestableCliff struct {
	ClaimTime *big.Int
	Pct       uint8
}

// IFFixedSaleV8MetaData contains all meta data concerning the IFFixedSaleV8 contract.
var IFFixedSaleV8MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalPayment\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleTokenBalance\",\"type\":\"uint256\"}],\"name\":\"Cash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyTokenRetrieve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OptInBuyback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"casher\",\"type\":\"address\"}],\"name\":\"SetCasher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"indexed\":true,\"internalType\":\"structIFVestable.Cliff[]\",\"name\":\"cliffPeriod\",\"type\":\"tuple[]\"}],\"name\":\"SetCliffVestingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"SetFunder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"linearVestingEndTime\",\"type\":\"uint256\"}],\"name\":\"SetLinearVestingEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_maxTotalPurchasable\",\"type\":\"uint256\"}],\"name\":\"SetMaxTotalPurchasable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minTotalPayment\",\"type\":\"uint256\"}],\"name\":\"SetMinTotalPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"whitelistRootHash\",\"type\":\"bytes32\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistSetter\",\"type\":\"address\"}],\"name\":\"SetWhitelistSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"withdrawDelay\",\"type\":\"uint24\"}],\"name\":\"SetWithdrawDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buybackClaimableNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cliffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenRetrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCliffPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"internalType\":\"structIFVestable.Cliff[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentClaimableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"getMaxPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnlockedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasCashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasOptInBuyback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linearVestingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalPurchasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotalPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optInBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contractERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaserCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTokenPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buybackClaimableNumber\",\"type\":\"uint256\"}],\"name\":\"setBuybackClaimableNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_casher\",\"type\":\"address\"}],\"name\":\"setCasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"pct\",\"type\":\"uint8[]\"}],\"name\":\"setCliffPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"setFunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingEndTime\",\"type\":\"uint256\"}],\"name\":\"setLinearVestingEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTotalPurchasable\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalPurchasable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTotalPayment\",\"type\":\"uint256\"}],\"name\":\"setMinTotalPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_vestingEditableOverride\",\"type\":\"bool\"}],\"name\":\"setVestingEditable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRootHash\",\"type\":\"bytes32\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistSetter\",\"type\":\"address\"}],\"name\":\"setWhitelistSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_withdrawDelay\",\"type\":\"uint24\"}],\"name\":\"setWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaymentReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEditableOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistedPurchase\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"whitelistedPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDelay\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawGiveaway\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"withdrawGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawerCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// IFFixedSaleV8ABI is the input ABI used to generate the binding from.
// Deprecated: Use IFFixedSaleV8MetaData.ABI instead.
var IFFixedSaleV8ABI = IFFixedSaleV8MetaData.ABI

// IFFixedSaleV8Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IFFixedSaleV8MetaData.Bin instead.
var IFFixedSaleV8Bin = IFFixedSaleV8MetaData.Bin

// DeployIFFixedSaleV8 deploys a new Ethereum contract, binding an instance of IFFixedSaleV8 to it.
func DeployIFFixedSaleV8(auth *bind.TransactOpts, backend bind.ContractBackend, _salePrice *big.Int, _funder common.Address, _paymentToken common.Address, _saleToken common.Address, _startTime *big.Int, _endTime *big.Int, _maxTotalPayment *big.Int) (common.Address, *types.Transaction, *IFFixedSaleV8, error) {
	parsed, err := IFFixedSaleV8MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IFFixedSaleV8Bin), backend, _salePrice, _funder, _paymentToken, _saleToken, _startTime, _endTime, _maxTotalPayment)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IFFixedSaleV8{IFFixedSaleV8Caller: IFFixedSaleV8Caller{contract: contract}, IFFixedSaleV8Transactor: IFFixedSaleV8Transactor{contract: contract}, IFFixedSaleV8Filterer: IFFixedSaleV8Filterer{contract: contract}}, nil
}

// IFFixedSaleV8 is an auto generated Go binding around an Ethereum contract.
type IFFixedSaleV8 struct {
	IFFixedSaleV8Caller     // Read-only binding to the contract
	IFFixedSaleV8Transactor // Write-only binding to the contract
	IFFixedSaleV8Filterer   // Log filterer for contract events
}

// IFFixedSaleV8Caller is an auto generated read-only Go binding around an Ethereum contract.
type IFFixedSaleV8Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFFixedSaleV8Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IFFixedSaleV8Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFFixedSaleV8Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFFixedSaleV8Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFFixedSaleV8Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFFixedSaleV8Session struct {
	Contract     *IFFixedSaleV8    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFFixedSaleV8CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFFixedSaleV8CallerSession struct {
	Contract *IFFixedSaleV8Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IFFixedSaleV8TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFFixedSaleV8TransactorSession struct {
	Contract     *IFFixedSaleV8Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IFFixedSaleV8Raw is an auto generated low-level Go binding around an Ethereum contract.
type IFFixedSaleV8Raw struct {
	Contract *IFFixedSaleV8 // Generic contract binding to access the raw methods on
}

// IFFixedSaleV8CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFFixedSaleV8CallerRaw struct {
	Contract *IFFixedSaleV8Caller // Generic read-only contract binding to access the raw methods on
}

// IFFixedSaleV8TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFFixedSaleV8TransactorRaw struct {
	Contract *IFFixedSaleV8Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIFFixedSaleV8 creates a new instance of IFFixedSaleV8, bound to a specific deployed contract.
func NewIFFixedSaleV8(address common.Address, backend bind.ContractBackend) (*IFFixedSaleV8, error) {
	contract, err := bindIFFixedSaleV8(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8{IFFixedSaleV8Caller: IFFixedSaleV8Caller{contract: contract}, IFFixedSaleV8Transactor: IFFixedSaleV8Transactor{contract: contract}, IFFixedSaleV8Filterer: IFFixedSaleV8Filterer{contract: contract}}, nil
}

// NewIFFixedSaleV8Caller creates a new read-only instance of IFFixedSaleV8, bound to a specific deployed contract.
func NewIFFixedSaleV8Caller(address common.Address, caller bind.ContractCaller) (*IFFixedSaleV8Caller, error) {
	contract, err := bindIFFixedSaleV8(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8Caller{contract: contract}, nil
}

// NewIFFixedSaleV8Transactor creates a new write-only instance of IFFixedSaleV8, bound to a specific deployed contract.
func NewIFFixedSaleV8Transactor(address common.Address, transactor bind.ContractTransactor) (*IFFixedSaleV8Transactor, error) {
	contract, err := bindIFFixedSaleV8(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8Transactor{contract: contract}, nil
}

// NewIFFixedSaleV8Filterer creates a new log filterer instance of IFFixedSaleV8, bound to a specific deployed contract.
func NewIFFixedSaleV8Filterer(address common.Address, filterer bind.ContractFilterer) (*IFFixedSaleV8Filterer, error) {
	contract, err := bindIFFixedSaleV8(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8Filterer{contract: contract}, nil
}

// bindIFFixedSaleV8 binds a generic wrapper to an already deployed contract.
func bindIFFixedSaleV8(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IFFixedSaleV8MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFFixedSaleV8 *IFFixedSaleV8Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFFixedSaleV8.Contract.IFFixedSaleV8Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFFixedSaleV8 *IFFixedSaleV8Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.IFFixedSaleV8Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFFixedSaleV8 *IFFixedSaleV8Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.IFFixedSaleV8Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFFixedSaleV8 *IFFixedSaleV8CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFFixedSaleV8.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.contract.Transact(opts, method, params...)
}

// BuybackClaimableNumber is a free data retrieval call binding the contract method 0x017287ae.
//
// Solidity: function buybackClaimableNumber() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) BuybackClaimableNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "buybackClaimableNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BuybackClaimableNumber is a free data retrieval call binding the contract method 0x017287ae.
//
// Solidity: function buybackClaimableNumber() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) BuybackClaimableNumber() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.BuybackClaimableNumber(&_IFFixedSaleV8.CallOpts)
}

// BuybackClaimableNumber is a free data retrieval call binding the contract method 0x017287ae.
//
// Solidity: function buybackClaimableNumber() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) BuybackClaimableNumber() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.BuybackClaimableNumber(&_IFFixedSaleV8.CallOpts)
}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) Casher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "casher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Casher() (common.Address, error) {
	return _IFFixedSaleV8.Contract.Casher(&_IFFixedSaleV8.CallOpts)
}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) Casher() (common.Address, error) {
	return _IFFixedSaleV8.Contract.Casher(&_IFFixedSaleV8.CallOpts)
}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) CheckWhitelist(opts *bind.CallOpts, user common.Address, merkleProof [][32]byte) (bool, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "checkWhitelist", user, merkleProof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) CheckWhitelist(user common.Address, merkleProof [][32]byte) (bool, error) {
	return _IFFixedSaleV8.Contract.CheckWhitelist(&_IFFixedSaleV8.CallOpts, user, merkleProof)
}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) CheckWhitelist(user common.Address, merkleProof [][32]byte) (bool, error) {
	return _IFFixedSaleV8.Contract.CheckWhitelist(&_IFFixedSaleV8.CallOpts, user, merkleProof)
}

// CheckWhitelist0 is a free data retrieval call binding the contract method 0x76078dbe.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof, uint256 allocation) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) CheckWhitelist0(opts *bind.CallOpts, user common.Address, merkleProof [][32]byte, allocation *big.Int) (bool, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "checkWhitelist0", user, merkleProof, allocation)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckWhitelist0 is a free data retrieval call binding the contract method 0x76078dbe.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof, uint256 allocation) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) CheckWhitelist0(user common.Address, merkleProof [][32]byte, allocation *big.Int) (bool, error) {
	return _IFFixedSaleV8.Contract.CheckWhitelist0(&_IFFixedSaleV8.CallOpts, user, merkleProof, allocation)
}

// CheckWhitelist0 is a free data retrieval call binding the contract method 0x76078dbe.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof, uint256 allocation) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) CheckWhitelist0(user common.Address, merkleProof [][32]byte, allocation *big.Int) (bool, error) {
	return _IFFixedSaleV8.Contract.CheckWhitelist0(&_IFFixedSaleV8.CallOpts, user, merkleProof, allocation)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) Claimable(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "claimable", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Claimable(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.Claimable(&_IFFixedSaleV8.CallOpts, arg0)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) Claimable(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.Claimable(&_IFFixedSaleV8.CallOpts, arg0)
}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) CliffPeriod(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "cliffPeriod", arg0)

	outstruct := new(struct {
		ClaimTime *big.Int
		Pct       uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ClaimTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Pct = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) CliffPeriod(arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	return _IFFixedSaleV8.Contract.CliffPeriod(&_IFFixedSaleV8.CallOpts, arg0)
}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) CliffPeriod(arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	return _IFFixedSaleV8.Contract.CliffPeriod(&_IFFixedSaleV8.CallOpts, arg0)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "endTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) EndTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.EndTime(&_IFFixedSaleV8.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) EndTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.EndTime(&_IFFixedSaleV8.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) Funder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "funder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Funder() (common.Address, error) {
	return _IFFixedSaleV8.Contract.Funder(&_IFFixedSaleV8.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) Funder() (common.Address, error) {
	return _IFFixedSaleV8.Contract.Funder(&_IFFixedSaleV8.CallOpts)
}

// GetCliffPeriod is a free data retrieval call binding the contract method 0x3d9205c1.
//
// Solidity: function getCliffPeriod() view returns((uint256,uint8)[])
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) GetCliffPeriod(opts *bind.CallOpts) ([]IFVestableCliff, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "getCliffPeriod")

	if err != nil {
		return *new([]IFVestableCliff), err
	}

	out0 := *abi.ConvertType(out[0], new([]IFVestableCliff)).(*[]IFVestableCliff)

	return out0, err

}

// GetCliffPeriod is a free data retrieval call binding the contract method 0x3d9205c1.
//
// Solidity: function getCliffPeriod() view returns((uint256,uint8)[])
func (_IFFixedSaleV8 *IFFixedSaleV8Session) GetCliffPeriod() ([]IFVestableCliff, error) {
	return _IFFixedSaleV8.Contract.GetCliffPeriod(&_IFFixedSaleV8.CallOpts)
}

// GetCliffPeriod is a free data retrieval call binding the contract method 0x3d9205c1.
//
// Solidity: function getCliffPeriod() view returns((uint256,uint8)[])
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) GetCliffPeriod() ([]IFVestableCliff, error) {
	return _IFFixedSaleV8.Contract.GetCliffPeriod(&_IFFixedSaleV8.CallOpts)
}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) GetCurrentClaimableToken(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "getCurrentClaimableToken", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) GetCurrentClaimableToken(user common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.GetCurrentClaimableToken(&_IFFixedSaleV8.CallOpts, user)
}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) GetCurrentClaimableToken(user common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.GetCurrentClaimableToken(&_IFFixedSaleV8.CallOpts, user)
}

// GetMaxPayment is a free data retrieval call binding the contract method 0x2feb25f6.
//
// Solidity: function getMaxPayment(address user, uint256 allocation) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) GetMaxPayment(opts *bind.CallOpts, user common.Address, allocation *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "getMaxPayment", user, allocation)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxPayment is a free data retrieval call binding the contract method 0x2feb25f6.
//
// Solidity: function getMaxPayment(address user, uint256 allocation) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) GetMaxPayment(user common.Address, allocation *big.Int) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.GetMaxPayment(&_IFFixedSaleV8.CallOpts, user, allocation)
}

// GetMaxPayment is a free data retrieval call binding the contract method 0x2feb25f6.
//
// Solidity: function getMaxPayment(address user, uint256 allocation) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) GetMaxPayment(user common.Address, allocation *big.Int) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.GetMaxPayment(&_IFFixedSaleV8.CallOpts, user, allocation)
}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) GetUnlockedToken(opts *bind.CallOpts, totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "getUnlockedToken", totalPurchased, claimable, user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) GetUnlockedToken(totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.GetUnlockedToken(&_IFFixedSaleV8.CallOpts, totalPurchased, claimable, user)
}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) GetUnlockedToken(totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.GetUnlockedToken(&_IFFixedSaleV8.CallOpts, totalPurchased, claimable, user)
}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) HasCashed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "hasCashed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) HasCashed() (bool, error) {
	return _IFFixedSaleV8.Contract.HasCashed(&_IFFixedSaleV8.CallOpts)
}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) HasCashed() (bool, error) {
	return _IFFixedSaleV8.Contract.HasCashed(&_IFFixedSaleV8.CallOpts)
}

// HasOptInBuyback is a free data retrieval call binding the contract method 0xdbc4b4d3.
//
// Solidity: function hasOptInBuyback(address ) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) HasOptInBuyback(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "hasOptInBuyback", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasOptInBuyback is a free data retrieval call binding the contract method 0xdbc4b4d3.
//
// Solidity: function hasOptInBuyback(address ) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) HasOptInBuyback(arg0 common.Address) (bool, error) {
	return _IFFixedSaleV8.Contract.HasOptInBuyback(&_IFFixedSaleV8.CallOpts, arg0)
}

// HasOptInBuyback is a free data retrieval call binding the contract method 0xdbc4b4d3.
//
// Solidity: function hasOptInBuyback(address ) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) HasOptInBuyback(arg0 common.Address) (bool, error) {
	return _IFFixedSaleV8.Contract.HasOptInBuyback(&_IFFixedSaleV8.CallOpts, arg0)
}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) HasWithdrawn(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "hasWithdrawn", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) HasWithdrawn(arg0 common.Address) (bool, error) {
	return _IFFixedSaleV8.Contract.HasWithdrawn(&_IFFixedSaleV8.CallOpts, arg0)
}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) HasWithdrawn(arg0 common.Address) (bool, error) {
	return _IFFixedSaleV8.Contract.HasWithdrawn(&_IFFixedSaleV8.CallOpts, arg0)
}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) LatestClaimTime(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "latestClaimTime", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) LatestClaimTime(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.LatestClaimTime(&_IFFixedSaleV8.CallOpts, arg0)
}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) LatestClaimTime(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.LatestClaimTime(&_IFFixedSaleV8.CallOpts, arg0)
}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) LinearVestingEndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "linearVestingEndTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) LinearVestingEndTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.LinearVestingEndTime(&_IFFixedSaleV8.CallOpts)
}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) LinearVestingEndTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.LinearVestingEndTime(&_IFFixedSaleV8.CallOpts)
}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) MaxTotalPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "maxTotalPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) MaxTotalPayment() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.MaxTotalPayment(&_IFFixedSaleV8.CallOpts)
}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) MaxTotalPayment() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.MaxTotalPayment(&_IFFixedSaleV8.CallOpts)
}

// MaxTotalPurchasable is a free data retrieval call binding the contract method 0x6713cea2.
//
// Solidity: function maxTotalPurchasable() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) MaxTotalPurchasable(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "maxTotalPurchasable")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxTotalPurchasable is a free data retrieval call binding the contract method 0x6713cea2.
//
// Solidity: function maxTotalPurchasable() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) MaxTotalPurchasable() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.MaxTotalPurchasable(&_IFFixedSaleV8.CallOpts)
}

// MaxTotalPurchasable is a free data retrieval call binding the contract method 0x6713cea2.
//
// Solidity: function maxTotalPurchasable() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) MaxTotalPurchasable() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.MaxTotalPurchasable(&_IFFixedSaleV8.CallOpts)
}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) MinTotalPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "minTotalPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) MinTotalPayment() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.MinTotalPayment(&_IFFixedSaleV8.CallOpts)
}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) MinTotalPayment() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.MinTotalPayment(&_IFFixedSaleV8.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Owner() (common.Address, error) {
	return _IFFixedSaleV8.Contract.Owner(&_IFFixedSaleV8.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) Owner() (common.Address, error) {
	return _IFFixedSaleV8.Contract.Owner(&_IFFixedSaleV8.CallOpts)
}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) PaymentReceived(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "paymentReceived", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) PaymentReceived(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.PaymentReceived(&_IFFixedSaleV8.CallOpts, arg0)
}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) PaymentReceived(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.PaymentReceived(&_IFFixedSaleV8.CallOpts, arg0)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) PaymentToken() (common.Address, error) {
	return _IFFixedSaleV8.Contract.PaymentToken(&_IFFixedSaleV8.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) PaymentToken() (common.Address, error) {
	return _IFFixedSaleV8.Contract.PaymentToken(&_IFFixedSaleV8.CallOpts)
}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) PurchaserCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "purchaserCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) PurchaserCount() (uint32, error) {
	return _IFFixedSaleV8.Contract.PurchaserCount(&_IFFixedSaleV8.CallOpts)
}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) PurchaserCount() (uint32, error) {
	return _IFFixedSaleV8.Contract.PurchaserCount(&_IFFixedSaleV8.CallOpts)
}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) SaleAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "saleAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SaleAmount() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.SaleAmount(&_IFFixedSaleV8.CallOpts)
}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) SaleAmount() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.SaleAmount(&_IFFixedSaleV8.CallOpts)
}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) SalePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "salePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SalePrice() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.SalePrice(&_IFFixedSaleV8.CallOpts)
}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) SalePrice() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.SalePrice(&_IFFixedSaleV8.CallOpts)
}

// SaleTokenPurchased is a free data retrieval call binding the contract method 0x1d6a4581.
//
// Solidity: function saleTokenPurchased() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) SaleTokenPurchased(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "saleTokenPurchased")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SaleTokenPurchased is a free data retrieval call binding the contract method 0x1d6a4581.
//
// Solidity: function saleTokenPurchased() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SaleTokenPurchased() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.SaleTokenPurchased(&_IFFixedSaleV8.CallOpts)
}

// SaleTokenPurchased is a free data retrieval call binding the contract method 0x1d6a4581.
//
// Solidity: function saleTokenPurchased() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) SaleTokenPurchased() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.SaleTokenPurchased(&_IFFixedSaleV8.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "startTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) StartTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.StartTime(&_IFFixedSaleV8.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) StartTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.StartTime(&_IFFixedSaleV8.CallOpts)
}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) TotalPaymentReceived(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "totalPaymentReceived")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) TotalPaymentReceived() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.TotalPaymentReceived(&_IFFixedSaleV8.CallOpts)
}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) TotalPaymentReceived() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.TotalPaymentReceived(&_IFFixedSaleV8.CallOpts)
}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) TotalPurchased(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "totalPurchased", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) TotalPurchased(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.TotalPurchased(&_IFFixedSaleV8.CallOpts, arg0)
}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) TotalPurchased(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSaleV8.Contract.TotalPurchased(&_IFFixedSaleV8.CallOpts, arg0)
}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) VestingEditableOverride(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "vestingEditableOverride")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) VestingEditableOverride() (bool, error) {
	return _IFFixedSaleV8.Contract.VestingEditableOverride(&_IFFixedSaleV8.CallOpts)
}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) VestingEditableOverride() (bool, error) {
	return _IFFixedSaleV8.Contract.VestingEditableOverride(&_IFFixedSaleV8.CallOpts)
}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) WhitelistRootHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "whitelistRootHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WhitelistRootHash() ([32]byte, error) {
	return _IFFixedSaleV8.Contract.WhitelistRootHash(&_IFFixedSaleV8.CallOpts)
}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) WhitelistRootHash() ([32]byte, error) {
	return _IFFixedSaleV8.Contract.WhitelistRootHash(&_IFFixedSaleV8.CallOpts)
}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) WhitelistSetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "whitelistSetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WhitelistSetter() (common.Address, error) {
	return _IFFixedSaleV8.Contract.WhitelistSetter(&_IFFixedSaleV8.CallOpts)
}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) WhitelistSetter() (common.Address, error) {
	return _IFFixedSaleV8.Contract.WhitelistSetter(&_IFFixedSaleV8.CallOpts)
}

// WhitelistedPurchase is a free data retrieval call binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 , bytes32[] ) pure returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) WhitelistedPurchase(opts *bind.CallOpts, arg0 *big.Int, arg1 [][32]byte) error {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "whitelistedPurchase", arg0, arg1)

	if err != nil {
		return err
	}

	return err

}

// WhitelistedPurchase is a free data retrieval call binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 , bytes32[] ) pure returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WhitelistedPurchase(arg0 *big.Int, arg1 [][32]byte) error {
	return _IFFixedSaleV8.Contract.WhitelistedPurchase(&_IFFixedSaleV8.CallOpts, arg0, arg1)
}

// WhitelistedPurchase is a free data retrieval call binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 , bytes32[] ) pure returns()
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) WhitelistedPurchase(arg0 *big.Int, arg1 [][32]byte) error {
	return _IFFixedSaleV8.Contract.WhitelistedPurchase(&_IFFixedSaleV8.CallOpts, arg0, arg1)
}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) WithdrawDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "withdrawDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WithdrawDelay() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.WithdrawDelay(&_IFFixedSaleV8.CallOpts)
}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) WithdrawDelay() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.WithdrawDelay(&_IFFixedSaleV8.CallOpts)
}

// WithdrawGiveaway is a free data retrieval call binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] ) pure returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) WithdrawGiveaway(opts *bind.CallOpts, arg0 [][32]byte) error {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "withdrawGiveaway", arg0)

	if err != nil {
		return err
	}

	return err

}

// WithdrawGiveaway is a free data retrieval call binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] ) pure returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WithdrawGiveaway(arg0 [][32]byte) error {
	return _IFFixedSaleV8.Contract.WithdrawGiveaway(&_IFFixedSaleV8.CallOpts, arg0)
}

// WithdrawGiveaway is a free data retrieval call binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] ) pure returns()
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) WithdrawGiveaway(arg0 [][32]byte) error {
	return _IFFixedSaleV8.Contract.WithdrawGiveaway(&_IFFixedSaleV8.CallOpts, arg0)
}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) WithdrawTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "withdrawTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WithdrawTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.WithdrawTime(&_IFFixedSaleV8.CallOpts)
}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) WithdrawTime() (*big.Int, error) {
	return _IFFixedSaleV8.Contract.WithdrawTime(&_IFFixedSaleV8.CallOpts)
}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFFixedSaleV8 *IFFixedSaleV8Caller) WithdrawerCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IFFixedSaleV8.contract.Call(opts, &out, "withdrawerCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WithdrawerCount() (uint32, error) {
	return _IFFixedSaleV8.Contract.WithdrawerCount(&_IFFixedSaleV8.CallOpts)
}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFFixedSaleV8 *IFFixedSaleV8CallerSession) WithdrawerCount() (uint32, error) {
	return _IFFixedSaleV8.Contract.WithdrawerCount(&_IFFixedSaleV8.CallOpts)
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) Cash(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "cash")
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Cash() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Cash(&_IFFixedSaleV8.TransactOpts)
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) Cash() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Cash(&_IFFixedSaleV8.TransactOpts)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) EmergencyTokenRetrieve(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "emergencyTokenRetrieve", token)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) EmergencyTokenRetrieve(token common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.EmergencyTokenRetrieve(&_IFFixedSaleV8.TransactOpts, token)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) EmergencyTokenRetrieve(token common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.EmergencyTokenRetrieve(&_IFFixedSaleV8.TransactOpts, token)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) Fund(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "fund", amount)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Fund(amount *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Fund(&_IFFixedSaleV8.TransactOpts, amount)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) Fund(amount *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Fund(&_IFFixedSaleV8.TransactOpts, amount)
}

// OptInBuyback is a paid mutator transaction binding the contract method 0x22524c9d.
//
// Solidity: function optInBuyback() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) OptInBuyback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "optInBuyback")
}

// OptInBuyback is a paid mutator transaction binding the contract method 0x22524c9d.
//
// Solidity: function optInBuyback() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) OptInBuyback() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.OptInBuyback(&_IFFixedSaleV8.TransactOpts)
}

// OptInBuyback is a paid mutator transaction binding the contract method 0x22524c9d.
//
// Solidity: function optInBuyback() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) OptInBuyback() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.OptInBuyback(&_IFFixedSaleV8.TransactOpts)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 ) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) Purchase(opts *bind.TransactOpts, arg0 *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "purchase", arg0)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 ) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Purchase(arg0 *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Purchase(&_IFFixedSaleV8.TransactOpts, arg0)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 ) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) Purchase(arg0 *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Purchase(&_IFFixedSaleV8.TransactOpts, arg0)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) RenounceOwnership() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.RenounceOwnership(&_IFFixedSaleV8.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.RenounceOwnership(&_IFFixedSaleV8.TransactOpts)
}

// SetBuybackClaimableNumber is a paid mutator transaction binding the contract method 0xc6632d55.
//
// Solidity: function setBuybackClaimableNumber(uint256 _buybackClaimableNumber) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetBuybackClaimableNumber(opts *bind.TransactOpts, _buybackClaimableNumber *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setBuybackClaimableNumber", _buybackClaimableNumber)
}

// SetBuybackClaimableNumber is a paid mutator transaction binding the contract method 0xc6632d55.
//
// Solidity: function setBuybackClaimableNumber(uint256 _buybackClaimableNumber) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetBuybackClaimableNumber(_buybackClaimableNumber *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetBuybackClaimableNumber(&_IFFixedSaleV8.TransactOpts, _buybackClaimableNumber)
}

// SetBuybackClaimableNumber is a paid mutator transaction binding the contract method 0xc6632d55.
//
// Solidity: function setBuybackClaimableNumber(uint256 _buybackClaimableNumber) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetBuybackClaimableNumber(_buybackClaimableNumber *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetBuybackClaimableNumber(&_IFFixedSaleV8.TransactOpts, _buybackClaimableNumber)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetCasher(opts *bind.TransactOpts, _casher common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setCasher", _casher)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetCasher(_casher common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetCasher(&_IFFixedSaleV8.TransactOpts, _casher)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetCasher(_casher common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetCasher(&_IFFixedSaleV8.TransactOpts, _casher)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetCliffPeriod(opts *bind.TransactOpts, claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setCliffPeriod", claimTimes, pct)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetCliffPeriod(claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetCliffPeriod(&_IFFixedSaleV8.TransactOpts, claimTimes, pct)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetCliffPeriod(claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetCliffPeriod(&_IFFixedSaleV8.TransactOpts, claimTimes, pct)
}

// SetFunder is a paid mutator transaction binding the contract method 0x0acc8cd1.
//
// Solidity: function setFunder(address _funder) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetFunder(opts *bind.TransactOpts, _funder common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setFunder", _funder)
}

// SetFunder is a paid mutator transaction binding the contract method 0x0acc8cd1.
//
// Solidity: function setFunder(address _funder) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetFunder(_funder common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetFunder(&_IFFixedSaleV8.TransactOpts, _funder)
}

// SetFunder is a paid mutator transaction binding the contract method 0x0acc8cd1.
//
// Solidity: function setFunder(address _funder) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetFunder(_funder common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetFunder(&_IFFixedSaleV8.TransactOpts, _funder)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetLinearVestingEndTime(opts *bind.TransactOpts, _vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setLinearVestingEndTime", _vestingEndTime)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetLinearVestingEndTime(_vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetLinearVestingEndTime(&_IFFixedSaleV8.TransactOpts, _vestingEndTime)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetLinearVestingEndTime(_vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetLinearVestingEndTime(&_IFFixedSaleV8.TransactOpts, _vestingEndTime)
}

// SetMaxTotalPurchasable is a paid mutator transaction binding the contract method 0xda943cee.
//
// Solidity: function setMaxTotalPurchasable(uint256 _maxTotalPurchasable) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetMaxTotalPurchasable(opts *bind.TransactOpts, _maxTotalPurchasable *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setMaxTotalPurchasable", _maxTotalPurchasable)
}

// SetMaxTotalPurchasable is a paid mutator transaction binding the contract method 0xda943cee.
//
// Solidity: function setMaxTotalPurchasable(uint256 _maxTotalPurchasable) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetMaxTotalPurchasable(_maxTotalPurchasable *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetMaxTotalPurchasable(&_IFFixedSaleV8.TransactOpts, _maxTotalPurchasable)
}

// SetMaxTotalPurchasable is a paid mutator transaction binding the contract method 0xda943cee.
//
// Solidity: function setMaxTotalPurchasable(uint256 _maxTotalPurchasable) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetMaxTotalPurchasable(_maxTotalPurchasable *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetMaxTotalPurchasable(&_IFFixedSaleV8.TransactOpts, _maxTotalPurchasable)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetMinTotalPayment(opts *bind.TransactOpts, _minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setMinTotalPayment", _minTotalPayment)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetMinTotalPayment(_minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetMinTotalPayment(&_IFFixedSaleV8.TransactOpts, _minTotalPayment)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetMinTotalPayment(_minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetMinTotalPayment(&_IFFixedSaleV8.TransactOpts, _minTotalPayment)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetVestingEditable(opts *bind.TransactOpts, _vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setVestingEditable", _vestingEditableOverride)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetVestingEditable(_vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetVestingEditable(&_IFFixedSaleV8.TransactOpts, _vestingEditableOverride)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetVestingEditable(_vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetVestingEditable(&_IFFixedSaleV8.TransactOpts, _vestingEditableOverride)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetWhitelist(opts *bind.TransactOpts, _whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setWhitelist", _whitelistRootHash)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetWhitelist(_whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetWhitelist(&_IFFixedSaleV8.TransactOpts, _whitelistRootHash)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetWhitelist(_whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetWhitelist(&_IFFixedSaleV8.TransactOpts, _whitelistRootHash)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetWhitelistSetter(opts *bind.TransactOpts, _whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setWhitelistSetter", _whitelistSetter)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetWhitelistSetter(_whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetWhitelistSetter(&_IFFixedSaleV8.TransactOpts, _whitelistSetter)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetWhitelistSetter(_whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetWhitelistSetter(&_IFFixedSaleV8.TransactOpts, _whitelistSetter)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) SetWithdrawDelay(opts *bind.TransactOpts, _withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "setWithdrawDelay", _withdrawDelay)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) SetWithdrawDelay(_withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetWithdrawDelay(&_IFFixedSaleV8.TransactOpts, _withdrawDelay)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) SetWithdrawDelay(_withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.SetWithdrawDelay(&_IFFixedSaleV8.TransactOpts, _withdrawDelay)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.TransferOwnership(&_IFFixedSaleV8.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.TransferOwnership(&_IFFixedSaleV8.TransactOpts, newOwner)
}

// WhitelistedPurchase0 is a paid mutator transaction binding the contract method 0x2316448c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) WhitelistedPurchase0(opts *bind.TransactOpts, paymentAmount *big.Int, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "whitelistedPurchase0", paymentAmount, merkleProof, allocation)
}

// WhitelistedPurchase0 is a paid mutator transaction binding the contract method 0x2316448c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WhitelistedPurchase0(paymentAmount *big.Int, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.WhitelistedPurchase0(&_IFFixedSaleV8.TransactOpts, paymentAmount, merkleProof, allocation)
}

// WhitelistedPurchase0 is a paid mutator transaction binding the contract method 0x2316448c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) WhitelistedPurchase0(paymentAmount *big.Int, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.WhitelistedPurchase0(&_IFFixedSaleV8.TransactOpts, paymentAmount, merkleProof, allocation)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) Withdraw() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Withdraw(&_IFFixedSaleV8.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) Withdraw() (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.Withdraw(&_IFFixedSaleV8.TransactOpts)
}

// WithdrawGiveaway0 is a paid mutator transaction binding the contract method 0x1e937107.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Transactor) WithdrawGiveaway0(opts *bind.TransactOpts, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.contract.Transact(opts, "withdrawGiveaway0", merkleProof, allocation)
}

// WithdrawGiveaway0 is a paid mutator transaction binding the contract method 0x1e937107.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8Session) WithdrawGiveaway0(merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.WithdrawGiveaway0(&_IFFixedSaleV8.TransactOpts, merkleProof, allocation)
}

// WithdrawGiveaway0 is a paid mutator transaction binding the contract method 0x1e937107.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSaleV8 *IFFixedSaleV8TransactorSession) WithdrawGiveaway0(merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSaleV8.Contract.WithdrawGiveaway0(&_IFFixedSaleV8.TransactOpts, merkleProof, allocation)
}

// IFFixedSaleV8CashIterator is returned from FilterCash and is used to iterate over the raw logs and unpacked data for Cash events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8CashIterator struct {
	Event *IFFixedSaleV8Cash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8CashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8Cash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8Cash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8CashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8CashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8Cash represents a Cash event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8Cash struct {
	Sender              common.Address
	PaymentTokenBalance *big.Int
	SaleTokenBalance    *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterCash is a free log retrieval operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterCash(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleV8CashIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "Cash", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8CashIterator{contract: _IFFixedSaleV8.contract, event: "Cash", logs: logs, sub: sub}, nil
}

// WatchCash is a free log subscription operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchCash(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8Cash, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "Cash", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8Cash)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "Cash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCash is a log parse operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseCash(log types.Log) (*IFFixedSaleV8Cash, error) {
	event := new(IFFixedSaleV8Cash)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "Cash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8EmergencyTokenRetrieveIterator is returned from FilterEmergencyTokenRetrieve and is used to iterate over the raw logs and unpacked data for EmergencyTokenRetrieve events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8EmergencyTokenRetrieveIterator struct {
	Event *IFFixedSaleV8EmergencyTokenRetrieve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8EmergencyTokenRetrieveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8EmergencyTokenRetrieve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8EmergencyTokenRetrieve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8EmergencyTokenRetrieveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8EmergencyTokenRetrieveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8EmergencyTokenRetrieve represents a EmergencyTokenRetrieve event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8EmergencyTokenRetrieve struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEmergencyTokenRetrieve is a free log retrieval operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterEmergencyTokenRetrieve(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleV8EmergencyTokenRetrieveIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "EmergencyTokenRetrieve", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8EmergencyTokenRetrieveIterator{contract: _IFFixedSaleV8.contract, event: "EmergencyTokenRetrieve", logs: logs, sub: sub}, nil
}

// WatchEmergencyTokenRetrieve is a free log subscription operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchEmergencyTokenRetrieve(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8EmergencyTokenRetrieve, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "EmergencyTokenRetrieve", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8EmergencyTokenRetrieve)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "EmergencyTokenRetrieve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyTokenRetrieve is a log parse operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseEmergencyTokenRetrieve(log types.Log) (*IFFixedSaleV8EmergencyTokenRetrieve, error) {
	event := new(IFFixedSaleV8EmergencyTokenRetrieve)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "EmergencyTokenRetrieve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8FundIterator is returned from FilterFund and is used to iterate over the raw logs and unpacked data for Fund events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8FundIterator struct {
	Event *IFFixedSaleV8Fund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8FundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8Fund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8Fund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8FundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8FundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8Fund represents a Fund event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8Fund struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFund is a free log retrieval operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterFund(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleV8FundIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "Fund", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8FundIterator{contract: _IFFixedSaleV8.contract, event: "Fund", logs: logs, sub: sub}, nil
}

// WatchFund is a free log subscription operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchFund(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8Fund, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "Fund", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8Fund)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "Fund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFund is a log parse operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseFund(log types.Log) (*IFFixedSaleV8Fund, error) {
	event := new(IFFixedSaleV8Fund)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "Fund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8OptInBuybackIterator is returned from FilterOptInBuyback and is used to iterate over the raw logs and unpacked data for OptInBuyback events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8OptInBuybackIterator struct {
	Event *IFFixedSaleV8OptInBuyback // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8OptInBuybackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8OptInBuyback)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8OptInBuyback)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8OptInBuybackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8OptInBuybackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8OptInBuyback represents a OptInBuyback event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8OptInBuyback struct {
	User common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOptInBuyback is a free log retrieval operation binding the contract event 0x91b0dcebf54773cfc86cca32698ae9cd725b3f4e407d4b83e7e19f73c54eb954.
//
// Solidity: event OptInBuyback(address indexed user)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterOptInBuyback(opts *bind.FilterOpts, user []common.Address) (*IFFixedSaleV8OptInBuybackIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "OptInBuyback", userRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8OptInBuybackIterator{contract: _IFFixedSaleV8.contract, event: "OptInBuyback", logs: logs, sub: sub}, nil
}

// WatchOptInBuyback is a free log subscription operation binding the contract event 0x91b0dcebf54773cfc86cca32698ae9cd725b3f4e407d4b83e7e19f73c54eb954.
//
// Solidity: event OptInBuyback(address indexed user)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchOptInBuyback(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8OptInBuyback, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "OptInBuyback", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8OptInBuyback)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "OptInBuyback", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOptInBuyback is a log parse operation binding the contract event 0x91b0dcebf54773cfc86cca32698ae9cd725b3f4e407d4b83e7e19f73c54eb954.
//
// Solidity: event OptInBuyback(address indexed user)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseOptInBuyback(log types.Log) (*IFFixedSaleV8OptInBuyback, error) {
	event := new(IFFixedSaleV8OptInBuyback)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "OptInBuyback", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8OwnershipTransferredIterator struct {
	Event *IFFixedSaleV8OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8OwnershipTransferred represents a OwnershipTransferred event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IFFixedSaleV8OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8OwnershipTransferredIterator{contract: _IFFixedSaleV8.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8OwnershipTransferred)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseOwnershipTransferred(log types.Log) (*IFFixedSaleV8OwnershipTransferred, error) {
	event := new(IFFixedSaleV8OwnershipTransferred)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8PurchaseIterator is returned from FilterPurchase and is used to iterate over the raw logs and unpacked data for Purchase events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8PurchaseIterator struct {
	Event *IFFixedSaleV8Purchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8PurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8Purchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8Purchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8PurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8PurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8Purchase represents a Purchase event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8Purchase struct {
	Sender        common.Address
	PaymentAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPurchase is a free log retrieval operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterPurchase(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleV8PurchaseIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "Purchase", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8PurchaseIterator{contract: _IFFixedSaleV8.contract, event: "Purchase", logs: logs, sub: sub}, nil
}

// WatchPurchase is a free log subscription operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchPurchase(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8Purchase, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "Purchase", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8Purchase)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "Purchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePurchase is a log parse operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParsePurchase(log types.Log) (*IFFixedSaleV8Purchase, error) {
	event := new(IFFixedSaleV8Purchase)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "Purchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetCasherIterator is returned from FilterSetCasher and is used to iterate over the raw logs and unpacked data for SetCasher events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetCasherIterator struct {
	Event *IFFixedSaleV8SetCasher // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetCasherIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetCasher)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetCasher)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetCasherIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetCasherIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetCasher represents a SetCasher event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetCasher struct {
	Casher common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetCasher is a free log retrieval operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetCasher(opts *bind.FilterOpts, casher []common.Address) (*IFFixedSaleV8SetCasherIterator, error) {

	var casherRule []interface{}
	for _, casherItem := range casher {
		casherRule = append(casherRule, casherItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetCasher", casherRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetCasherIterator{contract: _IFFixedSaleV8.contract, event: "SetCasher", logs: logs, sub: sub}, nil
}

// WatchSetCasher is a free log subscription operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetCasher(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetCasher, casher []common.Address) (event.Subscription, error) {

	var casherRule []interface{}
	for _, casherItem := range casher {
		casherRule = append(casherRule, casherItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetCasher", casherRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetCasher)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetCasher", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCasher is a log parse operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetCasher(log types.Log) (*IFFixedSaleV8SetCasher, error) {
	event := new(IFFixedSaleV8SetCasher)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetCasher", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetCliffVestingPeriodIterator is returned from FilterSetCliffVestingPeriod and is used to iterate over the raw logs and unpacked data for SetCliffVestingPeriod events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetCliffVestingPeriodIterator struct {
	Event *IFFixedSaleV8SetCliffVestingPeriod // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetCliffVestingPeriodIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetCliffVestingPeriod)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetCliffVestingPeriod)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetCliffVestingPeriodIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetCliffVestingPeriodIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetCliffVestingPeriod represents a SetCliffVestingPeriod event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetCliffVestingPeriod struct {
	CliffPeriod []IFVestableCliff
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetCliffVestingPeriod is a free log retrieval operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetCliffVestingPeriod(opts *bind.FilterOpts, cliffPeriod [][]IFVestableCliff) (*IFFixedSaleV8SetCliffVestingPeriodIterator, error) {

	var cliffPeriodRule []interface{}
	for _, cliffPeriodItem := range cliffPeriod {
		cliffPeriodRule = append(cliffPeriodRule, cliffPeriodItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetCliffVestingPeriod", cliffPeriodRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetCliffVestingPeriodIterator{contract: _IFFixedSaleV8.contract, event: "SetCliffVestingPeriod", logs: logs, sub: sub}, nil
}

// WatchSetCliffVestingPeriod is a free log subscription operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetCliffVestingPeriod(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetCliffVestingPeriod, cliffPeriod [][]IFVestableCliff) (event.Subscription, error) {

	var cliffPeriodRule []interface{}
	for _, cliffPeriodItem := range cliffPeriod {
		cliffPeriodRule = append(cliffPeriodRule, cliffPeriodItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetCliffVestingPeriod", cliffPeriodRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetCliffVestingPeriod)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetCliffVestingPeriod", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCliffVestingPeriod is a log parse operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetCliffVestingPeriod(log types.Log) (*IFFixedSaleV8SetCliffVestingPeriod, error) {
	event := new(IFFixedSaleV8SetCliffVestingPeriod)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetCliffVestingPeriod", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetFunderIterator is returned from FilterSetFunder and is used to iterate over the raw logs and unpacked data for SetFunder events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetFunderIterator struct {
	Event *IFFixedSaleV8SetFunder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetFunderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetFunder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetFunder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetFunderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetFunderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetFunder represents a SetFunder event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetFunder struct {
	Funder common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetFunder is a free log retrieval operation binding the contract event 0x73e0366d7ceb5a21fb27f8b2aa2720e2a9dee755bd85bfb5dbccf2830753b022.
//
// Solidity: event SetFunder(address indexed funder)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetFunder(opts *bind.FilterOpts, funder []common.Address) (*IFFixedSaleV8SetFunderIterator, error) {

	var funderRule []interface{}
	for _, funderItem := range funder {
		funderRule = append(funderRule, funderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetFunder", funderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetFunderIterator{contract: _IFFixedSaleV8.contract, event: "SetFunder", logs: logs, sub: sub}, nil
}

// WatchSetFunder is a free log subscription operation binding the contract event 0x73e0366d7ceb5a21fb27f8b2aa2720e2a9dee755bd85bfb5dbccf2830753b022.
//
// Solidity: event SetFunder(address indexed funder)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetFunder(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetFunder, funder []common.Address) (event.Subscription, error) {

	var funderRule []interface{}
	for _, funderItem := range funder {
		funderRule = append(funderRule, funderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetFunder", funderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetFunder)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetFunder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFunder is a log parse operation binding the contract event 0x73e0366d7ceb5a21fb27f8b2aa2720e2a9dee755bd85bfb5dbccf2830753b022.
//
// Solidity: event SetFunder(address indexed funder)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetFunder(log types.Log) (*IFFixedSaleV8SetFunder, error) {
	event := new(IFFixedSaleV8SetFunder)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetFunder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetLinearVestingEndTimeIterator is returned from FilterSetLinearVestingEndTime and is used to iterate over the raw logs and unpacked data for SetLinearVestingEndTime events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetLinearVestingEndTimeIterator struct {
	Event *IFFixedSaleV8SetLinearVestingEndTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetLinearVestingEndTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetLinearVestingEndTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetLinearVestingEndTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetLinearVestingEndTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetLinearVestingEndTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetLinearVestingEndTime represents a SetLinearVestingEndTime event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetLinearVestingEndTime struct {
	LinearVestingEndTime *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSetLinearVestingEndTime is a free log retrieval operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetLinearVestingEndTime(opts *bind.FilterOpts, linearVestingEndTime []*big.Int) (*IFFixedSaleV8SetLinearVestingEndTimeIterator, error) {

	var linearVestingEndTimeRule []interface{}
	for _, linearVestingEndTimeItem := range linearVestingEndTime {
		linearVestingEndTimeRule = append(linearVestingEndTimeRule, linearVestingEndTimeItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetLinearVestingEndTime", linearVestingEndTimeRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetLinearVestingEndTimeIterator{contract: _IFFixedSaleV8.contract, event: "SetLinearVestingEndTime", logs: logs, sub: sub}, nil
}

// WatchSetLinearVestingEndTime is a free log subscription operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetLinearVestingEndTime(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetLinearVestingEndTime, linearVestingEndTime []*big.Int) (event.Subscription, error) {

	var linearVestingEndTimeRule []interface{}
	for _, linearVestingEndTimeItem := range linearVestingEndTime {
		linearVestingEndTimeRule = append(linearVestingEndTimeRule, linearVestingEndTimeItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetLinearVestingEndTime", linearVestingEndTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetLinearVestingEndTime)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetLinearVestingEndTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetLinearVestingEndTime is a log parse operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetLinearVestingEndTime(log types.Log) (*IFFixedSaleV8SetLinearVestingEndTime, error) {
	event := new(IFFixedSaleV8SetLinearVestingEndTime)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetLinearVestingEndTime", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetMaxTotalPurchasableIterator is returned from FilterSetMaxTotalPurchasable and is used to iterate over the raw logs and unpacked data for SetMaxTotalPurchasable events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetMaxTotalPurchasableIterator struct {
	Event *IFFixedSaleV8SetMaxTotalPurchasable // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetMaxTotalPurchasableIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetMaxTotalPurchasable)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetMaxTotalPurchasable)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetMaxTotalPurchasableIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetMaxTotalPurchasableIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetMaxTotalPurchasable represents a SetMaxTotalPurchasable event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetMaxTotalPurchasable struct {
	MaxTotalPurchasable *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterSetMaxTotalPurchasable is a free log retrieval operation binding the contract event 0x851466103668359b383470efccd1760dc8caf09bc6d5a74acc7d78ac751c21e9.
//
// Solidity: event SetMaxTotalPurchasable(uint256 indexed _maxTotalPurchasable)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetMaxTotalPurchasable(opts *bind.FilterOpts, _maxTotalPurchasable []*big.Int) (*IFFixedSaleV8SetMaxTotalPurchasableIterator, error) {

	var _maxTotalPurchasableRule []interface{}
	for _, _maxTotalPurchasableItem := range _maxTotalPurchasable {
		_maxTotalPurchasableRule = append(_maxTotalPurchasableRule, _maxTotalPurchasableItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetMaxTotalPurchasable", _maxTotalPurchasableRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetMaxTotalPurchasableIterator{contract: _IFFixedSaleV8.contract, event: "SetMaxTotalPurchasable", logs: logs, sub: sub}, nil
}

// WatchSetMaxTotalPurchasable is a free log subscription operation binding the contract event 0x851466103668359b383470efccd1760dc8caf09bc6d5a74acc7d78ac751c21e9.
//
// Solidity: event SetMaxTotalPurchasable(uint256 indexed _maxTotalPurchasable)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetMaxTotalPurchasable(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetMaxTotalPurchasable, _maxTotalPurchasable []*big.Int) (event.Subscription, error) {

	var _maxTotalPurchasableRule []interface{}
	for _, _maxTotalPurchasableItem := range _maxTotalPurchasable {
		_maxTotalPurchasableRule = append(_maxTotalPurchasableRule, _maxTotalPurchasableItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetMaxTotalPurchasable", _maxTotalPurchasableRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetMaxTotalPurchasable)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetMaxTotalPurchasable", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMaxTotalPurchasable is a log parse operation binding the contract event 0x851466103668359b383470efccd1760dc8caf09bc6d5a74acc7d78ac751c21e9.
//
// Solidity: event SetMaxTotalPurchasable(uint256 indexed _maxTotalPurchasable)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetMaxTotalPurchasable(log types.Log) (*IFFixedSaleV8SetMaxTotalPurchasable, error) {
	event := new(IFFixedSaleV8SetMaxTotalPurchasable)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetMaxTotalPurchasable", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetMinTotalPaymentIterator is returned from FilterSetMinTotalPayment and is used to iterate over the raw logs and unpacked data for SetMinTotalPayment events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetMinTotalPaymentIterator struct {
	Event *IFFixedSaleV8SetMinTotalPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetMinTotalPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetMinTotalPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetMinTotalPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetMinTotalPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetMinTotalPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetMinTotalPayment represents a SetMinTotalPayment event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetMinTotalPayment struct {
	MinTotalPayment *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetMinTotalPayment is a free log retrieval operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetMinTotalPayment(opts *bind.FilterOpts, minTotalPayment []*big.Int) (*IFFixedSaleV8SetMinTotalPaymentIterator, error) {

	var minTotalPaymentRule []interface{}
	for _, minTotalPaymentItem := range minTotalPayment {
		minTotalPaymentRule = append(minTotalPaymentRule, minTotalPaymentItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetMinTotalPayment", minTotalPaymentRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetMinTotalPaymentIterator{contract: _IFFixedSaleV8.contract, event: "SetMinTotalPayment", logs: logs, sub: sub}, nil
}

// WatchSetMinTotalPayment is a free log subscription operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetMinTotalPayment(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetMinTotalPayment, minTotalPayment []*big.Int) (event.Subscription, error) {

	var minTotalPaymentRule []interface{}
	for _, minTotalPaymentItem := range minTotalPayment {
		minTotalPaymentRule = append(minTotalPaymentRule, minTotalPaymentItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetMinTotalPayment", minTotalPaymentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetMinTotalPayment)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetMinTotalPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinTotalPayment is a log parse operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetMinTotalPayment(log types.Log) (*IFFixedSaleV8SetMinTotalPayment, error) {
	event := new(IFFixedSaleV8SetMinTotalPayment)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetMinTotalPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetWhitelistIterator is returned from FilterSetWhitelist and is used to iterate over the raw logs and unpacked data for SetWhitelist events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetWhitelistIterator struct {
	Event *IFFixedSaleV8SetWhitelist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetWhitelistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetWhitelist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetWhitelist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetWhitelistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetWhitelistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetWhitelist represents a SetWhitelist event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetWhitelist struct {
	WhitelistRootHash [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSetWhitelist is a free log retrieval operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetWhitelist(opts *bind.FilterOpts, whitelistRootHash [][32]byte) (*IFFixedSaleV8SetWhitelistIterator, error) {

	var whitelistRootHashRule []interface{}
	for _, whitelistRootHashItem := range whitelistRootHash {
		whitelistRootHashRule = append(whitelistRootHashRule, whitelistRootHashItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetWhitelist", whitelistRootHashRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetWhitelistIterator{contract: _IFFixedSaleV8.contract, event: "SetWhitelist", logs: logs, sub: sub}, nil
}

// WatchSetWhitelist is a free log subscription operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetWhitelist(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetWhitelist, whitelistRootHash [][32]byte) (event.Subscription, error) {

	var whitelistRootHashRule []interface{}
	for _, whitelistRootHashItem := range whitelistRootHash {
		whitelistRootHashRule = append(whitelistRootHashRule, whitelistRootHashItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetWhitelist", whitelistRootHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetWhitelist)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetWhitelist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWhitelist is a log parse operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetWhitelist(log types.Log) (*IFFixedSaleV8SetWhitelist, error) {
	event := new(IFFixedSaleV8SetWhitelist)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetWhitelist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetWhitelistSetterIterator is returned from FilterSetWhitelistSetter and is used to iterate over the raw logs and unpacked data for SetWhitelistSetter events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetWhitelistSetterIterator struct {
	Event *IFFixedSaleV8SetWhitelistSetter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetWhitelistSetterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetWhitelistSetter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetWhitelistSetter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetWhitelistSetterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetWhitelistSetterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetWhitelistSetter represents a SetWhitelistSetter event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetWhitelistSetter struct {
	WhitelistSetter common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetWhitelistSetter is a free log retrieval operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetWhitelistSetter(opts *bind.FilterOpts, whitelistSetter []common.Address) (*IFFixedSaleV8SetWhitelistSetterIterator, error) {

	var whitelistSetterRule []interface{}
	for _, whitelistSetterItem := range whitelistSetter {
		whitelistSetterRule = append(whitelistSetterRule, whitelistSetterItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetWhitelistSetter", whitelistSetterRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetWhitelistSetterIterator{contract: _IFFixedSaleV8.contract, event: "SetWhitelistSetter", logs: logs, sub: sub}, nil
}

// WatchSetWhitelistSetter is a free log subscription operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetWhitelistSetter(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetWhitelistSetter, whitelistSetter []common.Address) (event.Subscription, error) {

	var whitelistSetterRule []interface{}
	for _, whitelistSetterItem := range whitelistSetter {
		whitelistSetterRule = append(whitelistSetterRule, whitelistSetterItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetWhitelistSetter", whitelistSetterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetWhitelistSetter)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetWhitelistSetter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWhitelistSetter is a log parse operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetWhitelistSetter(log types.Log) (*IFFixedSaleV8SetWhitelistSetter, error) {
	event := new(IFFixedSaleV8SetWhitelistSetter)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetWhitelistSetter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8SetWithdrawDelayIterator is returned from FilterSetWithdrawDelay and is used to iterate over the raw logs and unpacked data for SetWithdrawDelay events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetWithdrawDelayIterator struct {
	Event *IFFixedSaleV8SetWithdrawDelay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8SetWithdrawDelayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8SetWithdrawDelay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8SetWithdrawDelay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8SetWithdrawDelayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8SetWithdrawDelayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8SetWithdrawDelay represents a SetWithdrawDelay event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8SetWithdrawDelay struct {
	WithdrawDelay *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetWithdrawDelay is a free log retrieval operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterSetWithdrawDelay(opts *bind.FilterOpts, withdrawDelay []*big.Int) (*IFFixedSaleV8SetWithdrawDelayIterator, error) {

	var withdrawDelayRule []interface{}
	for _, withdrawDelayItem := range withdrawDelay {
		withdrawDelayRule = append(withdrawDelayRule, withdrawDelayItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "SetWithdrawDelay", withdrawDelayRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8SetWithdrawDelayIterator{contract: _IFFixedSaleV8.contract, event: "SetWithdrawDelay", logs: logs, sub: sub}, nil
}

// WatchSetWithdrawDelay is a free log subscription operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchSetWithdrawDelay(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8SetWithdrawDelay, withdrawDelay []*big.Int) (event.Subscription, error) {

	var withdrawDelayRule []interface{}
	for _, withdrawDelayItem := range withdrawDelay {
		withdrawDelayRule = append(withdrawDelayRule, withdrawDelayItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "SetWithdrawDelay", withdrawDelayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8SetWithdrawDelay)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetWithdrawDelay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWithdrawDelay is a log parse operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseSetWithdrawDelay(log types.Log) (*IFFixedSaleV8SetWithdrawDelay, error) {
	event := new(IFFixedSaleV8SetWithdrawDelay)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "SetWithdrawDelay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleV8WithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8WithdrawIterator struct {
	Event *IFFixedSaleV8Withdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleV8WithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleV8Withdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleV8Withdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleV8WithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleV8WithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleV8Withdraw represents a Withdraw event raised by the IFFixedSaleV8 contract.
type IFFixedSaleV8Withdraw struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) FilterWithdraw(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleV8WithdrawIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.FilterLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleV8WithdrawIterator{contract: _IFFixedSaleV8.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IFFixedSaleV8Withdraw, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSaleV8.contract.WatchLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleV8Withdraw)
				if err := _IFFixedSaleV8.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFFixedSaleV8 *IFFixedSaleV8Filterer) ParseWithdraw(log types.Log) (*IFFixedSaleV8Withdraw, error) {
	event := new(IFFixedSaleV8Withdraw)
	if err := _IFFixedSaleV8.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
