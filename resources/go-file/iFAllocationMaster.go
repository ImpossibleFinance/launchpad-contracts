// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package IFAllocationMasterV5

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IFAllocationMasterAddressStakeWeight is an auto generated low-level Go binding around an user-defined struct.
type IFAllocationMasterAddressStakeWeight struct {
	User        common.Address
	StakeWeight *big.Int
}

// IFAllocationMasterV5MetaData contains all meta data concerning the IFAllocationMasterV5 contract.
var IFAllocationMasterV5MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ActiveRollOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddTrack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"AddTrackCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"AddUserCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newCount\",\"type\":\"uint32\"}],\"name\":\"BumpSaleCounter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"DisableTrack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"srcTrackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dstTrackId\",\"type\":\"uint24\"}],\"name\":\"SyncTotalWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"srcTrackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dstTrackId\",\"type\":\"uint24\"}],\"name\":\"SyncUserWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"activeRollOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contractERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_weightAccrualRate\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"_passiveRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_activeRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint104\",\"name\":\"_maxTotalStake\",\"type\":\"uint104\"}],\"name\":\"addTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"bumpSaleCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"disableTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getBatchStakeWeightByTrackId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"stakeWeight\",\"type\":\"uint192\"}],\"internalType\":\"structIFAllocationMaster.AddressStakeWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"getTotalStakeWeight\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"getUserStakeWeight\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasEmergencyWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"numTrackStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"}],\"name\":\"syncTotalWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"}],\"name\":\"syncUserWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackActiveRollOvers\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackCheckpointCounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"trackCheckpoints\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint104\",\"name\":\"totalStaked\",\"type\":\"uint104\"},{\"internalType\":\"uint192\",\"name\":\"totalStakeWeight\",\"type\":\"uint192\"},{\"internalType\":\"uint24\",\"name\":\"numFinishedSales\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackCount\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackFinishedSaleTimestamps\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackMaxStakes\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trackStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackTotalActiveRollOvers\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tracks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contractERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"weightAccrualRate\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"passiveRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"activeRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint104\",\"name\":\"maxTotalStake\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCheckpointCounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userCheckpoints\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint104\",\"name\":\"staked\",\"type\":\"uint104\"},{\"internalType\":\"uint192\",\"name\":\"stakeWeight\",\"type\":\"uint192\"},{\"internalType\":\"uint24\",\"name\":\"numFinishedSales\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162004a9238038062004a928339810160408190526200003491620000a5565b6200003f3362000055565b600180556001600160a01b0316608052620000d7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000b857600080fd5b81516001600160a01b0381168114620000d057600080fd5b9392505050565b6080516149836200010f6000396000818161060601528181610a0c01528181610ae901528181610f84015261106101526149836000f3fe6080604052600436106101cc5760003560e01c806383e64d94116100f7578063ad01671611610095578063dea4707111610064578063dea470711461073c578063ec331ee81461075c578063f2fde38b1461077c578063fe9d47471461079c57600080fd5b8063ad0167161461067e578063b33f517a146106ab578063cbc50245146106ec578063d4799a061461070c57600080fd5b806392721276116100d157806392721276146105d4578063a1a227fa146105f4578063a2e3458614610628578063ab35678c1461065a57600080fd5b806383e64d941461053b57806385e94209146105825780638da5cb5b146105a257600080fd5b80632f385bcb1161016f578063715018a61161013e578063715018a6146104b3578063770c5c12146104c85780637db85246146104e85780637e14a7901461050857600080fd5b80632f385bcb146103c75780632f4fe7821461041a5780633fceccbe1461042d5780635301f3ad1461047b57600080fd5b8063185242b0116101ab578063185242b01461028c5780631ee93a3a1461029f57806325cab7f9146102ea57806326df01e4146103a757600080fd5b8062c40584146101d15780630a29ffd91461022f5780630ee4d19714610251575b600080fd5b3480156101dd57600080fd5b506102126101ec366004613e58565b60026020908152600092835260408084209091529082529020546001600160501b031681565b6040516001600160501b0390911681526020015b60405180910390f35b34801561023b57600080fd5b5061024f61024a366004613e8b565b61080e565b005b34801561025d57600080fd5b5061027e61026c366004613e8b565b60086020526000908152604090205481565b604051908152602001610226565b61024f61029a366004613ee9565b61085e565b3480156102ab57600080fd5b506102da6102ba366004613f3f565b600760209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610226565b3480156102f657600080fd5b50610362610305366004613f8a565b600e602090815260009384526040808520825292845282842090528252902080546001909101546001600160501b03821691600160501b90046001600160681b0316906001600160c01b03811690600160c01b900462ffffff1684565b604080516001600160501b0390951685526001600160681b0390931660208501526001600160c01b039091169183019190915262ffffff166060820152608001610226565b3480156103b357600080fd5b5061024f6103c2366004613ff1565b610ba3565b3480156103d357600080fd5b506104056103e2366004613f3f565b600d60209081526000928352604080842090915290825290205463ffffffff1681565b60405163ffffffff9091168152602001610226565b61024f6104283660046140b4565b610db2565b34801561043957600080fd5b50610463610448366004613e8b565b600c602052600090815260409020546001600160681b031681565b6040516001600160681b039091168152602001610226565b34801561048757600080fd5b5061049b61049636600461416c565b61111c565b6040516001600160c01b039091168152602001610226565b3480156104bf57600080fd5b5061024f611248565b3480156104d457600080fd5b5061024f6104e3366004614196565b61125c565b3480156104f457600080fd5b5061049b6105033660046141c0565b6114d7565b34801561051457600080fd5b50610405610523366004613e8b565b600a6020526000908152604090205463ffffffff1681565b34801561054757600080fd5b5061049b6105563660046141fc565b60036020908152600093845260408085208252928452828420905282529020546001600160c01b031681565b34801561058e57600080fd5b5061024f61059d366004613e8b565b611a1f565b3480156105ae57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610226565b3480156105e057600080fd5b506105bc6105ef366004614238565b611c5b565b34801561060057600080fd5b506105bc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561063457600080fd5b50610648610643366004614262565b611c93565b604051610226969594939291906142d3565b34801561066657600080fd5b5060055460405162ffffff9091168152602001610226565b34801561068a57600080fd5b5061069e610699366004614330565b611d94565b6040516102269190614372565b3480156106b757600080fd5b5061049b6106c6366004613e58565b60046020908152600092835260408084209091529082529020546001600160c01b031681565b3480156106f857600080fd5b5061024f610707366004614196565b611f82565b34801561071857600080fd5b506102da610727366004613e8b565b60066020526000908152604090205460ff1681565b34801561074857600080fd5b5061024f610757366004613e8b565b61216e565b34801561076857600080fd5b5061024f610777366004613e8b565b6123e8565b34801561078857600080fd5b5061024f6107973660046143d3565b612495565b3480156107a857600080fd5b506103626107b73660046143f0565b600b602090815260009283526040808420909152908252902080546001909101546001600160501b03821691600160501b90046001600160681b0316906001600160c01b03811690600160c01b900462ffffff1684565b61081661250e565b62ffffff8116600081815260066020526040808220805460ff19166001179055517fcb27b9acd764424cf6cdaa672c3a35243af86cbf4ecb53ad48a9212610e5781b9190a250565b6002600154141561088a5760405162461bcd60e51b81526004016108819061441a565b60405180910390fd5b600260015562ffffff831660009081526006602052604090205460ff16156108e55760405162461bcd60e51b815260206004820152600e60248201526d1d1c9858dac8191a5cd8589b195960921b6044820152606401610881565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061091b5761091b614467565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050610962858561111c565b8160008151811061097557610975614467565b60200260200101906001600160c01b031690816001600160c01b03168152505060006040518060a00160405280848152602001866001600160501b031681526020016001808111156109c9576109c961447d565b81526020018762ffffff168152602001838152506040516020016109ed91906144f9565b60408051601f198184030181529082905263299aee5160e11b825291507f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b03831690635335dca290610a4e90869060040161459f565b60206040518083038186803b158015610a6657600080fd5b505afa158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e91906145b2565b905080341015610ae15760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f7567682066656560901b6044820152606401610881565b610b0e8987857f000000000000000000000000000000000000000000000000000000000000000085612568565b610b1881346145e1565b15610b5557336108fc610b2b83346145e1565b6040518115909202916000818181858888f19350505050158015610b53573d6000803e3d6000fd5b505b7f26f761805bf5b48d09abfb7b15d908bb69dd697594afda09ffae497db2a3df4a898989898c604051610b8c9594939291906145f8565b60405180910390a150506001805550505050505050565b610bab61250e565b62ffffff8416610bf15760405162461bcd60e51b815260206004820152601160248201527006163637275616c2072617465206973203607c1b6044820152606401610881565b6040805160e06020601f8a01819004028201810190925260c081018881526005928291908b908b908190850183828082843760009201829052509385525050506001600160a01b03891660208084019190915262ffffff891660408401526001600160401b038089166060850152871660808401526001600160681b03861660a090930192909252835460018101855593815281902082518051939460030290910192610ca19284920190613da7565b50602082015160018083018054604086015160608701516001600160401b03908116600160b81b0267ffffffffffffffff60b81b1962ffffff909316600160a01b026001600160b81b03199094166001600160a01b0390971696909617929092171693909317905560808401516002909301805460a0909501516001600160681b0316600160401b026001600160a81b0319909516939092169290921792909217909155600554610d5f91610d55916145e1565b60008060006125d3565b846001600160a01b03168787604051610d7992919061463d565b604051908190038120907f1e50e9757b681e9008a480e25488ddd40b47b5295b68ae5f6d9c7204377e5b3b90600090a350505050505050565b60026001541415610dd55760405162461bcd60e51b81526004016108819061441a565b600260015562ffffff831660009081526006602052604090205460ff1615610e315760405162461bcd60e51b815260206004820152600f60248201526e1d1c9858dac808591a5cd8589b1959608a1b6044820152606401610881565b6000846001600160401b03811115610e4b57610e4b614451565b604051908082528060200260200182016040528015610e74578160200160208202803683370190505b50905060005b85811015610eef57610eb385888884818110610e9857610e98614467565b9050602002016020810190610ead91906143d3565b866114d7565b828281518110610ec557610ec5614467565b6001600160c01b039092166020928302919091019091015280610ee78161464d565b915050610e7a565b506040805160c060208802808301820190935260a0820188815260009383928b918b9182919086019084908082843760009201829052509385525050506001600160501b038716602083015260409091019081526020018662ffffff16815260200183815250604051602001610f6591906144f9565b60408051601f198184030181529082905263299aee5160e11b825291507f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b03831690635335dca290610fc690869060040161459f565b60206040518083038186803b158015610fde57600080fd5b505afa158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101691906145b2565b9050803410156110595760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f7567682066656560901b6044820152606401610881565b6110868a86857f000000000000000000000000000000000000000000000000000000000000000085612568565b61109081346145e1565b156110cd57336108fc6110a383346145e1565b6040518115909202916000818181858888f193505050501580156110cb573d6000803e3d6000fd5b505b7f63f7370c5ec881103dc49f9b20da0dd67baa69c60e154fafa9f9b914fa1982858a8888888b6040516111049594939291906145f8565b60405180910390a15050600180555050505050505050565b600042826001600160501b031611156111475760405162461bcd60e51b815260040161088190614668565b62ffffff831660009081526006602052604090205460ff161561116c57506000611242565b60006111788484612d22565b80519091506001600160501b0316611194576000915050611242565b80516000906111a39085614696565b9050600060058662ffffff16815481106111bf576111bf614467565b906000526020600020906003020190506000670de0b6b3a764000084602001516001600160681b03168360010160149054906101000a900462ffffff1662ffffff16856001600160501b031661121591906146be565b61121f91906146be565b6112299190614703565b905080846040015161123b9190614729565b9450505050505b92915050565b61125061250e565b61125a6000613028565b565b6002600154141561127f5760405162461bcd60e51b81526004016108819061441a565b60026001556001600160681b0381166112c85760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e7420697320360ac1b6044820152606401610881565b600060058362ffffff16815481106112e2576112e2614467565b6000918252602080832062ffffff8716845260069091526040909220546003909102909101915060ff16801561134e5760405162461bcd60e51b81526020600482015260116024820152701d1c9858dac81a5cc8191a5cd8589b1959607a1b6044820152606401610881565b6113713360018401546001600160a01b031690306001600160681b038716613078565b61137d848460016130e9565b61138b8484600160006125d3565b62ffffff84166000908152600b60209081526040808320600a90925282205482906113be9060019063ffffffff16614754565b63ffffffff16815260208082019290925260409081016000908120825160808101845281546001600160501b03811682526001600160681b03600160501b90910481168287018190526001909301546001600160c01b0381168387015262ffffff600160c01b909104811660608401528b168452600c9095529290912054919350911610156114865760208181015162ffffff87166000908152600c909252604090912080546cffffffffffffffffffffffffff19166001600160681b039092169190911790555b6040516001600160681b0385168152339062ffffff8716907fc7de557a4862000809abc99c50fd0b30c35beb37a010dae4335462b336827fd3906020015b60405180910390a3505060018055505050565b600042826001600160501b031611156115025760405162461bcd60e51b815260040161088190614668565b62ffffff841660009081526006602052604090205460ff161561152757506000611a18565b62ffffff84166000908152600d602090815260408083206001600160a01b038716845290915290205463ffffffff1680611565576000915050611a18565b60006115728686866137b3565b80519091506001600160501b031661158f57600092505050611a18565b600061159b8786612d22565b90506000826060015182606001516115b39190614771565b9050600060058962ffffff16815481106115cf576115cf614467565b90600052602060002090600302016040518060c00160405290816000820180546115f89061478d565b80601f01602080910402602001604051908101604052809291908181526020018280546116249061478d565b80156116715780601f1061164657610100808354040283529160200191611671565b820191906000526020600020905b81548152906001019060200180831161165457829003601f168201915b505050918352505060018201546001600160a01b038116602083015262ffffff600160a01b8204811660408401526001600160401b03600160b81b9092048216606084015260029093015490811660808301526001600160681b03600160401b9091041660a090910152909150600090831661175f5784516000906116f6908a614696565b9050670de0b6b3a764000086602001516001600160681b0316846040015162ffffff16836001600160501b031661172d91906146be565b61173791906146be565b6117419190614703565b86604001516117509190614729565b9750611a189650505050505050565b506040840151845160005b8462ffffff168162ffffff1610156119675762ffffff8c166000908152600260205260408120606089015184919083906117a59086906147c8565b62ffffff1681526020810191909152604001600020546117ce91906001600160501b0316614696565b9050670de0b6b3a764000088602001516001600160681b0316866040015162ffffff16836001600160501b031661180591906146be565b61180f91906146be565b6118199190614703565b6118239085614729565b93506000600360008f62ffffff1662ffffff16815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000206000848b6060015161187991906147c8565b62ffffff16815260208101919091526040016000205460608701516001600160c01b039091169150670de0b6b3a7640000906001600160401b03166118be83886147e6565b6118c891906146be565b6118d29190614703565b6080870151670de0b6b3a7640000906118f4906001600160401b0316846146be565b6118fe9190614703565b6119089190614729565b62ffffff8f16600090815260026020526040812060608c0151929750916119309086906147c8565b62ffffff1681526020810191909152604001600020546001600160501b0316935082915061195f905081614806565b91505061176a565b5062ffffff8b1660009081526002602052604081206060870151829061198f90600190614771565b62ffffff1681526020810191909152604001600020546119b8906001600160501b03168b614696565b9050670de0b6b3a764000087602001516001600160681b0316856040015162ffffff16836001600160501b03166119ef91906146be565b6119f991906146be565b611a039190614703565b611a0d9084614729565b985050505050505050505b9392505050565b611a2b816000806130e9565b62ffffff81166000818152600e6020908152604080832033808552908352818420948452600d83528184209084529091528120549091908290611a769060019063ffffffff16614754565b63ffffffff16815260208082019290925260409081016000908120825160808101845281546001600160501b0381168252600160501b90046001600160681b0316818601526001909101546001600160c01b0380821683860152600160c01b90910462ffffff9081166060840181905290881680855260038752858520338652875285852082865287528585205490855260048752858520828652909652938320805492965093948116939291611b2f918591166147e6565b92506101000a8154816001600160c01b0302191690836001600160c01b031602179055508160400151600360008562ffffff1662ffffff1681526020019081526020016000206000611b7e3390565b6001600160a01b031681526020808201929092526040908101600090812062ffffff86811680845291855283832080546001600160c01b0319166001600160c01b03978816179055878401519089168352600485528383209183529352908120805492939092611bf091859116614729565b92506101000a8154816001600160c01b0302191690836001600160c01b03160217905550611c1b3390565b6001600160a01b03168362ffffff167f2ad99c2ef3fb067831abd0a8620f3b2ddda1e7be89576a286edea06e048cf3dc60405160405180910390a3505050565b60096020528160005260406000208181548110611c7757600080fd5b6000918252602090912001546001600160a01b03169150829050565b60058181548110611ca357600080fd5b9060005260206000209060030201600091509050806000018054611cc69061478d565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf29061478d565b8015611d3f5780601f10611d1457610100808354040283529160200191611d3f565b820191906000526020600020905b815481529060010190602001808311611d2257829003601f168201915b505050600184015460029094015492936001600160a01b0381169362ffffff600160a01b83041693506001600160401b03600160b81b90920482169250908116906001600160681b03600160401b9091041686565b606042846001600160501b03161115611dbf5760405162461bcd60e51b815260040161088190614668565b60008211611e215760405162461bcd60e51b815260206004820152602960248201527f636f756e7420706172616d65746572206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610881565b62ffffff851660009081526008602052604081205490611e418486614829565b90506000818310611e525781611e54565b825b90506000611e6287836145e1565b6001600160401b03811115611e7957611e79614451565b604051908082528060200260200182016040528015611ebe57816020015b6040805180820190915260008082526020820152815260200190600190039081611e975790505b509050865b82811015611f755762ffffff8a166000908152600960205260408120805483908110611ef157611ef1614467565b60009182526020822001546001600160a01b03169150611f128c838d6114d7565b604080518082019091526001600160a01b03841681526001600160c01b038216602082015290915084611f458c866145e1565b81518110611f5557611f55614467565b602002602001018190525050508080611f6d9061464d565b915050611ec3565b5098975050505050505050565b60026001541415611fa55760405162461bcd60e51b81526004016108819061441a565b60026001556001600160681b038116611fee5760405162461bcd60e51b815260206004820152600b60248201526a0616d6f756e7420697320360ac1b6044820152606401610881565b600060058362ffffff168154811061200857612008614467565b6000918252602080832062ffffff87168452600d909152604083206003909202019250816120333390565b6001600160a01b03168152602080820192909252604090810160009081205462ffffff88168252600e845282822033835290935290812063ffffffff90921692509081612081600185614754565b63ffffffff168152602081019190915260400160002080549091506001600160681b03600160501b909104811690851611156120f15760405162461bcd60e51b815260206004820152600f60248201526e185b5bdd5b9d080f881cdd185ad959608a1b6044820152606401610881565b6120fd858560006130e9565b61210a85856000806125d3565b61212c3360018501546001600160a01b0316906001600160681b038716613b1f565b6040516001600160681b0385168152339062ffffff8716907fbd1cd43f77539b6f0bc66ed76923ac8eb8cb34f9d6ff0c16b6b8b1d43cf94f08906020016114c4565b600260015414156121915760405162461bcd60e51b81526004016108819061441a565b600260015562ffffff811660009081526006602052604090205460ff166121ec5760405162461bcd60e51b815260206004820152600f60248201526e1d1c9858dac808591a5cd8589b1959608a1b6044820152606401610881565b62ffffff8116600090815260076020908152604080832033845290915290205460ff161561224d5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e4818d85b1b195960921b6044820152606401610881565b62ffffff811660008181526007602090815260408083203384529091528120805460ff191660011790556005805491929091811061228d5761228d614467565b6000918252602080832062ffffff86168452600d909152604083206003909202019250816122b83390565b6001600160a01b03168152602080820192909252604090810160009081205462ffffff87168252600e845282822033835290935290812063ffffffff90921692509081612306600185614754565b63ffffffff1663ffffffff16815260200190815260200160002090506123458482600001600a9054906101000a90046001600160681b031660006130e9565b8054612365908590600160501b90046001600160681b03166000806125d3565b61239033825460018601546001600160a01b03169190600160501b90046001600160681b0316613b1f565b805460408051600160501b9092046001600160681b0316825251339162ffffff8716917ff427794f261016177479dd3be6bcc4f1dfbf441739b329c9f29c0046002ade0d916020908290030190a35050600180555050565b6123f061250e565b62ffffff81166000908152600b60209081526040808320600a90925282205482906124239060019063ffffffff16614754565b63ffffffff1681526020808201929092526040908101600090812060019081015462ffffff878116845260028652848420600160c01b909204168084529452918120805469ffffffffffffffffffff1916426001600160501b031617905591925061249191849181906125d3565b5050565b61249d61250e565b6001600160a01b0381166125025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610881565b61250b81613028565b50565b6000546001600160a01b0316331461125a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610881565b604051634f9e72ad60e11b81526001600160a01b03831690639f3ce55a90839061259a90899089908990600401614841565b6000604051808303818588803b1580156125b357600080fd5b505af11580156125c7573d6000803e3d6000fd5b50505050505050505050565b600060058562ffffff16815481106125ed576125ed614467565b6000918252602080832062ffffff89168452600a9091526040909220546003909102909101915063ffffffff168061273b576040518060800160405280426001600160501b03168152602001866001600160681b0316815260200160006001600160c01b0316815260200184612664576000612667565b60015b60ff16905262ffffff8781166000818152600b60209081526040808320838052825280832086518154888501516001600160681b0316600160501b026001600160b81b03199091166001600160501b03909216919091171781558682015160019091018054606090980151909616600160c01b026001600160d81b03199097166001600160c01b039091161795909517909355908152600a909152908120805463ffffffff16916127178361487d565b91906101000a81548163ffffffff021916908363ffffffff16021790555050612cd7565b62ffffff86166000908152600b602052604081208161275b600185614754565b63ffffffff1681526020808201929092526040908101600090812062ffffff8b1682526006909352205490915060ff1680156127df5785156127df5760405162461bcd60e51b815260206004820152601a60248201527f64697361626c65643a2063616e6e6f7420616464207374616b650000000000006044820152606401610881565b81546001600160501b03428116911611156128335760405162461bcd60e51b815260206004820152601460248201527374696d657374616d702023206f766572666c6f7760601b6044820152606401610881565b815460009061284b906001600160501b031642614696565b83546001870154919250600091670de0b6b3a764000091600160501b90046001600160681b03169061289290600160a01b900462ffffff166001600160501b0386166146be565b61289c91906146be565b6128a69190614703565b60018501549091506000906128c59083906001600160c01b0316614729565b905087156129dd5762ffffff808c1660009081526004602090815260408083206001808b0154600160c01b90049095168452909152902054908801546001600160c01b0390911690670de0b6b3a764000090600160b81b90046001600160401b031661293183856147e6565b61293b91906146be565b6129459190614703565b6002890154670de0b6b3a764000090612967906001600160401b0316846146be565b6129719190614703565b61297b9190614729565b91508b62ffffff167fcd058f3f37dac45b4ea419da18091e06ea38756c9996298ca517599007e777c48760010160189054906101000a900462ffffff1660016129c491906147c8565b60405162ffffff909116815260200160405180910390a2505b6001600160501b038316612b0e5788612a12578454612a0d908b90600160501b90046001600160681b0316614897565b612a2f565b8454612a2f908b90600160501b90046001600160681b03166148b7565b85546001600160681b0391909116600160501b02600160501b600160b81b031990911617855583612a605780612a8c565b60018501546001600160c01b03808316911610612a7d5780612a8c565b60018501546001600160c01b03165b6001860180546001600160c01b0319166001600160c01b039290921691909117905587612ac9576001850154600160c01b900462ffffff16612ae9565b8460010160189054906101000a900462ffffff166001612ae991906147c8565b8560010160186101000a81548162ffffff021916908362ffffff160217905550612cd1565b6040518060800160405280426001600160501b031681526020018a612b4f578654612b4a908d90600160501b90046001600160681b0316614897565b612b6c565b8654612b6c908d90600160501b90046001600160681b03166148b7565b6001600160681b0316815260200185612b855782612bb1565b60018701546001600160c01b03808516911610612ba25782612bb1565b60018701546001600160c01b03165b6001600160c01b0316815260200189612bda576001870154600160c01b900462ffffff16612bfa565b8660010160189054906101000a900462ffffff166001612bfa91906147c8565b62ffffff9081169091528c81166000818152600b6020908152604080832063ffffffff808e16855290835281842087518154898601516001600160681b0316600160501b026001600160b81b03199091166001600160501b03909216919091171781558783015160019091018054606090990151909716600160c01b026001600160d81b03199098166001600160c01b039091161796909617909455918152600a90915290812080549092169190612cb18361487d565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b50505050505b6040516001600160501b034216815262ffffff8716907fbae21b9ce1f492a8affaa603b56fe9c921dceb290c3a3c11815c26b6e6e67fc39060200160405180910390a2505050505050565b60408051608081018252600080825260208083018290528284018290526060830182905262ffffff86168252600a815283822054600b909152928120919263ffffffff16916001600160501b03851691612d7d600185614754565b63ffffffff1681526020810191909152604001600020546001600160501b031611612e375762ffffff84166000908152600b6020526040812090612dc2600184614754565b63ffffffff1681526020808201929092526040908101600020815160808101835281546001600160501b0381168252600160501b90046001600160681b031693810193909352600101546001600160c01b03811691830191909152600160c01b900462ffffff16606082015291506112429050565b62ffffff84166000908152600b602090815260408083208380529091529020546001600160501b0380851691161115612e95575050604080516080810182526000808252602082018190529181018290526060810191909152611242565b600080612ea3600184614754565b90505b8163ffffffff168163ffffffff161115612fa45760006002612ec88484614754565b612ed291906148d9565b612edc9083614754565b62ffffff8881166000908152600b6020908152604080832063ffffffff86168452825291829020825160808101845281546001600160501b03808216808452600160501b9092046001600160681b0316948301949094526001909201546001600160c01b03811694820194909452600160c01b90930490931660608301529293509188161415612f725794506112429350505050565b80516001600160501b0380891691161015612f8f57819350612f9d565b612f9a600183614754565b92505b5050612ea6565b5062ffffff8086166000908152600b6020908152604080832063ffffffff909516835293815290839020835160808101855281546001600160501b03811682526001600160681b03600160501b9091041692810192909252600101546001600160c01b03811693820193909352600160c01b90920416606082015291506112429050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526130e39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613b54565b50505050565b600060058462ffffff168154811061310357613103614467565b6000918252602080832062ffffff88168452600d9091526040832060039092020192508161312e3390565b6001600160a01b03168152602080820192909252604090810160009081205462ffffff89168252600a845282822054600b90945291812063ffffffff9283169450929091169181613180600185614754565b63ffffffff90811682526020808301939093526040918201600020825160808101845281546001600160501b0381168252600160501b90046001600160681b031694810194909452600101546001600160c01b03811692840192909252600160c01b90910462ffffff16606083015290915083166133f25760028401546001600160681b03600160401b909104811690871611156132565760405162461bcd60e51b8152602060048201526013602482015272065786365656473207374616b696e672063617606c1b6044820152606401610881565b62ffffff8716600081815260096020908152604080832080546001810182559084528284200180546001600160a01b03191633179055928252600890529081208054916132a28361464d565b91905055506040518060800160405280426001600160501b03168152602001876001600160681b0316815260200160006001600160c01b03168152602001826060015162ffffff16815250600e60008962ffffff1662ffffff16815260200190815260200160002060006133133390565b6001600160a01b0316815260208082019290925260409081016000908120818052835281902083518154938501516001600160681b0316600160501b026001600160b81b03199094166001600160501b03909116179290921782558201516001918201805460609094015162ffffff16600160c01b026001600160d81b03199094166001600160c01b0390921691909117929092179091556133b69084906148f0565b62ffffff88166000908152600d602090815260408083203384529091529020805463ffffffff191663ffffffff92909216919091179055613767565b62ffffff87166000908152600e6020908152604080832033845290915281208161341d600187614754565b63ffffffff16815260208101919091526040016000206002860154909150600160401b90046001600160681b03168661347257815461346d908990600160501b90046001600160681b0316614897565b61348f565b815461348f908990600160501b90046001600160681b03166148b7565b6001600160681b031611156134dc5760405162461bcd60e51b8152602060048201526013602482015272065786365656473207374616b696e672063617606c1b6044820152606401610881565b80546001600160501b03428116911611156135305760405162461bcd60e51b815260206004820152601460248201527374696d657374616d702023206f766572666c6f7760601b6044820152606401610881565b8054426001600160501b03908116911614156135de578561356d578054613568908890600160501b90046001600160681b0316614897565b61358a565b805461358a908890600160501b90046001600160681b03166148b7565b81546001600160681b0391909116600160501b02600160501b600160b81b0319909116178155606082015160018201805462ffffff909216600160c01b0262ffffff60c01b19909216919091179055613765565b6040518060800160405280426001600160501b031681526020018761361f57825461361a908a90600160501b90046001600160681b0316614897565b61363c565b825461363c908a90600160501b90046001600160681b03166148b7565b6001600160681b031681526020016136558a33426114d7565b6001600160c01b03168152606084015162ffffff9081166020928301528a166000908152600e9091526040812090336001600160a01b031681526020808201929092526040908101600090812063ffffffff89168252835281902083518154938501516001600160681b0316600160501b026001600160b81b03199094166001600160501b03909116179290921782558201516001918201805460609094015162ffffff16600160c01b026001600160d81b03199094166001600160c01b03909216919091179290921790915561372d9085906148f0565b62ffffff89166000908152600d602090815260408083203384529091529020805463ffffffff191663ffffffff929092169190911790555b505b6040516001600160501b034216815262ffffff8816907f452e6119384e406a318edbd63efae9316d44abef87b7b0d4a557e935b0d7f2e59060200160405180910390a250505050505050565b60408051608081018252600080825260208083018290528284018290526060830182905262ffffff8716808352600d82528483206001600160a01b03881680855290835285842054918452600e8352858420908452909152928120919263ffffffff16916001600160501b0385169161382d600185614754565b63ffffffff1681526020810191909152604001600020546001600160501b0316116138fb5762ffffff85166000908152600e602090815260408083206001600160a01b0388168452909152812090613886600184614754565b63ffffffff1681526020808201929092526040908101600020815160808101835281546001600160501b0381168252600160501b90046001600160681b031693810193909352600101546001600160c01b03811691830191909152600160c01b900462ffffff1660608201529150611a189050565b62ffffff85166000908152600e602090815260408083206001600160a01b038816845282528083208380529091529020546001600160501b038085169116111561396a575050604080516080810182526000808252602082018190529181018290526060810191909152611a18565b600080613978600184614754565b90505b8163ffffffff168163ffffffff161115613a8a576000600261399d8484614754565b6139a791906148d9565b6139b19083614754565b62ffffff8981166000908152600e602090815260408083206001600160a01b038d168452825280832063ffffffff86168452825291829020825160808101845281546001600160501b03808216808452600160501b9092046001600160681b0316948301949094526001909201546001600160c01b03811694820194909452600160c01b90930490931660608301529293509188161415613a58579450611a189350505050565b80516001600160501b0380891691161015613a7557819350613a83565b613a80600183614754565b92505b505061397b565b5062ffffff8087166000908152600e602090815260408083206001600160a01b038a168452825280832063ffffffff909516835293815290839020835160808101855281546001600160501b03811682526001600160681b03600160501b9091041692810192909252600101546001600160c01b03811693820193909352600160c01b9092041660608201529150611a189050565b6040516001600160a01b038316602482015260448101829052613b4f90849063a9059cbb60e01b906064016130ac565b505050565b6000613ba9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c269092919063ffffffff16565b805190915015613b4f5780806020019051810190613bc7919061490f565b613b4f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610881565b6060613c358484600085613c3d565b949350505050565b606082471015613c9e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610881565b6001600160a01b0385163b613cf55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610881565b600080866001600160a01b03168587604051613d119190614931565b60006040518083038185875af1925050503d8060008114613d4e576040519150601f19603f3d011682016040523d82523d6000602084013e613d53565b606091505b5091509150613d63828286613d6e565b979650505050505050565b60608315613d7d575081611a18565b825115613d8d5782518084602001fd5b8160405162461bcd60e51b8152600401610881919061459f565b828054613db39061478d565b90600052602060002090601f016020900481019282613dd55760008555613e1b565b82601f10613dee57805160ff1916838001178555613e1b565b82800160010185558215613e1b579182015b82811115613e1b578251825591602001919060010190613e00565b50613e27929150613e2b565b5090565b5b80821115613e275760008155600101613e2c565b803562ffffff81168114613e5357600080fd5b919050565b60008060408385031215613e6b57600080fd5b613e7483613e40565b9150613e8260208401613e40565b90509250929050565b600060208284031215613e9d57600080fd5b611a1882613e40565b6001600160a01b038116811461250b57600080fd5b80356001600160501b0381168114613e5357600080fd5b80356001600160401b0381168114613e5357600080fd5b60008060008060808587031215613eff57600080fd5b8435613f0a81613ea6565b9350613f1860208601613e40565b9250613f2660408601613ebb565b9150613f3460608601613ed2565b905092959194509250565b60008060408385031215613f5257600080fd5b613f5b83613e40565b91506020830135613f6b81613ea6565b809150509250929050565b803563ffffffff81168114613e5357600080fd5b600080600060608486031215613f9f57600080fd5b613fa884613e40565b92506020840135613fb881613ea6565b9150613fc660408501613f76565b90509250925092565b8035613e5381613ea6565b80356001600160681b0381168114613e5357600080fd5b600080600080600080600060c0888a03121561400c57600080fd5b87356001600160401b038082111561402357600080fd5b818a0191508a601f83011261403757600080fd5b81358181111561404657600080fd5b8b602082850101111561405857600080fd5b60209283019950975061406e918a019050613fcf565b945061407c60408901613e40565b935061408a60608901613ed2565b925061409860808901613ed2565b91506140a660a08901613fda565b905092959891949750929550565b60008060008060008060a087890312156140cd57600080fd5b86356140d881613ea6565b955060208701356001600160401b03808211156140f457600080fd5b818901915089601f83011261410857600080fd5b81358181111561411757600080fd5b8a60208260051b850101111561412c57600080fd5b60208301975080965050505061414460408801613e40565b925061415260608801613ebb565b915061416060808801613ed2565b90509295509295509295565b6000806040838503121561417f57600080fd5b61418883613e40565b9150613e8260208401613ebb565b600080604083850312156141a957600080fd5b6141b283613e40565b9150613e8260208401613fda565b6000806000606084860312156141d557600080fd5b6141de84613e40565b925060208401356141ee81613ea6565b9150613fc660408501613ebb565b60008060006060848603121561421157600080fd5b61421a84613e40565b9250602084013561422a81613ea6565b9150613fc660408501613e40565b6000806040838503121561424b57600080fd5b61425483613e40565b946020939093013593505050565b60006020828403121561427457600080fd5b5035919050565b60005b8381101561429657818101518382015260200161427e565b838111156130e35750506000910152565b600081518084526142bf81602086016020860161427b565b601f01601f19169290920160200192915050565b60c0815260006142e660c08301896142a7565b6001600160a01b039790971660208301525062ffffff9490941660408501526001600160401b039283166060850152911660808301526001600160681b031660a090910152919050565b6000806000806080858703121561434657600080fd5b61434f85613e40565b935061435d60208601613ebb565b93969395505050506040820135916060013590565b602080825282518282018190526000919060409081850190868401855b828110156143c657815180516001600160a01b031685528601516001600160c01b031686850152928401929085019060010161438f565b5091979650505050505050565b6000602082840312156143e557600080fd5b8135611a1881613ea6565b6000806040838503121561440357600080fd5b61440c83613e40565b9150613e8260208401613f76565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600281106144b157634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b838110156144ee5781516001600160c01b0316875295820195908201906001016144c9565b509495945050505050565b6020808252825160a083830152805160c0840181905260009291820190839060e08601905b808310156145475783516001600160a01b0316825292840192600192909201919084019061451e565b50928601516001600160501b038116604087015292604087015193506145706060870185614493565b606087015162ffffff8116608088015293506080870151868203601f190160a0880152935061123b81856144b5565b602081526000611a1860208301846142a7565b6000602082840312156145c457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156145f3576145f36145cb565b500390565b6001600160a01b0395909516855262ffffff93841660208601526001600160501b039290921660408501526001600160401b0316606084015216608082015260a00190565b8183823760009101908152919050565b6000600019821415614661576146616145cb565b5060010190565b6020808252601490820152730e8d2dacae6e8c2dae0404640e8dede40d0d2ced60631b604082015260600190565b60006001600160501b03838116908316818110156146b6576146b66145cb565b039392505050565b60006001600160c01b03828116848216811515828404821116156146e4576146e46145cb565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160c01b038381168061471d5761471d6146ed565b92169190910492915050565b60006001600160c01b0382811684821680830382111561474b5761474b6145cb565b01949350505050565b600063ffffffff838116908316818110156146b6576146b66145cb565b600062ffffff838116908316818110156146b6576146b66145cb565b600181811c908216806147a157607f821691505b602082108114156147c257634e487b7160e01b600052602260045260246000fd5b50919050565b600062ffffff80831681851680830382111561474b5761474b6145cb565b60006001600160c01b03838116908316818110156146b6576146b66145cb565b600062ffffff8083168181141561481f5761481f6145cb565b6001019392505050565b6000821982111561483c5761483c6145cb565b500190565b6001600160a01b03841681526001600160401b0383166020820152606060408201819052600090614874908301846142a7565b95945050505050565b600063ffffffff8083168181141561481f5761481f6145cb565b60006001600160681b03838116908316818110156146b6576146b66145cb565b60006001600160681b0380831681851680830382111561474b5761474b6145cb565b600063ffffffff8084168061471d5761471d6146ed565b600063ffffffff80831681851680830382111561474b5761474b6145cb565b60006020828403121561492157600080fd5b81518015158114611a1857600080fd5b6000825161494381846020870161427b565b919091019291505056fea264697066735822122059f46cd294afc986e65f308b5ba0d5e4021d99430d994542427d9a8c9966049564736f6c63430008090033",
}

// IFAllocationMasterV5ABI is the input ABI used to generate the binding from.
// Deprecated: Use IFAllocationMasterV5MetaData.ABI instead.
var IFAllocationMasterV5ABI = IFAllocationMasterV5MetaData.ABI

// IFAllocationMasterV5Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IFAllocationMasterV5MetaData.Bin instead.
var IFAllocationMasterV5Bin = IFAllocationMasterV5MetaData.Bin

// DeployIFAllocationMasterV5 deploys a new Ethereum contract, binding an instance of IFAllocationMasterV5 to it.
func DeployIFAllocationMasterV5(auth *bind.TransactOpts, backend bind.ContractBackend, _messageBus common.Address) (common.Address, *types.Transaction, *IFAllocationMasterV5, error) {
	parsed, err := IFAllocationMasterV5MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IFAllocationMasterV5Bin), backend, _messageBus)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IFAllocationMasterV5{IFAllocationMasterV5Caller: IFAllocationMasterV5Caller{contract: contract}, IFAllocationMasterV5Transactor: IFAllocationMasterV5Transactor{contract: contract}, IFAllocationMasterV5Filterer: IFAllocationMasterV5Filterer{contract: contract}}, nil
}

// IFAllocationMasterV5 is an auto generated Go binding around an Ethereum contract.
type IFAllocationMasterV5 struct {
	IFAllocationMasterV5Caller     // Read-only binding to the contract
	IFAllocationMasterV5Transactor // Write-only binding to the contract
	IFAllocationMasterV5Filterer   // Log filterer for contract events
}

// IFAllocationMasterV5Caller is an auto generated read-only Go binding around an Ethereum contract.
type IFAllocationMasterV5Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationMasterV5Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IFAllocationMasterV5Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationMasterV5Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFAllocationMasterV5Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationMasterV5Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFAllocationMasterV5Session struct {
	Contract     *IFAllocationMasterV5 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IFAllocationMasterV5CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFAllocationMasterV5CallerSession struct {
	Contract *IFAllocationMasterV5Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IFAllocationMasterV5TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFAllocationMasterV5TransactorSession struct {
	Contract     *IFAllocationMasterV5Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IFAllocationMasterV5Raw is an auto generated low-level Go binding around an Ethereum contract.
type IFAllocationMasterV5Raw struct {
	Contract *IFAllocationMasterV5 // Generic contract binding to access the raw methods on
}

// IFAllocationMasterV5CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFAllocationMasterV5CallerRaw struct {
	Contract *IFAllocationMasterV5Caller // Generic read-only contract binding to access the raw methods on
}

// IFAllocationMasterV5TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFAllocationMasterV5TransactorRaw struct {
	Contract *IFAllocationMasterV5Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIFAllocationMasterV5 creates a new instance of IFAllocationMasterV5, bound to a specific deployed contract.
func NewIFAllocationMasterV5(address common.Address, backend bind.ContractBackend) (*IFAllocationMasterV5, error) {
	contract, err := bindIFAllocationMasterV5(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5{IFAllocationMasterV5Caller: IFAllocationMasterV5Caller{contract: contract}, IFAllocationMasterV5Transactor: IFAllocationMasterV5Transactor{contract: contract}, IFAllocationMasterV5Filterer: IFAllocationMasterV5Filterer{contract: contract}}, nil
}

// NewIFAllocationMasterV5Caller creates a new read-only instance of IFAllocationMasterV5, bound to a specific deployed contract.
func NewIFAllocationMasterV5Caller(address common.Address, caller bind.ContractCaller) (*IFAllocationMasterV5Caller, error) {
	contract, err := bindIFAllocationMasterV5(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5Caller{contract: contract}, nil
}

// NewIFAllocationMasterV5Transactor creates a new write-only instance of IFAllocationMasterV5, bound to a specific deployed contract.
func NewIFAllocationMasterV5Transactor(address common.Address, transactor bind.ContractTransactor) (*IFAllocationMasterV5Transactor, error) {
	contract, err := bindIFAllocationMasterV5(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5Transactor{contract: contract}, nil
}

// NewIFAllocationMasterV5Filterer creates a new log filterer instance of IFAllocationMasterV5, bound to a specific deployed contract.
func NewIFAllocationMasterV5Filterer(address common.Address, filterer bind.ContractFilterer) (*IFAllocationMasterV5Filterer, error) {
	contract, err := bindIFAllocationMasterV5(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5Filterer{contract: contract}, nil
}

// bindIFAllocationMasterV5 binds a generic wrapper to an already deployed contract.
func bindIFAllocationMasterV5(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFAllocationMasterV5ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFAllocationMasterV5 *IFAllocationMasterV5Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFAllocationMasterV5.Contract.IFAllocationMasterV5Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFAllocationMasterV5 *IFAllocationMasterV5Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.IFAllocationMasterV5Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFAllocationMasterV5 *IFAllocationMasterV5Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.IFAllocationMasterV5Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFAllocationMasterV5.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.contract.Transact(opts, method, params...)
}

// GetBatchStakeWeightByTrackId is a free data retrieval call binding the contract method 0xad016716.
//
// Solidity: function getBatchStakeWeightByTrackId(uint24 trackId, uint80 timestamp, uint256 start, uint256 count) view returns((address,uint192)[])
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) GetBatchStakeWeightByTrackId(opts *bind.CallOpts, trackId *big.Int, timestamp *big.Int, start *big.Int, count *big.Int) ([]IFAllocationMasterAddressStakeWeight, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "getBatchStakeWeightByTrackId", trackId, timestamp, start, count)

	if err != nil {
		return *new([]IFAllocationMasterAddressStakeWeight), err
	}

	out0 := *abi.ConvertType(out[0], new([]IFAllocationMasterAddressStakeWeight)).(*[]IFAllocationMasterAddressStakeWeight)

	return out0, err

}

// GetBatchStakeWeightByTrackId is a free data retrieval call binding the contract method 0xad016716.
//
// Solidity: function getBatchStakeWeightByTrackId(uint24 trackId, uint80 timestamp, uint256 start, uint256 count) view returns((address,uint192)[])
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) GetBatchStakeWeightByTrackId(trackId *big.Int, timestamp *big.Int, start *big.Int, count *big.Int) ([]IFAllocationMasterAddressStakeWeight, error) {
	return _IFAllocationMasterV5.Contract.GetBatchStakeWeightByTrackId(&_IFAllocationMasterV5.CallOpts, trackId, timestamp, start, count)
}

// GetBatchStakeWeightByTrackId is a free data retrieval call binding the contract method 0xad016716.
//
// Solidity: function getBatchStakeWeightByTrackId(uint24 trackId, uint80 timestamp, uint256 start, uint256 count) view returns((address,uint192)[])
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) GetBatchStakeWeightByTrackId(trackId *big.Int, timestamp *big.Int, start *big.Int, count *big.Int) ([]IFAllocationMasterAddressStakeWeight, error) {
	return _IFAllocationMasterV5.Contract.GetBatchStakeWeightByTrackId(&_IFAllocationMasterV5.CallOpts, trackId, timestamp, start, count)
}

// GetTotalStakeWeight is a free data retrieval call binding the contract method 0x5301f3ad.
//
// Solidity: function getTotalStakeWeight(uint24 trackId, uint80 timestamp) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) GetTotalStakeWeight(opts *bind.CallOpts, trackId *big.Int, timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "getTotalStakeWeight", trackId, timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeWeight is a free data retrieval call binding the contract method 0x5301f3ad.
//
// Solidity: function getTotalStakeWeight(uint24 trackId, uint80 timestamp) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) GetTotalStakeWeight(trackId *big.Int, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.GetTotalStakeWeight(&_IFAllocationMasterV5.CallOpts, trackId, timestamp)
}

// GetTotalStakeWeight is a free data retrieval call binding the contract method 0x5301f3ad.
//
// Solidity: function getTotalStakeWeight(uint24 trackId, uint80 timestamp) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) GetTotalStakeWeight(trackId *big.Int, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.GetTotalStakeWeight(&_IFAllocationMasterV5.CallOpts, trackId, timestamp)
}

// GetUserStakeWeight is a free data retrieval call binding the contract method 0x7db85246.
//
// Solidity: function getUserStakeWeight(uint24 trackId, address user, uint80 timestamp) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) GetUserStakeWeight(opts *bind.CallOpts, trackId *big.Int, user common.Address, timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "getUserStakeWeight", trackId, user, timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserStakeWeight is a free data retrieval call binding the contract method 0x7db85246.
//
// Solidity: function getUserStakeWeight(uint24 trackId, address user, uint80 timestamp) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) GetUserStakeWeight(trackId *big.Int, user common.Address, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.GetUserStakeWeight(&_IFAllocationMasterV5.CallOpts, trackId, user, timestamp)
}

// GetUserStakeWeight is a free data retrieval call binding the contract method 0x7db85246.
//
// Solidity: function getUserStakeWeight(uint24 trackId, address user, uint80 timestamp) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) GetUserStakeWeight(trackId *big.Int, user common.Address, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.GetUserStakeWeight(&_IFAllocationMasterV5.CallOpts, trackId, user, timestamp)
}

// HasEmergencyWithdrawn is a free data retrieval call binding the contract method 0x1ee93a3a.
//
// Solidity: function hasEmergencyWithdrawn(uint24 , address ) view returns(bool)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) HasEmergencyWithdrawn(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "hasEmergencyWithdrawn", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEmergencyWithdrawn is a free data retrieval call binding the contract method 0x1ee93a3a.
//
// Solidity: function hasEmergencyWithdrawn(uint24 , address ) view returns(bool)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) HasEmergencyWithdrawn(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _IFAllocationMasterV5.Contract.HasEmergencyWithdrawn(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// HasEmergencyWithdrawn is a free data retrieval call binding the contract method 0x1ee93a3a.
//
// Solidity: function hasEmergencyWithdrawn(uint24 , address ) view returns(bool)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) HasEmergencyWithdrawn(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _IFAllocationMasterV5.Contract.HasEmergencyWithdrawn(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) MessageBus() (common.Address, error) {
	return _IFAllocationMasterV5.Contract.MessageBus(&_IFAllocationMasterV5.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) MessageBus() (common.Address, error) {
	return _IFAllocationMasterV5.Contract.MessageBus(&_IFAllocationMasterV5.CallOpts)
}

// NumTrackStakers is a free data retrieval call binding the contract method 0x0ee4d197.
//
// Solidity: function numTrackStakers(uint24 ) view returns(uint256)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) NumTrackStakers(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "numTrackStakers", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTrackStakers is a free data retrieval call binding the contract method 0x0ee4d197.
//
// Solidity: function numTrackStakers(uint24 ) view returns(uint256)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) NumTrackStakers(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.NumTrackStakers(&_IFAllocationMasterV5.CallOpts, arg0)
}

// NumTrackStakers is a free data retrieval call binding the contract method 0x0ee4d197.
//
// Solidity: function numTrackStakers(uint24 ) view returns(uint256)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) NumTrackStakers(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.NumTrackStakers(&_IFAllocationMasterV5.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) Owner() (common.Address, error) {
	return _IFAllocationMasterV5.Contract.Owner(&_IFAllocationMasterV5.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) Owner() (common.Address, error) {
	return _IFAllocationMasterV5.Contract.Owner(&_IFAllocationMasterV5.CallOpts)
}

// TrackActiveRollOvers is a free data retrieval call binding the contract method 0x83e64d94.
//
// Solidity: function trackActiveRollOvers(uint24 , address , uint24 ) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackActiveRollOvers(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackActiveRollOvers", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackActiveRollOvers is a free data retrieval call binding the contract method 0x83e64d94.
//
// Solidity: function trackActiveRollOvers(uint24 , address , uint24 ) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackActiveRollOvers(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackActiveRollOvers(&_IFAllocationMasterV5.CallOpts, arg0, arg1, arg2)
}

// TrackActiveRollOvers is a free data retrieval call binding the contract method 0x83e64d94.
//
// Solidity: function trackActiveRollOvers(uint24 , address , uint24 ) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackActiveRollOvers(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackActiveRollOvers(&_IFAllocationMasterV5.CallOpts, arg0, arg1, arg2)
}

// TrackCheckpointCounts is a free data retrieval call binding the contract method 0x7e14a790.
//
// Solidity: function trackCheckpointCounts(uint24 ) view returns(uint32)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackCheckpointCounts(opts *bind.CallOpts, arg0 *big.Int) (uint32, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackCheckpointCounts", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TrackCheckpointCounts is a free data retrieval call binding the contract method 0x7e14a790.
//
// Solidity: function trackCheckpointCounts(uint24 ) view returns(uint32)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackCheckpointCounts(arg0 *big.Int) (uint32, error) {
	return _IFAllocationMasterV5.Contract.TrackCheckpointCounts(&_IFAllocationMasterV5.CallOpts, arg0)
}

// TrackCheckpointCounts is a free data retrieval call binding the contract method 0x7e14a790.
//
// Solidity: function trackCheckpointCounts(uint24 ) view returns(uint32)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackCheckpointCounts(arg0 *big.Int) (uint32, error) {
	return _IFAllocationMasterV5.Contract.TrackCheckpointCounts(&_IFAllocationMasterV5.CallOpts, arg0)
}

// TrackCheckpoints is a free data retrieval call binding the contract method 0xfe9d4747.
//
// Solidity: function trackCheckpoints(uint24 , uint32 ) view returns(uint80 timestamp, uint104 totalStaked, uint192 totalStakeWeight, uint24 numFinishedSales)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackCheckpoints(opts *bind.CallOpts, arg0 *big.Int, arg1 uint32) (struct {
	Timestamp        *big.Int
	TotalStaked      *big.Int
	TotalStakeWeight *big.Int
	NumFinishedSales *big.Int
}, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackCheckpoints", arg0, arg1)

	outstruct := new(struct {
		Timestamp        *big.Int
		TotalStaked      *big.Int
		TotalStakeWeight *big.Int
		NumFinishedSales *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TotalStaked = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalStakeWeight = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.NumFinishedSales = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TrackCheckpoints is a free data retrieval call binding the contract method 0xfe9d4747.
//
// Solidity: function trackCheckpoints(uint24 , uint32 ) view returns(uint80 timestamp, uint104 totalStaked, uint192 totalStakeWeight, uint24 numFinishedSales)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackCheckpoints(arg0 *big.Int, arg1 uint32) (struct {
	Timestamp        *big.Int
	TotalStaked      *big.Int
	TotalStakeWeight *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMasterV5.Contract.TrackCheckpoints(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// TrackCheckpoints is a free data retrieval call binding the contract method 0xfe9d4747.
//
// Solidity: function trackCheckpoints(uint24 , uint32 ) view returns(uint80 timestamp, uint104 totalStaked, uint192 totalStakeWeight, uint24 numFinishedSales)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackCheckpoints(arg0 *big.Int, arg1 uint32) (struct {
	Timestamp        *big.Int
	TotalStaked      *big.Int
	TotalStakeWeight *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMasterV5.Contract.TrackCheckpoints(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// TrackCount is a free data retrieval call binding the contract method 0xab35678c.
//
// Solidity: function trackCount() view returns(uint24)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackCount is a free data retrieval call binding the contract method 0xab35678c.
//
// Solidity: function trackCount() view returns(uint24)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackCount() (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackCount(&_IFAllocationMasterV5.CallOpts)
}

// TrackCount is a free data retrieval call binding the contract method 0xab35678c.
//
// Solidity: function trackCount() view returns(uint24)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackCount() (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackCount(&_IFAllocationMasterV5.CallOpts)
}

// TrackDisabled is a free data retrieval call binding the contract method 0xd4799a06.
//
// Solidity: function trackDisabled(uint24 ) view returns(bool)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackDisabled(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackDisabled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TrackDisabled is a free data retrieval call binding the contract method 0xd4799a06.
//
// Solidity: function trackDisabled(uint24 ) view returns(bool)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackDisabled(arg0 *big.Int) (bool, error) {
	return _IFAllocationMasterV5.Contract.TrackDisabled(&_IFAllocationMasterV5.CallOpts, arg0)
}

// TrackDisabled is a free data retrieval call binding the contract method 0xd4799a06.
//
// Solidity: function trackDisabled(uint24 ) view returns(bool)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackDisabled(arg0 *big.Int) (bool, error) {
	return _IFAllocationMasterV5.Contract.TrackDisabled(&_IFAllocationMasterV5.CallOpts, arg0)
}

// TrackFinishedSaleTimestamps is a free data retrieval call binding the contract method 0x00c40584.
//
// Solidity: function trackFinishedSaleTimestamps(uint24 , uint24 ) view returns(uint80)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackFinishedSaleTimestamps(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackFinishedSaleTimestamps", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackFinishedSaleTimestamps is a free data retrieval call binding the contract method 0x00c40584.
//
// Solidity: function trackFinishedSaleTimestamps(uint24 , uint24 ) view returns(uint80)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackFinishedSaleTimestamps(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackFinishedSaleTimestamps(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// TrackFinishedSaleTimestamps is a free data retrieval call binding the contract method 0x00c40584.
//
// Solidity: function trackFinishedSaleTimestamps(uint24 , uint24 ) view returns(uint80)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackFinishedSaleTimestamps(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackFinishedSaleTimestamps(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// TrackMaxStakes is a free data retrieval call binding the contract method 0x3fceccbe.
//
// Solidity: function trackMaxStakes(uint24 ) view returns(uint104)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackMaxStakes(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackMaxStakes", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackMaxStakes is a free data retrieval call binding the contract method 0x3fceccbe.
//
// Solidity: function trackMaxStakes(uint24 ) view returns(uint104)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackMaxStakes(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackMaxStakes(&_IFAllocationMasterV5.CallOpts, arg0)
}

// TrackMaxStakes is a free data retrieval call binding the contract method 0x3fceccbe.
//
// Solidity: function trackMaxStakes(uint24 ) view returns(uint104)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackMaxStakes(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackMaxStakes(&_IFAllocationMasterV5.CallOpts, arg0)
}

// TrackStakers is a free data retrieval call binding the contract method 0x92721276.
//
// Solidity: function trackStakers(uint24 , uint256 ) view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackStakers(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackStakers", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrackStakers is a free data retrieval call binding the contract method 0x92721276.
//
// Solidity: function trackStakers(uint24 , uint256 ) view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackStakers(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IFAllocationMasterV5.Contract.TrackStakers(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// TrackStakers is a free data retrieval call binding the contract method 0x92721276.
//
// Solidity: function trackStakers(uint24 , uint256 ) view returns(address)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackStakers(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IFAllocationMasterV5.Contract.TrackStakers(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// TrackTotalActiveRollOvers is a free data retrieval call binding the contract method 0xb33f517a.
//
// Solidity: function trackTotalActiveRollOvers(uint24 , uint24 ) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) TrackTotalActiveRollOvers(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "trackTotalActiveRollOvers", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackTotalActiveRollOvers is a free data retrieval call binding the contract method 0xb33f517a.
//
// Solidity: function trackTotalActiveRollOvers(uint24 , uint24 ) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TrackTotalActiveRollOvers(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackTotalActiveRollOvers(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// TrackTotalActiveRollOvers is a free data retrieval call binding the contract method 0xb33f517a.
//
// Solidity: function trackTotalActiveRollOvers(uint24 , uint24 ) view returns(uint192)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) TrackTotalActiveRollOvers(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMasterV5.Contract.TrackTotalActiveRollOvers(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// Tracks is a free data retrieval call binding the contract method 0xa2e34586.
//
// Solidity: function tracks(uint256 ) view returns(string name, address stakeToken, uint24 weightAccrualRate, uint64 passiveRolloverRate, uint64 activeRolloverRate, uint104 maxTotalStake)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) Tracks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name                string
	StakeToken          common.Address
	WeightAccrualRate   *big.Int
	PassiveRolloverRate uint64
	ActiveRolloverRate  uint64
	MaxTotalStake       *big.Int
}, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "tracks", arg0)

	outstruct := new(struct {
		Name                string
		StakeToken          common.Address
		WeightAccrualRate   *big.Int
		PassiveRolloverRate uint64
		ActiveRolloverRate  uint64
		MaxTotalStake       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.StakeToken = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.WeightAccrualRate = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PassiveRolloverRate = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.ActiveRolloverRate = *abi.ConvertType(out[4], new(uint64)).(*uint64)
	outstruct.MaxTotalStake = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Tracks is a free data retrieval call binding the contract method 0xa2e34586.
//
// Solidity: function tracks(uint256 ) view returns(string name, address stakeToken, uint24 weightAccrualRate, uint64 passiveRolloverRate, uint64 activeRolloverRate, uint104 maxTotalStake)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) Tracks(arg0 *big.Int) (struct {
	Name                string
	StakeToken          common.Address
	WeightAccrualRate   *big.Int
	PassiveRolloverRate uint64
	ActiveRolloverRate  uint64
	MaxTotalStake       *big.Int
}, error) {
	return _IFAllocationMasterV5.Contract.Tracks(&_IFAllocationMasterV5.CallOpts, arg0)
}

// Tracks is a free data retrieval call binding the contract method 0xa2e34586.
//
// Solidity: function tracks(uint256 ) view returns(string name, address stakeToken, uint24 weightAccrualRate, uint64 passiveRolloverRate, uint64 activeRolloverRate, uint104 maxTotalStake)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) Tracks(arg0 *big.Int) (struct {
	Name                string
	StakeToken          common.Address
	WeightAccrualRate   *big.Int
	PassiveRolloverRate uint64
	ActiveRolloverRate  uint64
	MaxTotalStake       *big.Int
}, error) {
	return _IFAllocationMasterV5.Contract.Tracks(&_IFAllocationMasterV5.CallOpts, arg0)
}

// UserCheckpointCounts is a free data retrieval call binding the contract method 0x2f385bcb.
//
// Solidity: function userCheckpointCounts(uint24 , address ) view returns(uint32)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) UserCheckpointCounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (uint32, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "userCheckpointCounts", arg0, arg1)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// UserCheckpointCounts is a free data retrieval call binding the contract method 0x2f385bcb.
//
// Solidity: function userCheckpointCounts(uint24 , address ) view returns(uint32)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) UserCheckpointCounts(arg0 *big.Int, arg1 common.Address) (uint32, error) {
	return _IFAllocationMasterV5.Contract.UserCheckpointCounts(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// UserCheckpointCounts is a free data retrieval call binding the contract method 0x2f385bcb.
//
// Solidity: function userCheckpointCounts(uint24 , address ) view returns(uint32)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) UserCheckpointCounts(arg0 *big.Int, arg1 common.Address) (uint32, error) {
	return _IFAllocationMasterV5.Contract.UserCheckpointCounts(&_IFAllocationMasterV5.CallOpts, arg0, arg1)
}

// UserCheckpoints is a free data retrieval call binding the contract method 0x25cab7f9.
//
// Solidity: function userCheckpoints(uint24 , address , uint32 ) view returns(uint80 timestamp, uint104 staked, uint192 stakeWeight, uint24 numFinishedSales)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Caller) UserCheckpoints(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 uint32) (struct {
	Timestamp        *big.Int
	Staked           *big.Int
	StakeWeight      *big.Int
	NumFinishedSales *big.Int
}, error) {
	var out []interface{}
	err := _IFAllocationMasterV5.contract.Call(opts, &out, "userCheckpoints", arg0, arg1, arg2)

	outstruct := new(struct {
		Timestamp        *big.Int
		Staked           *big.Int
		StakeWeight      *big.Int
		NumFinishedSales *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Staked = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.StakeWeight = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.NumFinishedSales = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserCheckpoints is a free data retrieval call binding the contract method 0x25cab7f9.
//
// Solidity: function userCheckpoints(uint24 , address , uint32 ) view returns(uint80 timestamp, uint104 staked, uint192 stakeWeight, uint24 numFinishedSales)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) UserCheckpoints(arg0 *big.Int, arg1 common.Address, arg2 uint32) (struct {
	Timestamp        *big.Int
	Staked           *big.Int
	StakeWeight      *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMasterV5.Contract.UserCheckpoints(&_IFAllocationMasterV5.CallOpts, arg0, arg1, arg2)
}

// UserCheckpoints is a free data retrieval call binding the contract method 0x25cab7f9.
//
// Solidity: function userCheckpoints(uint24 , address , uint32 ) view returns(uint80 timestamp, uint104 staked, uint192 stakeWeight, uint24 numFinishedSales)
func (_IFAllocationMasterV5 *IFAllocationMasterV5CallerSession) UserCheckpoints(arg0 *big.Int, arg1 common.Address, arg2 uint32) (struct {
	Timestamp        *big.Int
	Staked           *big.Int
	StakeWeight      *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMasterV5.Contract.UserCheckpoints(&_IFAllocationMasterV5.CallOpts, arg0, arg1, arg2)
}

// ActiveRollOver is a paid mutator transaction binding the contract method 0x85e94209.
//
// Solidity: function activeRollOver(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) ActiveRollOver(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "activeRollOver", trackId)
}

// ActiveRollOver is a paid mutator transaction binding the contract method 0x85e94209.
//
// Solidity: function activeRollOver(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) ActiveRollOver(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.ActiveRollOver(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// ActiveRollOver is a paid mutator transaction binding the contract method 0x85e94209.
//
// Solidity: function activeRollOver(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) ActiveRollOver(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.ActiveRollOver(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// AddTrack is a paid mutator transaction binding the contract method 0x26df01e4.
//
// Solidity: function addTrack(string name, address stakeToken, uint24 _weightAccrualRate, uint64 _passiveRolloverRate, uint64 _activeRolloverRate, uint104 _maxTotalStake) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) AddTrack(opts *bind.TransactOpts, name string, stakeToken common.Address, _weightAccrualRate *big.Int, _passiveRolloverRate uint64, _activeRolloverRate uint64, _maxTotalStake *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "addTrack", name, stakeToken, _weightAccrualRate, _passiveRolloverRate, _activeRolloverRate, _maxTotalStake)
}

// AddTrack is a paid mutator transaction binding the contract method 0x26df01e4.
//
// Solidity: function addTrack(string name, address stakeToken, uint24 _weightAccrualRate, uint64 _passiveRolloverRate, uint64 _activeRolloverRate, uint104 _maxTotalStake) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) AddTrack(name string, stakeToken common.Address, _weightAccrualRate *big.Int, _passiveRolloverRate uint64, _activeRolloverRate uint64, _maxTotalStake *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.AddTrack(&_IFAllocationMasterV5.TransactOpts, name, stakeToken, _weightAccrualRate, _passiveRolloverRate, _activeRolloverRate, _maxTotalStake)
}

// AddTrack is a paid mutator transaction binding the contract method 0x26df01e4.
//
// Solidity: function addTrack(string name, address stakeToken, uint24 _weightAccrualRate, uint64 _passiveRolloverRate, uint64 _activeRolloverRate, uint104 _maxTotalStake) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) AddTrack(name string, stakeToken common.Address, _weightAccrualRate *big.Int, _passiveRolloverRate uint64, _activeRolloverRate uint64, _maxTotalStake *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.AddTrack(&_IFAllocationMasterV5.TransactOpts, name, stakeToken, _weightAccrualRate, _passiveRolloverRate, _activeRolloverRate, _maxTotalStake)
}

// BumpSaleCounter is a paid mutator transaction binding the contract method 0xec331ee8.
//
// Solidity: function bumpSaleCounter(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) BumpSaleCounter(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "bumpSaleCounter", trackId)
}

// BumpSaleCounter is a paid mutator transaction binding the contract method 0xec331ee8.
//
// Solidity: function bumpSaleCounter(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) BumpSaleCounter(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.BumpSaleCounter(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// BumpSaleCounter is a paid mutator transaction binding the contract method 0xec331ee8.
//
// Solidity: function bumpSaleCounter(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) BumpSaleCounter(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.BumpSaleCounter(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// DisableTrack is a paid mutator transaction binding the contract method 0x0a29ffd9.
//
// Solidity: function disableTrack(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) DisableTrack(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "disableTrack", trackId)
}

// DisableTrack is a paid mutator transaction binding the contract method 0x0a29ffd9.
//
// Solidity: function disableTrack(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) DisableTrack(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.DisableTrack(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// DisableTrack is a paid mutator transaction binding the contract method 0x0a29ffd9.
//
// Solidity: function disableTrack(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) DisableTrack(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.DisableTrack(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xdea47071.
//
// Solidity: function emergencyWithdraw(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) EmergencyWithdraw(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "emergencyWithdraw", trackId)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xdea47071.
//
// Solidity: function emergencyWithdraw(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) EmergencyWithdraw(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.EmergencyWithdraw(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xdea47071.
//
// Solidity: function emergencyWithdraw(uint24 trackId) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) EmergencyWithdraw(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.EmergencyWithdraw(&_IFAllocationMasterV5.TransactOpts, trackId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) RenounceOwnership() (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.RenounceOwnership(&_IFAllocationMasterV5.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.RenounceOwnership(&_IFAllocationMasterV5.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0x770c5c12.
//
// Solidity: function stake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) Stake(opts *bind.TransactOpts, trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "stake", trackId, amount)
}

// Stake is a paid mutator transaction binding the contract method 0x770c5c12.
//
// Solidity: function stake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) Stake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.Stake(&_IFAllocationMasterV5.TransactOpts, trackId, amount)
}

// Stake is a paid mutator transaction binding the contract method 0x770c5c12.
//
// Solidity: function stake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) Stake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.Stake(&_IFAllocationMasterV5.TransactOpts, trackId, amount)
}

// SyncTotalWeight is a paid mutator transaction binding the contract method 0x185242b0.
//
// Solidity: function syncTotalWeight(address receiver, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) SyncTotalWeight(opts *bind.TransactOpts, receiver common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "syncTotalWeight", receiver, trackId, timestamp, dstChainId)
}

// SyncTotalWeight is a paid mutator transaction binding the contract method 0x185242b0.
//
// Solidity: function syncTotalWeight(address receiver, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) SyncTotalWeight(receiver common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.SyncTotalWeight(&_IFAllocationMasterV5.TransactOpts, receiver, trackId, timestamp, dstChainId)
}

// SyncTotalWeight is a paid mutator transaction binding the contract method 0x185242b0.
//
// Solidity: function syncTotalWeight(address receiver, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) SyncTotalWeight(receiver common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.SyncTotalWeight(&_IFAllocationMasterV5.TransactOpts, receiver, trackId, timestamp, dstChainId)
}

// SyncUserWeight is a paid mutator transaction binding the contract method 0x2f4fe782.
//
// Solidity: function syncUserWeight(address receiver, address[] users, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) SyncUserWeight(opts *bind.TransactOpts, receiver common.Address, users []common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "syncUserWeight", receiver, users, trackId, timestamp, dstChainId)
}

// SyncUserWeight is a paid mutator transaction binding the contract method 0x2f4fe782.
//
// Solidity: function syncUserWeight(address receiver, address[] users, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) SyncUserWeight(receiver common.Address, users []common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.SyncUserWeight(&_IFAllocationMasterV5.TransactOpts, receiver, users, trackId, timestamp, dstChainId)
}

// SyncUserWeight is a paid mutator transaction binding the contract method 0x2f4fe782.
//
// Solidity: function syncUserWeight(address receiver, address[] users, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) SyncUserWeight(receiver common.Address, users []common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.SyncUserWeight(&_IFAllocationMasterV5.TransactOpts, receiver, users, trackId, timestamp, dstChainId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.TransferOwnership(&_IFAllocationMasterV5.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.TransferOwnership(&_IFAllocationMasterV5.TransactOpts, newOwner)
}

// Unstake is a paid mutator transaction binding the contract method 0xcbc50245.
//
// Solidity: function unstake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Transactor) Unstake(opts *bind.TransactOpts, trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.contract.Transact(opts, "unstake", trackId, amount)
}

// Unstake is a paid mutator transaction binding the contract method 0xcbc50245.
//
// Solidity: function unstake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5Session) Unstake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.Unstake(&_IFAllocationMasterV5.TransactOpts, trackId, amount)
}

// Unstake is a paid mutator transaction binding the contract method 0xcbc50245.
//
// Solidity: function unstake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMasterV5 *IFAllocationMasterV5TransactorSession) Unstake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMasterV5.Contract.Unstake(&_IFAllocationMasterV5.TransactOpts, trackId, amount)
}

// IFAllocationMasterV5ActiveRollOverIterator is returned from FilterActiveRollOver and is used to iterate over the raw logs and unpacked data for ActiveRollOver events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5ActiveRollOverIterator struct {
	Event *IFAllocationMasterV5ActiveRollOver // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5ActiveRollOverIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5ActiveRollOver)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5ActiveRollOver)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5ActiveRollOverIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5ActiveRollOverIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5ActiveRollOver represents a ActiveRollOver event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5ActiveRollOver struct {
	TrackId *big.Int
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterActiveRollOver is a free log retrieval operation binding the contract event 0x2ad99c2ef3fb067831abd0a8620f3b2ddda1e7be89576a286edea06e048cf3dc.
//
// Solidity: event ActiveRollOver(uint24 indexed trackId, address indexed user)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterActiveRollOver(opts *bind.FilterOpts, trackId []*big.Int, user []common.Address) (*IFAllocationMasterV5ActiveRollOverIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "ActiveRollOver", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5ActiveRollOverIterator{contract: _IFAllocationMasterV5.contract, event: "ActiveRollOver", logs: logs, sub: sub}, nil
}

// WatchActiveRollOver is a free log subscription operation binding the contract event 0x2ad99c2ef3fb067831abd0a8620f3b2ddda1e7be89576a286edea06e048cf3dc.
//
// Solidity: event ActiveRollOver(uint24 indexed trackId, address indexed user)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchActiveRollOver(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5ActiveRollOver, trackId []*big.Int, user []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "ActiveRollOver", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5ActiveRollOver)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "ActiveRollOver", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActiveRollOver is a log parse operation binding the contract event 0x2ad99c2ef3fb067831abd0a8620f3b2ddda1e7be89576a286edea06e048cf3dc.
//
// Solidity: event ActiveRollOver(uint24 indexed trackId, address indexed user)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseActiveRollOver(log types.Log) (*IFAllocationMasterV5ActiveRollOver, error) {
	event := new(IFAllocationMasterV5ActiveRollOver)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "ActiveRollOver", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5AddTrackIterator is returned from FilterAddTrack and is used to iterate over the raw logs and unpacked data for AddTrack events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5AddTrackIterator struct {
	Event *IFAllocationMasterV5AddTrack // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5AddTrackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5AddTrack)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5AddTrack)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5AddTrackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5AddTrackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5AddTrack represents a AddTrack event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5AddTrack struct {
	Name  common.Hash
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddTrack is a free log retrieval operation binding the contract event 0x1e50e9757b681e9008a480e25488ddd40b47b5295b68ae5f6d9c7204377e5b3b.
//
// Solidity: event AddTrack(string indexed name, address indexed token)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterAddTrack(opts *bind.FilterOpts, name []string, token []common.Address) (*IFAllocationMasterV5AddTrackIterator, error) {

	var nameRule []interface{}
	for _, nameItem := range name {
		nameRule = append(nameRule, nameItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "AddTrack", nameRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5AddTrackIterator{contract: _IFAllocationMasterV5.contract, event: "AddTrack", logs: logs, sub: sub}, nil
}

// WatchAddTrack is a free log subscription operation binding the contract event 0x1e50e9757b681e9008a480e25488ddd40b47b5295b68ae5f6d9c7204377e5b3b.
//
// Solidity: event AddTrack(string indexed name, address indexed token)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchAddTrack(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5AddTrack, name []string, token []common.Address) (event.Subscription, error) {

	var nameRule []interface{}
	for _, nameItem := range name {
		nameRule = append(nameRule, nameItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "AddTrack", nameRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5AddTrack)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "AddTrack", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddTrack is a log parse operation binding the contract event 0x1e50e9757b681e9008a480e25488ddd40b47b5295b68ae5f6d9c7204377e5b3b.
//
// Solidity: event AddTrack(string indexed name, address indexed token)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseAddTrack(log types.Log) (*IFAllocationMasterV5AddTrack, error) {
	event := new(IFAllocationMasterV5AddTrack)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "AddTrack", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5AddTrackCheckpointIterator is returned from FilterAddTrackCheckpoint and is used to iterate over the raw logs and unpacked data for AddTrackCheckpoint events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5AddTrackCheckpointIterator struct {
	Event *IFAllocationMasterV5AddTrackCheckpoint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5AddTrackCheckpointIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5AddTrackCheckpoint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5AddTrackCheckpoint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5AddTrackCheckpointIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5AddTrackCheckpointIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5AddTrackCheckpoint represents a AddTrackCheckpoint event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5AddTrackCheckpoint struct {
	TrackId   *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddTrackCheckpoint is a free log retrieval operation binding the contract event 0xbae21b9ce1f492a8affaa603b56fe9c921dceb290c3a3c11815c26b6e6e67fc3.
//
// Solidity: event AddTrackCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterAddTrackCheckpoint(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterV5AddTrackCheckpointIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "AddTrackCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5AddTrackCheckpointIterator{contract: _IFAllocationMasterV5.contract, event: "AddTrackCheckpoint", logs: logs, sub: sub}, nil
}

// WatchAddTrackCheckpoint is a free log subscription operation binding the contract event 0xbae21b9ce1f492a8affaa603b56fe9c921dceb290c3a3c11815c26b6e6e67fc3.
//
// Solidity: event AddTrackCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchAddTrackCheckpoint(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5AddTrackCheckpoint, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "AddTrackCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5AddTrackCheckpoint)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "AddTrackCheckpoint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddTrackCheckpoint is a log parse operation binding the contract event 0xbae21b9ce1f492a8affaa603b56fe9c921dceb290c3a3c11815c26b6e6e67fc3.
//
// Solidity: event AddTrackCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseAddTrackCheckpoint(log types.Log) (*IFAllocationMasterV5AddTrackCheckpoint, error) {
	event := new(IFAllocationMasterV5AddTrackCheckpoint)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "AddTrackCheckpoint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5AddUserCheckpointIterator is returned from FilterAddUserCheckpoint and is used to iterate over the raw logs and unpacked data for AddUserCheckpoint events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5AddUserCheckpointIterator struct {
	Event *IFAllocationMasterV5AddUserCheckpoint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5AddUserCheckpointIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5AddUserCheckpoint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5AddUserCheckpoint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5AddUserCheckpointIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5AddUserCheckpointIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5AddUserCheckpoint represents a AddUserCheckpoint event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5AddUserCheckpoint struct {
	TrackId   *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddUserCheckpoint is a free log retrieval operation binding the contract event 0x452e6119384e406a318edbd63efae9316d44abef87b7b0d4a557e935b0d7f2e5.
//
// Solidity: event AddUserCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterAddUserCheckpoint(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterV5AddUserCheckpointIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "AddUserCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5AddUserCheckpointIterator{contract: _IFAllocationMasterV5.contract, event: "AddUserCheckpoint", logs: logs, sub: sub}, nil
}

// WatchAddUserCheckpoint is a free log subscription operation binding the contract event 0x452e6119384e406a318edbd63efae9316d44abef87b7b0d4a557e935b0d7f2e5.
//
// Solidity: event AddUserCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchAddUserCheckpoint(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5AddUserCheckpoint, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "AddUserCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5AddUserCheckpoint)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "AddUserCheckpoint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddUserCheckpoint is a log parse operation binding the contract event 0x452e6119384e406a318edbd63efae9316d44abef87b7b0d4a557e935b0d7f2e5.
//
// Solidity: event AddUserCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseAddUserCheckpoint(log types.Log) (*IFAllocationMasterV5AddUserCheckpoint, error) {
	event := new(IFAllocationMasterV5AddUserCheckpoint)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "AddUserCheckpoint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5BumpSaleCounterIterator is returned from FilterBumpSaleCounter and is used to iterate over the raw logs and unpacked data for BumpSaleCounter events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5BumpSaleCounterIterator struct {
	Event *IFAllocationMasterV5BumpSaleCounter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5BumpSaleCounterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5BumpSaleCounter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5BumpSaleCounter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5BumpSaleCounterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5BumpSaleCounterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5BumpSaleCounter represents a BumpSaleCounter event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5BumpSaleCounter struct {
	TrackId  *big.Int
	NewCount uint32
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBumpSaleCounter is a free log retrieval operation binding the contract event 0xcd058f3f37dac45b4ea419da18091e06ea38756c9996298ca517599007e777c4.
//
// Solidity: event BumpSaleCounter(uint24 indexed trackId, uint32 newCount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterBumpSaleCounter(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterV5BumpSaleCounterIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "BumpSaleCounter", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5BumpSaleCounterIterator{contract: _IFAllocationMasterV5.contract, event: "BumpSaleCounter", logs: logs, sub: sub}, nil
}

// WatchBumpSaleCounter is a free log subscription operation binding the contract event 0xcd058f3f37dac45b4ea419da18091e06ea38756c9996298ca517599007e777c4.
//
// Solidity: event BumpSaleCounter(uint24 indexed trackId, uint32 newCount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchBumpSaleCounter(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5BumpSaleCounter, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "BumpSaleCounter", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5BumpSaleCounter)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "BumpSaleCounter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBumpSaleCounter is a log parse operation binding the contract event 0xcd058f3f37dac45b4ea419da18091e06ea38756c9996298ca517599007e777c4.
//
// Solidity: event BumpSaleCounter(uint24 indexed trackId, uint32 newCount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseBumpSaleCounter(log types.Log) (*IFAllocationMasterV5BumpSaleCounter, error) {
	event := new(IFAllocationMasterV5BumpSaleCounter)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "BumpSaleCounter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5DisableTrackIterator is returned from FilterDisableTrack and is used to iterate over the raw logs and unpacked data for DisableTrack events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5DisableTrackIterator struct {
	Event *IFAllocationMasterV5DisableTrack // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5DisableTrackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5DisableTrack)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5DisableTrack)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5DisableTrackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5DisableTrackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5DisableTrack represents a DisableTrack event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5DisableTrack struct {
	TrackId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDisableTrack is a free log retrieval operation binding the contract event 0xcb27b9acd764424cf6cdaa672c3a35243af86cbf4ecb53ad48a9212610e5781b.
//
// Solidity: event DisableTrack(uint24 indexed trackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterDisableTrack(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterV5DisableTrackIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "DisableTrack", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5DisableTrackIterator{contract: _IFAllocationMasterV5.contract, event: "DisableTrack", logs: logs, sub: sub}, nil
}

// WatchDisableTrack is a free log subscription operation binding the contract event 0xcb27b9acd764424cf6cdaa672c3a35243af86cbf4ecb53ad48a9212610e5781b.
//
// Solidity: event DisableTrack(uint24 indexed trackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchDisableTrack(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5DisableTrack, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "DisableTrack", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5DisableTrack)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "DisableTrack", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisableTrack is a log parse operation binding the contract event 0xcb27b9acd764424cf6cdaa672c3a35243af86cbf4ecb53ad48a9212610e5781b.
//
// Solidity: event DisableTrack(uint24 indexed trackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseDisableTrack(log types.Log) (*IFAllocationMasterV5DisableTrack, error) {
	event := new(IFAllocationMasterV5DisableTrack)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "DisableTrack", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5EmergencyWithdrawIterator is returned from FilterEmergencyWithdraw and is used to iterate over the raw logs and unpacked data for EmergencyWithdraw events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5EmergencyWithdrawIterator struct {
	Event *IFAllocationMasterV5EmergencyWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5EmergencyWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5EmergencyWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5EmergencyWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5EmergencyWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5EmergencyWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5EmergencyWithdraw represents a EmergencyWithdraw event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5EmergencyWithdraw struct {
	TrackId *big.Int
	Sender  common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterEmergencyWithdraw is a free log retrieval operation binding the contract event 0xf427794f261016177479dd3be6bcc4f1dfbf441739b329c9f29c0046002ade0d.
//
// Solidity: event EmergencyWithdraw(uint24 indexed trackId, address indexed sender, uint256 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterEmergencyWithdraw(opts *bind.FilterOpts, trackId []*big.Int, sender []common.Address) (*IFAllocationMasterV5EmergencyWithdrawIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "EmergencyWithdraw", trackIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5EmergencyWithdrawIterator{contract: _IFAllocationMasterV5.contract, event: "EmergencyWithdraw", logs: logs, sub: sub}, nil
}

// WatchEmergencyWithdraw is a free log subscription operation binding the contract event 0xf427794f261016177479dd3be6bcc4f1dfbf441739b329c9f29c0046002ade0d.
//
// Solidity: event EmergencyWithdraw(uint24 indexed trackId, address indexed sender, uint256 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchEmergencyWithdraw(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5EmergencyWithdraw, trackId []*big.Int, sender []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "EmergencyWithdraw", trackIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5EmergencyWithdraw)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "EmergencyWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyWithdraw is a log parse operation binding the contract event 0xf427794f261016177479dd3be6bcc4f1dfbf441739b329c9f29c0046002ade0d.
//
// Solidity: event EmergencyWithdraw(uint24 indexed trackId, address indexed sender, uint256 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseEmergencyWithdraw(log types.Log) (*IFAllocationMasterV5EmergencyWithdraw, error) {
	event := new(IFAllocationMasterV5EmergencyWithdraw)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "EmergencyWithdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5OwnershipTransferredIterator struct {
	Event *IFAllocationMasterV5OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5OwnershipTransferred represents a OwnershipTransferred event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IFAllocationMasterV5OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5OwnershipTransferredIterator{contract: _IFAllocationMasterV5.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5OwnershipTransferred)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseOwnershipTransferred(log types.Log) (*IFAllocationMasterV5OwnershipTransferred, error) {
	event := new(IFAllocationMasterV5OwnershipTransferred)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5StakeIterator is returned from FilterStake and is used to iterate over the raw logs and unpacked data for Stake events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5StakeIterator struct {
	Event *IFAllocationMasterV5Stake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5StakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5Stake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5Stake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5StakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5StakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5Stake represents a Stake event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5Stake struct {
	TrackId *big.Int
	User    common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStake is a free log retrieval operation binding the contract event 0xc7de557a4862000809abc99c50fd0b30c35beb37a010dae4335462b336827fd3.
//
// Solidity: event Stake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterStake(opts *bind.FilterOpts, trackId []*big.Int, user []common.Address) (*IFAllocationMasterV5StakeIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "Stake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5StakeIterator{contract: _IFAllocationMasterV5.contract, event: "Stake", logs: logs, sub: sub}, nil
}

// WatchStake is a free log subscription operation binding the contract event 0xc7de557a4862000809abc99c50fd0b30c35beb37a010dae4335462b336827fd3.
//
// Solidity: event Stake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchStake(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5Stake, trackId []*big.Int, user []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "Stake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5Stake)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "Stake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStake is a log parse operation binding the contract event 0xc7de557a4862000809abc99c50fd0b30c35beb37a010dae4335462b336827fd3.
//
// Solidity: event Stake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseStake(log types.Log) (*IFAllocationMasterV5Stake, error) {
	event := new(IFAllocationMasterV5Stake)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "Stake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5SyncTotalWeightIterator is returned from FilterSyncTotalWeight and is used to iterate over the raw logs and unpacked data for SyncTotalWeight events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5SyncTotalWeightIterator struct {
	Event *IFAllocationMasterV5SyncTotalWeight // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5SyncTotalWeightIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5SyncTotalWeight)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5SyncTotalWeight)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5SyncTotalWeightIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5SyncTotalWeightIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5SyncTotalWeight represents a SyncTotalWeight event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5SyncTotalWeight struct {
	Receiver   common.Address
	SrcTrackId *big.Int
	Timestamp  *big.Int
	DstChainId uint64
	DstTrackId *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSyncTotalWeight is a free log retrieval operation binding the contract event 0x26f761805bf5b48d09abfb7b15d908bb69dd697594afda09ffae497db2a3df4a.
//
// Solidity: event SyncTotalWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterSyncTotalWeight(opts *bind.FilterOpts) (*IFAllocationMasterV5SyncTotalWeightIterator, error) {

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "SyncTotalWeight")
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5SyncTotalWeightIterator{contract: _IFAllocationMasterV5.contract, event: "SyncTotalWeight", logs: logs, sub: sub}, nil
}

// WatchSyncTotalWeight is a free log subscription operation binding the contract event 0x26f761805bf5b48d09abfb7b15d908bb69dd697594afda09ffae497db2a3df4a.
//
// Solidity: event SyncTotalWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchSyncTotalWeight(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5SyncTotalWeight) (event.Subscription, error) {

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "SyncTotalWeight")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5SyncTotalWeight)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "SyncTotalWeight", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncTotalWeight is a log parse operation binding the contract event 0x26f761805bf5b48d09abfb7b15d908bb69dd697594afda09ffae497db2a3df4a.
//
// Solidity: event SyncTotalWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseSyncTotalWeight(log types.Log) (*IFAllocationMasterV5SyncTotalWeight, error) {
	event := new(IFAllocationMasterV5SyncTotalWeight)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "SyncTotalWeight", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5SyncUserWeightIterator is returned from FilterSyncUserWeight and is used to iterate over the raw logs and unpacked data for SyncUserWeight events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5SyncUserWeightIterator struct {
	Event *IFAllocationMasterV5SyncUserWeight // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5SyncUserWeightIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5SyncUserWeight)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5SyncUserWeight)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5SyncUserWeightIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5SyncUserWeightIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5SyncUserWeight represents a SyncUserWeight event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5SyncUserWeight struct {
	Receiver   common.Address
	SrcTrackId *big.Int
	Timestamp  *big.Int
	DstChainId uint64
	DstTrackId *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSyncUserWeight is a free log retrieval operation binding the contract event 0x63f7370c5ec881103dc49f9b20da0dd67baa69c60e154fafa9f9b914fa198285.
//
// Solidity: event SyncUserWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterSyncUserWeight(opts *bind.FilterOpts) (*IFAllocationMasterV5SyncUserWeightIterator, error) {

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "SyncUserWeight")
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5SyncUserWeightIterator{contract: _IFAllocationMasterV5.contract, event: "SyncUserWeight", logs: logs, sub: sub}, nil
}

// WatchSyncUserWeight is a free log subscription operation binding the contract event 0x63f7370c5ec881103dc49f9b20da0dd67baa69c60e154fafa9f9b914fa198285.
//
// Solidity: event SyncUserWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchSyncUserWeight(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5SyncUserWeight) (event.Subscription, error) {

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "SyncUserWeight")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5SyncUserWeight)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "SyncUserWeight", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncUserWeight is a log parse operation binding the contract event 0x63f7370c5ec881103dc49f9b20da0dd67baa69c60e154fafa9f9b914fa198285.
//
// Solidity: event SyncUserWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseSyncUserWeight(log types.Log) (*IFAllocationMasterV5SyncUserWeight, error) {
	event := new(IFAllocationMasterV5SyncUserWeight)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "SyncUserWeight", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterV5UnstakeIterator is returned from FilterUnstake and is used to iterate over the raw logs and unpacked data for Unstake events raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5UnstakeIterator struct {
	Event *IFAllocationMasterV5Unstake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterV5UnstakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterV5Unstake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterV5Unstake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterV5UnstakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterV5UnstakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterV5Unstake represents a Unstake event raised by the IFAllocationMasterV5 contract.
type IFAllocationMasterV5Unstake struct {
	TrackId *big.Int
	User    common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnstake is a free log retrieval operation binding the contract event 0xbd1cd43f77539b6f0bc66ed76923ac8eb8cb34f9d6ff0c16b6b8b1d43cf94f08.
//
// Solidity: event Unstake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) FilterUnstake(opts *bind.FilterOpts, trackId []*big.Int, user []common.Address) (*IFAllocationMasterV5UnstakeIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.FilterLogs(opts, "Unstake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterV5UnstakeIterator{contract: _IFAllocationMasterV5.contract, event: "Unstake", logs: logs, sub: sub}, nil
}

// WatchUnstake is a free log subscription operation binding the contract event 0xbd1cd43f77539b6f0bc66ed76923ac8eb8cb34f9d6ff0c16b6b8b1d43cf94f08.
//
// Solidity: event Unstake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) WatchUnstake(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterV5Unstake, trackId []*big.Int, user []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMasterV5.contract.WatchLogs(opts, "Unstake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterV5Unstake)
				if err := _IFAllocationMasterV5.contract.UnpackLog(event, "Unstake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstake is a log parse operation binding the contract event 0xbd1cd43f77539b6f0bc66ed76923ac8eb8cb34f9d6ff0c16b6b8b1d43cf94f08.
//
// Solidity: event Unstake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMasterV5 *IFAllocationMasterV5Filterer) ParseUnstake(log types.Log) (*IFAllocationMasterV5Unstake, error) {
	event := new(IFAllocationMasterV5Unstake)
	if err := _IFAllocationMasterV5.contract.UnpackLog(event, "Unstake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
