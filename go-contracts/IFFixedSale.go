// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package IFFixedSale

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IFVestableCliff is an auto generated low-level Go binding around an user-defined struct.
type IFVestableCliff struct {
	ClaimTime *big.Int
	Pct       uint8
}

// IFFixedSaleMetaData contains all meta data concerning the IFFixedSale contract.
var IFFixedSaleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalPayment\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleTokenBalance\",\"type\":\"uint256\"}],\"name\":\"Cash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyTokenRetrieve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"casher\",\"type\":\"address\"}],\"name\":\"SetCasher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"indexed\":true,\"internalType\":\"structIFVestable.Cliff[]\",\"name\":\"cliffPeriod\",\"type\":\"tuple[]\"}],\"name\":\"SetCliffVestingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"linearVestingEndTime\",\"type\":\"uint256\"}],\"name\":\"SetLinearVestingEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minTotalPayment\",\"type\":\"uint256\"}],\"name\":\"SetMinTotalPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"whitelistRootHash\",\"type\":\"bytes32\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistSetter\",\"type\":\"address\"}],\"name\":\"SetWhitelistSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"withdrawDelay\",\"type\":\"uint24\"}],\"name\":\"SetWithdrawDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cliffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenRetrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentClaimableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"getMaxPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnlockedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasCashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linearVestingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotalPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contractERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaserCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_casher\",\"type\":\"address\"}],\"name\":\"setCasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"pct\",\"type\":\"uint8[]\"}],\"name\":\"setCliffPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingEndTime\",\"type\":\"uint256\"}],\"name\":\"setLinearVestingEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTotalPayment\",\"type\":\"uint256\"}],\"name\":\"setMinTotalPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_vestingEditableOverride\",\"type\":\"bool\"}],\"name\":\"setVestingEditable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRootHash\",\"type\":\"bytes32\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistSetter\",\"type\":\"address\"}],\"name\":\"setWhitelistSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_withdrawDelay\",\"type\":\"uint24\"}],\"name\":\"setWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaymentReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEditableOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistedPurchase\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"whitelistedPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDelay\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawGiveaway\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"withdrawGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawerCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// IFFixedSaleABI is the input ABI used to generate the binding from.
// Deprecated: Use IFFixedSaleMetaData.ABI instead.
var IFFixedSaleABI = IFFixedSaleMetaData.ABI

// IFFixedSaleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IFFixedSaleMetaData.Bin instead.
var IFFixedSaleBin = IFFixedSaleMetaData.Bin

// DeployIFFixedSale deploys a new Ethereum contract, binding an instance of IFFixedSale to it.
func DeployIFFixedSale(auth *bind.TransactOpts, backend bind.ContractBackend, _salePrice *big.Int, _funder common.Address, _paymentToken common.Address, _saleToken common.Address, _trackId *big.Int, _startTime *big.Int, _endTime *big.Int, _maxTotalPayment *big.Int) (common.Address, *types.Transaction, *IFFixedSale, error) {
	parsed, err := IFFixedSaleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IFFixedSaleBin), backend, _salePrice, _funder, _paymentToken, _saleToken, _trackId, _startTime, _endTime, _maxTotalPayment)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IFFixedSale{IFFixedSaleCaller: IFFixedSaleCaller{contract: contract}, IFFixedSaleTransactor: IFFixedSaleTransactor{contract: contract}, IFFixedSaleFilterer: IFFixedSaleFilterer{contract: contract}}, nil
}

// IFFixedSale is an auto generated Go binding around an Ethereum contract.
type IFFixedSale struct {
	IFFixedSaleCaller     // Read-only binding to the contract
	IFFixedSaleTransactor // Write-only binding to the contract
	IFFixedSaleFilterer   // Log filterer for contract events
}

// IFFixedSaleCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFFixedSaleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFFixedSaleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFFixedSaleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFFixedSaleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFFixedSaleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFFixedSaleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFFixedSaleSession struct {
	Contract     *IFFixedSale      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFFixedSaleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFFixedSaleCallerSession struct {
	Contract *IFFixedSaleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IFFixedSaleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFFixedSaleTransactorSession struct {
	Contract     *IFFixedSaleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IFFixedSaleRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFFixedSaleRaw struct {
	Contract *IFFixedSale // Generic contract binding to access the raw methods on
}

// IFFixedSaleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFFixedSaleCallerRaw struct {
	Contract *IFFixedSaleCaller // Generic read-only contract binding to access the raw methods on
}

// IFFixedSaleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFFixedSaleTransactorRaw struct {
	Contract *IFFixedSaleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFFixedSale creates a new instance of IFFixedSale, bound to a specific deployed contract.
func NewIFFixedSale(address common.Address, backend bind.ContractBackend) (*IFFixedSale, error) {
	contract, err := bindIFFixedSale(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFFixedSale{IFFixedSaleCaller: IFFixedSaleCaller{contract: contract}, IFFixedSaleTransactor: IFFixedSaleTransactor{contract: contract}, IFFixedSaleFilterer: IFFixedSaleFilterer{contract: contract}}, nil
}

// NewIFFixedSaleCaller creates a new read-only instance of IFFixedSale, bound to a specific deployed contract.
func NewIFFixedSaleCaller(address common.Address, caller bind.ContractCaller) (*IFFixedSaleCaller, error) {
	contract, err := bindIFFixedSale(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleCaller{contract: contract}, nil
}

// NewIFFixedSaleTransactor creates a new write-only instance of IFFixedSale, bound to a specific deployed contract.
func NewIFFixedSaleTransactor(address common.Address, transactor bind.ContractTransactor) (*IFFixedSaleTransactor, error) {
	contract, err := bindIFFixedSale(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleTransactor{contract: contract}, nil
}

// NewIFFixedSaleFilterer creates a new log filterer instance of IFFixedSale, bound to a specific deployed contract.
func NewIFFixedSaleFilterer(address common.Address, filterer bind.ContractFilterer) (*IFFixedSaleFilterer, error) {
	contract, err := bindIFFixedSale(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleFilterer{contract: contract}, nil
}

// bindIFFixedSale binds a generic wrapper to an already deployed contract.
func bindIFFixedSale(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFFixedSaleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFFixedSale *IFFixedSaleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFFixedSale.Contract.IFFixedSaleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFFixedSale *IFFixedSaleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSale.Contract.IFFixedSaleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFFixedSale *IFFixedSaleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFFixedSale.Contract.IFFixedSaleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFFixedSale *IFFixedSaleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFFixedSale.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFFixedSale *IFFixedSaleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSale.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFFixedSale *IFFixedSaleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFFixedSale.Contract.contract.Transact(opts, method, params...)
}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFFixedSale *IFFixedSaleCaller) Casher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "casher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFFixedSale *IFFixedSaleSession) Casher() (common.Address, error) {
	return _IFFixedSale.Contract.Casher(&_IFFixedSale.CallOpts)
}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFFixedSale *IFFixedSaleCallerSession) Casher() (common.Address, error) {
	return _IFFixedSale.Contract.Casher(&_IFFixedSale.CallOpts)
}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFFixedSale *IFFixedSaleCaller) CheckWhitelist(opts *bind.CallOpts, user common.Address, merkleProof [][32]byte) (bool, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "checkWhitelist", user, merkleProof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFFixedSale *IFFixedSaleSession) CheckWhitelist(user common.Address, merkleProof [][32]byte) (bool, error) {
	return _IFFixedSale.Contract.CheckWhitelist(&_IFFixedSale.CallOpts, user, merkleProof)
}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFFixedSale *IFFixedSaleCallerSession) CheckWhitelist(user common.Address, merkleProof [][32]byte) (bool, error) {
	return _IFFixedSale.Contract.CheckWhitelist(&_IFFixedSale.CallOpts, user, merkleProof)
}

// CheckWhitelist0 is a free data retrieval call binding the contract method 0x76078dbe.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof, uint256 allocation) view returns(bool)
func (_IFFixedSale *IFFixedSaleCaller) CheckWhitelist0(opts *bind.CallOpts, user common.Address, merkleProof [][32]byte, allocation *big.Int) (bool, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "checkWhitelist0", user, merkleProof, allocation)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckWhitelist0 is a free data retrieval call binding the contract method 0x76078dbe.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof, uint256 allocation) view returns(bool)
func (_IFFixedSale *IFFixedSaleSession) CheckWhitelist0(user common.Address, merkleProof [][32]byte, allocation *big.Int) (bool, error) {
	return _IFFixedSale.Contract.CheckWhitelist0(&_IFFixedSale.CallOpts, user, merkleProof, allocation)
}

// CheckWhitelist0 is a free data retrieval call binding the contract method 0x76078dbe.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof, uint256 allocation) view returns(bool)
func (_IFFixedSale *IFFixedSaleCallerSession) CheckWhitelist0(user common.Address, merkleProof [][32]byte, allocation *big.Int) (bool, error) {
	return _IFFixedSale.Contract.CheckWhitelist0(&_IFFixedSale.CallOpts, user, merkleProof, allocation)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) Claimable(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "claimable", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) Claimable(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.Claimable(&_IFFixedSale.CallOpts, arg0)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) Claimable(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.Claimable(&_IFFixedSale.CallOpts, arg0)
}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFFixedSale *IFFixedSaleCaller) CliffPeriod(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "cliffPeriod", arg0)

	outstruct := new(struct {
		ClaimTime *big.Int
		Pct       uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ClaimTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Pct = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFFixedSale *IFFixedSaleSession) CliffPeriod(arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	return _IFFixedSale.Contract.CliffPeriod(&_IFFixedSale.CallOpts, arg0)
}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFFixedSale *IFFixedSaleCallerSession) CliffPeriod(arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	return _IFFixedSale.Contract.CliffPeriod(&_IFFixedSale.CallOpts, arg0)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "endTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) EndTime() (*big.Int, error) {
	return _IFFixedSale.Contract.EndTime(&_IFFixedSale.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) EndTime() (*big.Int, error) {
	return _IFFixedSale.Contract.EndTime(&_IFFixedSale.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFFixedSale *IFFixedSaleCaller) Funder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "funder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFFixedSale *IFFixedSaleSession) Funder() (common.Address, error) {
	return _IFFixedSale.Contract.Funder(&_IFFixedSale.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFFixedSale *IFFixedSaleCallerSession) Funder() (common.Address, error) {
	return _IFFixedSale.Contract.Funder(&_IFFixedSale.CallOpts)
}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) GetCurrentClaimableToken(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "getCurrentClaimableToken", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) GetCurrentClaimableToken(user common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.GetCurrentClaimableToken(&_IFFixedSale.CallOpts, user)
}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) GetCurrentClaimableToken(user common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.GetCurrentClaimableToken(&_IFFixedSale.CallOpts, user)
}

// GetMaxPayment is a free data retrieval call binding the contract method 0x2feb25f6.
//
// Solidity: function getMaxPayment(address user, uint256 allocation) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) GetMaxPayment(opts *bind.CallOpts, user common.Address, allocation *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "getMaxPayment", user, allocation)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxPayment is a free data retrieval call binding the contract method 0x2feb25f6.
//
// Solidity: function getMaxPayment(address user, uint256 allocation) view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) GetMaxPayment(user common.Address, allocation *big.Int) (*big.Int, error) {
	return _IFFixedSale.Contract.GetMaxPayment(&_IFFixedSale.CallOpts, user, allocation)
}

// GetMaxPayment is a free data retrieval call binding the contract method 0x2feb25f6.
//
// Solidity: function getMaxPayment(address user, uint256 allocation) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) GetMaxPayment(user common.Address, allocation *big.Int) (*big.Int, error) {
	return _IFFixedSale.Contract.GetMaxPayment(&_IFFixedSale.CallOpts, user, allocation)
}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) GetUnlockedToken(opts *bind.CallOpts, totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "getUnlockedToken", totalPurchased, claimable, user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) GetUnlockedToken(totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.GetUnlockedToken(&_IFFixedSale.CallOpts, totalPurchased, claimable, user)
}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) GetUnlockedToken(totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.GetUnlockedToken(&_IFFixedSale.CallOpts, totalPurchased, claimable, user)
}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFFixedSale *IFFixedSaleCaller) HasCashed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "hasCashed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFFixedSale *IFFixedSaleSession) HasCashed() (bool, error) {
	return _IFFixedSale.Contract.HasCashed(&_IFFixedSale.CallOpts)
}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFFixedSale *IFFixedSaleCallerSession) HasCashed() (bool, error) {
	return _IFFixedSale.Contract.HasCashed(&_IFFixedSale.CallOpts)
}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFFixedSale *IFFixedSaleCaller) HasWithdrawn(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "hasWithdrawn", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFFixedSale *IFFixedSaleSession) HasWithdrawn(arg0 common.Address) (bool, error) {
	return _IFFixedSale.Contract.HasWithdrawn(&_IFFixedSale.CallOpts, arg0)
}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFFixedSale *IFFixedSaleCallerSession) HasWithdrawn(arg0 common.Address) (bool, error) {
	return _IFFixedSale.Contract.HasWithdrawn(&_IFFixedSale.CallOpts, arg0)
}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) LatestClaimTime(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "latestClaimTime", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) LatestClaimTime(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.LatestClaimTime(&_IFFixedSale.CallOpts, arg0)
}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) LatestClaimTime(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.LatestClaimTime(&_IFFixedSale.CallOpts, arg0)
}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) LinearVestingEndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "linearVestingEndTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) LinearVestingEndTime() (*big.Int, error) {
	return _IFFixedSale.Contract.LinearVestingEndTime(&_IFFixedSale.CallOpts)
}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) LinearVestingEndTime() (*big.Int, error) {
	return _IFFixedSale.Contract.LinearVestingEndTime(&_IFFixedSale.CallOpts)
}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) MaxTotalPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "maxTotalPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) MaxTotalPayment() (*big.Int, error) {
	return _IFFixedSale.Contract.MaxTotalPayment(&_IFFixedSale.CallOpts)
}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) MaxTotalPayment() (*big.Int, error) {
	return _IFFixedSale.Contract.MaxTotalPayment(&_IFFixedSale.CallOpts)
}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) MinTotalPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "minTotalPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) MinTotalPayment() (*big.Int, error) {
	return _IFFixedSale.Contract.MinTotalPayment(&_IFFixedSale.CallOpts)
}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) MinTotalPayment() (*big.Int, error) {
	return _IFFixedSale.Contract.MinTotalPayment(&_IFFixedSale.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFFixedSale *IFFixedSaleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFFixedSale *IFFixedSaleSession) Owner() (common.Address, error) {
	return _IFFixedSale.Contract.Owner(&_IFFixedSale.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFFixedSale *IFFixedSaleCallerSession) Owner() (common.Address, error) {
	return _IFFixedSale.Contract.Owner(&_IFFixedSale.CallOpts)
}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) PaymentReceived(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "paymentReceived", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) PaymentReceived(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.PaymentReceived(&_IFFixedSale.CallOpts, arg0)
}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) PaymentReceived(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.PaymentReceived(&_IFFixedSale.CallOpts, arg0)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFFixedSale *IFFixedSaleCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFFixedSale *IFFixedSaleSession) PaymentToken() (common.Address, error) {
	return _IFFixedSale.Contract.PaymentToken(&_IFFixedSale.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFFixedSale *IFFixedSaleCallerSession) PaymentToken() (common.Address, error) {
	return _IFFixedSale.Contract.PaymentToken(&_IFFixedSale.CallOpts)
}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFFixedSale *IFFixedSaleCaller) PurchaserCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "purchaserCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFFixedSale *IFFixedSaleSession) PurchaserCount() (uint32, error) {
	return _IFFixedSale.Contract.PurchaserCount(&_IFFixedSale.CallOpts)
}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFFixedSale *IFFixedSaleCallerSession) PurchaserCount() (uint32, error) {
	return _IFFixedSale.Contract.PurchaserCount(&_IFFixedSale.CallOpts)
}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) SaleAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "saleAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) SaleAmount() (*big.Int, error) {
	return _IFFixedSale.Contract.SaleAmount(&_IFFixedSale.CallOpts)
}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) SaleAmount() (*big.Int, error) {
	return _IFFixedSale.Contract.SaleAmount(&_IFFixedSale.CallOpts)
}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) SalePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "salePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) SalePrice() (*big.Int, error) {
	return _IFFixedSale.Contract.SalePrice(&_IFFixedSale.CallOpts)
}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) SalePrice() (*big.Int, error) {
	return _IFFixedSale.Contract.SalePrice(&_IFFixedSale.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "startTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) StartTime() (*big.Int, error) {
	return _IFFixedSale.Contract.StartTime(&_IFFixedSale.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) StartTime() (*big.Int, error) {
	return _IFFixedSale.Contract.StartTime(&_IFFixedSale.CallOpts)
}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) TotalPaymentReceived(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "totalPaymentReceived")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) TotalPaymentReceived() (*big.Int, error) {
	return _IFFixedSale.Contract.TotalPaymentReceived(&_IFFixedSale.CallOpts)
}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) TotalPaymentReceived() (*big.Int, error) {
	return _IFFixedSale.Contract.TotalPaymentReceived(&_IFFixedSale.CallOpts)
}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) TotalPurchased(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "totalPurchased", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) TotalPurchased(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.TotalPurchased(&_IFFixedSale.CallOpts, arg0)
}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) TotalPurchased(arg0 common.Address) (*big.Int, error) {
	return _IFFixedSale.Contract.TotalPurchased(&_IFFixedSale.CallOpts, arg0)
}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFFixedSale *IFFixedSaleCaller) VestingEditableOverride(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "vestingEditableOverride")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFFixedSale *IFFixedSaleSession) VestingEditableOverride() (bool, error) {
	return _IFFixedSale.Contract.VestingEditableOverride(&_IFFixedSale.CallOpts)
}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFFixedSale *IFFixedSaleCallerSession) VestingEditableOverride() (bool, error) {
	return _IFFixedSale.Contract.VestingEditableOverride(&_IFFixedSale.CallOpts)
}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFFixedSale *IFFixedSaleCaller) WhitelistRootHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "whitelistRootHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFFixedSale *IFFixedSaleSession) WhitelistRootHash() ([32]byte, error) {
	return _IFFixedSale.Contract.WhitelistRootHash(&_IFFixedSale.CallOpts)
}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFFixedSale *IFFixedSaleCallerSession) WhitelistRootHash() ([32]byte, error) {
	return _IFFixedSale.Contract.WhitelistRootHash(&_IFFixedSale.CallOpts)
}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFFixedSale *IFFixedSaleCaller) WhitelistSetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "whitelistSetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFFixedSale *IFFixedSaleSession) WhitelistSetter() (common.Address, error) {
	return _IFFixedSale.Contract.WhitelistSetter(&_IFFixedSale.CallOpts)
}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFFixedSale *IFFixedSaleCallerSession) WhitelistSetter() (common.Address, error) {
	return _IFFixedSale.Contract.WhitelistSetter(&_IFFixedSale.CallOpts)
}

// WhitelistedPurchase is a free data retrieval call binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 , bytes32[] ) pure returns()
func (_IFFixedSale *IFFixedSaleCaller) WhitelistedPurchase(opts *bind.CallOpts, arg0 *big.Int, arg1 [][32]byte) error {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "whitelistedPurchase", arg0, arg1)

	if err != nil {
		return err
	}

	return err

}

// WhitelistedPurchase is a free data retrieval call binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 , bytes32[] ) pure returns()
func (_IFFixedSale *IFFixedSaleSession) WhitelistedPurchase(arg0 *big.Int, arg1 [][32]byte) error {
	return _IFFixedSale.Contract.WhitelistedPurchase(&_IFFixedSale.CallOpts, arg0, arg1)
}

// WhitelistedPurchase is a free data retrieval call binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 , bytes32[] ) pure returns()
func (_IFFixedSale *IFFixedSaleCallerSession) WhitelistedPurchase(arg0 *big.Int, arg1 [][32]byte) error {
	return _IFFixedSale.Contract.WhitelistedPurchase(&_IFFixedSale.CallOpts, arg0, arg1)
}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFFixedSale *IFFixedSaleCaller) WithdrawDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "withdrawDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFFixedSale *IFFixedSaleSession) WithdrawDelay() (*big.Int, error) {
	return _IFFixedSale.Contract.WithdrawDelay(&_IFFixedSale.CallOpts)
}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFFixedSale *IFFixedSaleCallerSession) WithdrawDelay() (*big.Int, error) {
	return _IFFixedSale.Contract.WithdrawDelay(&_IFFixedSale.CallOpts)
}

// WithdrawGiveaway is a free data retrieval call binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] ) pure returns()
func (_IFFixedSale *IFFixedSaleCaller) WithdrawGiveaway(opts *bind.CallOpts, arg0 [][32]byte) error {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "withdrawGiveaway", arg0)

	if err != nil {
		return err
	}

	return err

}

// WithdrawGiveaway is a free data retrieval call binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] ) pure returns()
func (_IFFixedSale *IFFixedSaleSession) WithdrawGiveaway(arg0 [][32]byte) error {
	return _IFFixedSale.Contract.WithdrawGiveaway(&_IFFixedSale.CallOpts, arg0)
}

// WithdrawGiveaway is a free data retrieval call binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] ) pure returns()
func (_IFFixedSale *IFFixedSaleCallerSession) WithdrawGiveaway(arg0 [][32]byte) error {
	return _IFFixedSale.Contract.WithdrawGiveaway(&_IFFixedSale.CallOpts, arg0)
}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCaller) WithdrawTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "withdrawTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleSession) WithdrawTime() (*big.Int, error) {
	return _IFFixedSale.Contract.WithdrawTime(&_IFFixedSale.CallOpts)
}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFFixedSale *IFFixedSaleCallerSession) WithdrawTime() (*big.Int, error) {
	return _IFFixedSale.Contract.WithdrawTime(&_IFFixedSale.CallOpts)
}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFFixedSale *IFFixedSaleCaller) WithdrawerCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IFFixedSale.contract.Call(opts, &out, "withdrawerCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFFixedSale *IFFixedSaleSession) WithdrawerCount() (uint32, error) {
	return _IFFixedSale.Contract.WithdrawerCount(&_IFFixedSale.CallOpts)
}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFFixedSale *IFFixedSaleCallerSession) WithdrawerCount() (uint32, error) {
	return _IFFixedSale.Contract.WithdrawerCount(&_IFFixedSale.CallOpts)
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFFixedSale *IFFixedSaleTransactor) Cash(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "cash")
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFFixedSale *IFFixedSaleSession) Cash() (*types.Transaction, error) {
	return _IFFixedSale.Contract.Cash(&_IFFixedSale.TransactOpts)
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) Cash() (*types.Transaction, error) {
	return _IFFixedSale.Contract.Cash(&_IFFixedSale.TransactOpts)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFFixedSale *IFFixedSaleTransactor) EmergencyTokenRetrieve(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "emergencyTokenRetrieve", token)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFFixedSale *IFFixedSaleSession) EmergencyTokenRetrieve(token common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.EmergencyTokenRetrieve(&_IFFixedSale.TransactOpts, token)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) EmergencyTokenRetrieve(token common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.EmergencyTokenRetrieve(&_IFFixedSale.TransactOpts, token)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFFixedSale *IFFixedSaleTransactor) Fund(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "fund", amount)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFFixedSale *IFFixedSaleSession) Fund(amount *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.Fund(&_IFFixedSale.TransactOpts, amount)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) Fund(amount *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.Fund(&_IFFixedSale.TransactOpts, amount)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 ) returns()
func (_IFFixedSale *IFFixedSaleTransactor) Purchase(opts *bind.TransactOpts, arg0 *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "purchase", arg0)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 ) returns()
func (_IFFixedSale *IFFixedSaleSession) Purchase(arg0 *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.Purchase(&_IFFixedSale.TransactOpts, arg0)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 ) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) Purchase(arg0 *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.Purchase(&_IFFixedSale.TransactOpts, arg0)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFFixedSale *IFFixedSaleTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFFixedSale *IFFixedSaleSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFFixedSale.Contract.RenounceOwnership(&_IFFixedSale.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFFixedSale.Contract.RenounceOwnership(&_IFFixedSale.TransactOpts)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetCasher(opts *bind.TransactOpts, _casher common.Address) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setCasher", _casher)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFFixedSale *IFFixedSaleSession) SetCasher(_casher common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetCasher(&_IFFixedSale.TransactOpts, _casher)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetCasher(_casher common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetCasher(&_IFFixedSale.TransactOpts, _casher)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetCliffPeriod(opts *bind.TransactOpts, claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setCliffPeriod", claimTimes, pct)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFFixedSale *IFFixedSaleSession) SetCliffPeriod(claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetCliffPeriod(&_IFFixedSale.TransactOpts, claimTimes, pct)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetCliffPeriod(claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetCliffPeriod(&_IFFixedSale.TransactOpts, claimTimes, pct)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetLinearVestingEndTime(opts *bind.TransactOpts, _vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setLinearVestingEndTime", _vestingEndTime)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFFixedSale *IFFixedSaleSession) SetLinearVestingEndTime(_vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetLinearVestingEndTime(&_IFFixedSale.TransactOpts, _vestingEndTime)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetLinearVestingEndTime(_vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetLinearVestingEndTime(&_IFFixedSale.TransactOpts, _vestingEndTime)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetMinTotalPayment(opts *bind.TransactOpts, _minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setMinTotalPayment", _minTotalPayment)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFFixedSale *IFFixedSaleSession) SetMinTotalPayment(_minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetMinTotalPayment(&_IFFixedSale.TransactOpts, _minTotalPayment)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetMinTotalPayment(_minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetMinTotalPayment(&_IFFixedSale.TransactOpts, _minTotalPayment)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetVestingEditable(opts *bind.TransactOpts, _vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setVestingEditable", _vestingEditableOverride)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFFixedSale *IFFixedSaleSession) SetVestingEditable(_vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetVestingEditable(&_IFFixedSale.TransactOpts, _vestingEditableOverride)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetVestingEditable(_vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetVestingEditable(&_IFFixedSale.TransactOpts, _vestingEditableOverride)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetWhitelist(opts *bind.TransactOpts, _whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setWhitelist", _whitelistRootHash)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFFixedSale *IFFixedSaleSession) SetWhitelist(_whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetWhitelist(&_IFFixedSale.TransactOpts, _whitelistRootHash)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetWhitelist(_whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetWhitelist(&_IFFixedSale.TransactOpts, _whitelistRootHash)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetWhitelistSetter(opts *bind.TransactOpts, _whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setWhitelistSetter", _whitelistSetter)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFFixedSale *IFFixedSaleSession) SetWhitelistSetter(_whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetWhitelistSetter(&_IFFixedSale.TransactOpts, _whitelistSetter)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetWhitelistSetter(_whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetWhitelistSetter(&_IFFixedSale.TransactOpts, _whitelistSetter)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFFixedSale *IFFixedSaleTransactor) SetWithdrawDelay(opts *bind.TransactOpts, _withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "setWithdrawDelay", _withdrawDelay)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFFixedSale *IFFixedSaleSession) SetWithdrawDelay(_withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetWithdrawDelay(&_IFFixedSale.TransactOpts, _withdrawDelay)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) SetWithdrawDelay(_withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.SetWithdrawDelay(&_IFFixedSale.TransactOpts, _withdrawDelay)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFFixedSale *IFFixedSaleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFFixedSale *IFFixedSaleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.TransferOwnership(&_IFFixedSale.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFFixedSale.Contract.TransferOwnership(&_IFFixedSale.TransactOpts, newOwner)
}

// WhitelistedPurchase0 is a paid mutator transaction binding the contract method 0x2316448c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSale *IFFixedSaleTransactor) WhitelistedPurchase0(opts *bind.TransactOpts, paymentAmount *big.Int, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "whitelistedPurchase0", paymentAmount, merkleProof, allocation)
}

// WhitelistedPurchase0 is a paid mutator transaction binding the contract method 0x2316448c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSale *IFFixedSaleSession) WhitelistedPurchase0(paymentAmount *big.Int, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.WhitelistedPurchase0(&_IFFixedSale.TransactOpts, paymentAmount, merkleProof, allocation)
}

// WhitelistedPurchase0 is a paid mutator transaction binding the contract method 0x2316448c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) WhitelistedPurchase0(paymentAmount *big.Int, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.WhitelistedPurchase0(&_IFFixedSale.TransactOpts, paymentAmount, merkleProof, allocation)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFFixedSale *IFFixedSaleTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFFixedSale *IFFixedSaleSession) Withdraw() (*types.Transaction, error) {
	return _IFFixedSale.Contract.Withdraw(&_IFFixedSale.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) Withdraw() (*types.Transaction, error) {
	return _IFFixedSale.Contract.Withdraw(&_IFFixedSale.TransactOpts)
}

// WithdrawGiveaway0 is a paid mutator transaction binding the contract method 0x1e937107.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSale *IFFixedSaleTransactor) WithdrawGiveaway0(opts *bind.TransactOpts, merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.contract.Transact(opts, "withdrawGiveaway0", merkleProof, allocation)
}

// WithdrawGiveaway0 is a paid mutator transaction binding the contract method 0x1e937107.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSale *IFFixedSaleSession) WithdrawGiveaway0(merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.WithdrawGiveaway0(&_IFFixedSale.TransactOpts, merkleProof, allocation)
}

// WithdrawGiveaway0 is a paid mutator transaction binding the contract method 0x1e937107.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof, uint256 allocation) returns()
func (_IFFixedSale *IFFixedSaleTransactorSession) WithdrawGiveaway0(merkleProof [][32]byte, allocation *big.Int) (*types.Transaction, error) {
	return _IFFixedSale.Contract.WithdrawGiveaway0(&_IFFixedSale.TransactOpts, merkleProof, allocation)
}

// IFFixedSaleCashIterator is returned from FilterCash and is used to iterate over the raw logs and unpacked data for Cash events raised by the IFFixedSale contract.
type IFFixedSaleCashIterator struct {
	Event *IFFixedSaleCash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleCashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleCash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleCash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleCashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleCashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleCash represents a Cash event raised by the IFFixedSale contract.
type IFFixedSaleCash struct {
	Sender              common.Address
	PaymentTokenBalance *big.Int
	SaleTokenBalance    *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterCash is a free log retrieval operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFFixedSale *IFFixedSaleFilterer) FilterCash(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleCashIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "Cash", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleCashIterator{contract: _IFFixedSale.contract, event: "Cash", logs: logs, sub: sub}, nil
}

// WatchCash is a free log subscription operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFFixedSale *IFFixedSaleFilterer) WatchCash(opts *bind.WatchOpts, sink chan<- *IFFixedSaleCash, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "Cash", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleCash)
				if err := _IFFixedSale.contract.UnpackLog(event, "Cash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCash is a log parse operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFFixedSale *IFFixedSaleFilterer) ParseCash(log types.Log) (*IFFixedSaleCash, error) {
	event := new(IFFixedSaleCash)
	if err := _IFFixedSale.contract.UnpackLog(event, "Cash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleEmergencyTokenRetrieveIterator is returned from FilterEmergencyTokenRetrieve and is used to iterate over the raw logs and unpacked data for EmergencyTokenRetrieve events raised by the IFFixedSale contract.
type IFFixedSaleEmergencyTokenRetrieveIterator struct {
	Event *IFFixedSaleEmergencyTokenRetrieve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleEmergencyTokenRetrieveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleEmergencyTokenRetrieve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleEmergencyTokenRetrieve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleEmergencyTokenRetrieveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleEmergencyTokenRetrieveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleEmergencyTokenRetrieve represents a EmergencyTokenRetrieve event raised by the IFFixedSale contract.
type IFFixedSaleEmergencyTokenRetrieve struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEmergencyTokenRetrieve is a free log retrieval operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) FilterEmergencyTokenRetrieve(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleEmergencyTokenRetrieveIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "EmergencyTokenRetrieve", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleEmergencyTokenRetrieveIterator{contract: _IFFixedSale.contract, event: "EmergencyTokenRetrieve", logs: logs, sub: sub}, nil
}

// WatchEmergencyTokenRetrieve is a free log subscription operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) WatchEmergencyTokenRetrieve(opts *bind.WatchOpts, sink chan<- *IFFixedSaleEmergencyTokenRetrieve, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "EmergencyTokenRetrieve", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleEmergencyTokenRetrieve)
				if err := _IFFixedSale.contract.UnpackLog(event, "EmergencyTokenRetrieve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyTokenRetrieve is a log parse operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) ParseEmergencyTokenRetrieve(log types.Log) (*IFFixedSaleEmergencyTokenRetrieve, error) {
	event := new(IFFixedSaleEmergencyTokenRetrieve)
	if err := _IFFixedSale.contract.UnpackLog(event, "EmergencyTokenRetrieve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleFundIterator is returned from FilterFund and is used to iterate over the raw logs and unpacked data for Fund events raised by the IFFixedSale contract.
type IFFixedSaleFundIterator struct {
	Event *IFFixedSaleFund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleFundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleFund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleFund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleFundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleFundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleFund represents a Fund event raised by the IFFixedSale contract.
type IFFixedSaleFund struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFund is a free log retrieval operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) FilterFund(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleFundIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "Fund", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleFundIterator{contract: _IFFixedSale.contract, event: "Fund", logs: logs, sub: sub}, nil
}

// WatchFund is a free log subscription operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) WatchFund(opts *bind.WatchOpts, sink chan<- *IFFixedSaleFund, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "Fund", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleFund)
				if err := _IFFixedSale.contract.UnpackLog(event, "Fund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFund is a log parse operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) ParseFund(log types.Log) (*IFFixedSaleFund, error) {
	event := new(IFFixedSaleFund)
	if err := _IFFixedSale.contract.UnpackLog(event, "Fund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the IFFixedSale contract.
type IFFixedSaleOwnershipTransferredIterator struct {
	Event *IFFixedSaleOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleOwnershipTransferred represents a OwnershipTransferred event raised by the IFFixedSale contract.
type IFFixedSaleOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFFixedSale *IFFixedSaleFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IFFixedSaleOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleOwnershipTransferredIterator{contract: _IFFixedSale.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFFixedSale *IFFixedSaleFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IFFixedSaleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleOwnershipTransferred)
				if err := _IFFixedSale.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFFixedSale *IFFixedSaleFilterer) ParseOwnershipTransferred(log types.Log) (*IFFixedSaleOwnershipTransferred, error) {
	event := new(IFFixedSaleOwnershipTransferred)
	if err := _IFFixedSale.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSalePurchaseIterator is returned from FilterPurchase and is used to iterate over the raw logs and unpacked data for Purchase events raised by the IFFixedSale contract.
type IFFixedSalePurchaseIterator struct {
	Event *IFFixedSalePurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSalePurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSalePurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSalePurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSalePurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSalePurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSalePurchase represents a Purchase event raised by the IFFixedSale contract.
type IFFixedSalePurchase struct {
	Sender        common.Address
	PaymentAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPurchase is a free log retrieval operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFFixedSale *IFFixedSaleFilterer) FilterPurchase(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSalePurchaseIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "Purchase", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSalePurchaseIterator{contract: _IFFixedSale.contract, event: "Purchase", logs: logs, sub: sub}, nil
}

// WatchPurchase is a free log subscription operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFFixedSale *IFFixedSaleFilterer) WatchPurchase(opts *bind.WatchOpts, sink chan<- *IFFixedSalePurchase, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "Purchase", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSalePurchase)
				if err := _IFFixedSale.contract.UnpackLog(event, "Purchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePurchase is a log parse operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFFixedSale *IFFixedSaleFilterer) ParsePurchase(log types.Log) (*IFFixedSalePurchase, error) {
	event := new(IFFixedSalePurchase)
	if err := _IFFixedSale.contract.UnpackLog(event, "Purchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleSetCasherIterator is returned from FilterSetCasher and is used to iterate over the raw logs and unpacked data for SetCasher events raised by the IFFixedSale contract.
type IFFixedSaleSetCasherIterator struct {
	Event *IFFixedSaleSetCasher // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleSetCasherIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleSetCasher)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleSetCasher)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleSetCasherIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleSetCasherIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleSetCasher represents a SetCasher event raised by the IFFixedSale contract.
type IFFixedSaleSetCasher struct {
	Casher common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetCasher is a free log retrieval operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFFixedSale *IFFixedSaleFilterer) FilterSetCasher(opts *bind.FilterOpts, casher []common.Address) (*IFFixedSaleSetCasherIterator, error) {

	var casherRule []interface{}
	for _, casherItem := range casher {
		casherRule = append(casherRule, casherItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "SetCasher", casherRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleSetCasherIterator{contract: _IFFixedSale.contract, event: "SetCasher", logs: logs, sub: sub}, nil
}

// WatchSetCasher is a free log subscription operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFFixedSale *IFFixedSaleFilterer) WatchSetCasher(opts *bind.WatchOpts, sink chan<- *IFFixedSaleSetCasher, casher []common.Address) (event.Subscription, error) {

	var casherRule []interface{}
	for _, casherItem := range casher {
		casherRule = append(casherRule, casherItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "SetCasher", casherRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleSetCasher)
				if err := _IFFixedSale.contract.UnpackLog(event, "SetCasher", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCasher is a log parse operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFFixedSale *IFFixedSaleFilterer) ParseSetCasher(log types.Log) (*IFFixedSaleSetCasher, error) {
	event := new(IFFixedSaleSetCasher)
	if err := _IFFixedSale.contract.UnpackLog(event, "SetCasher", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleSetCliffVestingPeriodIterator is returned from FilterSetCliffVestingPeriod and is used to iterate over the raw logs and unpacked data for SetCliffVestingPeriod events raised by the IFFixedSale contract.
type IFFixedSaleSetCliffVestingPeriodIterator struct {
	Event *IFFixedSaleSetCliffVestingPeriod // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleSetCliffVestingPeriodIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleSetCliffVestingPeriod)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleSetCliffVestingPeriod)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleSetCliffVestingPeriodIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleSetCliffVestingPeriodIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleSetCliffVestingPeriod represents a SetCliffVestingPeriod event raised by the IFFixedSale contract.
type IFFixedSaleSetCliffVestingPeriod struct {
	CliffPeriod []IFVestableCliff
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetCliffVestingPeriod is a free log retrieval operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFFixedSale *IFFixedSaleFilterer) FilterSetCliffVestingPeriod(opts *bind.FilterOpts, cliffPeriod [][]IFVestableCliff) (*IFFixedSaleSetCliffVestingPeriodIterator, error) {

	var cliffPeriodRule []interface{}
	for _, cliffPeriodItem := range cliffPeriod {
		cliffPeriodRule = append(cliffPeriodRule, cliffPeriodItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "SetCliffVestingPeriod", cliffPeriodRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleSetCliffVestingPeriodIterator{contract: _IFFixedSale.contract, event: "SetCliffVestingPeriod", logs: logs, sub: sub}, nil
}

// WatchSetCliffVestingPeriod is a free log subscription operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFFixedSale *IFFixedSaleFilterer) WatchSetCliffVestingPeriod(opts *bind.WatchOpts, sink chan<- *IFFixedSaleSetCliffVestingPeriod, cliffPeriod [][]IFVestableCliff) (event.Subscription, error) {

	var cliffPeriodRule []interface{}
	for _, cliffPeriodItem := range cliffPeriod {
		cliffPeriodRule = append(cliffPeriodRule, cliffPeriodItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "SetCliffVestingPeriod", cliffPeriodRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleSetCliffVestingPeriod)
				if err := _IFFixedSale.contract.UnpackLog(event, "SetCliffVestingPeriod", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCliffVestingPeriod is a log parse operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFFixedSale *IFFixedSaleFilterer) ParseSetCliffVestingPeriod(log types.Log) (*IFFixedSaleSetCliffVestingPeriod, error) {
	event := new(IFFixedSaleSetCliffVestingPeriod)
	if err := _IFFixedSale.contract.UnpackLog(event, "SetCliffVestingPeriod", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleSetLinearVestingEndTimeIterator is returned from FilterSetLinearVestingEndTime and is used to iterate over the raw logs and unpacked data for SetLinearVestingEndTime events raised by the IFFixedSale contract.
type IFFixedSaleSetLinearVestingEndTimeIterator struct {
	Event *IFFixedSaleSetLinearVestingEndTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleSetLinearVestingEndTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleSetLinearVestingEndTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleSetLinearVestingEndTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleSetLinearVestingEndTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleSetLinearVestingEndTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleSetLinearVestingEndTime represents a SetLinearVestingEndTime event raised by the IFFixedSale contract.
type IFFixedSaleSetLinearVestingEndTime struct {
	LinearVestingEndTime *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSetLinearVestingEndTime is a free log retrieval operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFFixedSale *IFFixedSaleFilterer) FilterSetLinearVestingEndTime(opts *bind.FilterOpts, linearVestingEndTime []*big.Int) (*IFFixedSaleSetLinearVestingEndTimeIterator, error) {

	var linearVestingEndTimeRule []interface{}
	for _, linearVestingEndTimeItem := range linearVestingEndTime {
		linearVestingEndTimeRule = append(linearVestingEndTimeRule, linearVestingEndTimeItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "SetLinearVestingEndTime", linearVestingEndTimeRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleSetLinearVestingEndTimeIterator{contract: _IFFixedSale.contract, event: "SetLinearVestingEndTime", logs: logs, sub: sub}, nil
}

// WatchSetLinearVestingEndTime is a free log subscription operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFFixedSale *IFFixedSaleFilterer) WatchSetLinearVestingEndTime(opts *bind.WatchOpts, sink chan<- *IFFixedSaleSetLinearVestingEndTime, linearVestingEndTime []*big.Int) (event.Subscription, error) {

	var linearVestingEndTimeRule []interface{}
	for _, linearVestingEndTimeItem := range linearVestingEndTime {
		linearVestingEndTimeRule = append(linearVestingEndTimeRule, linearVestingEndTimeItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "SetLinearVestingEndTime", linearVestingEndTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleSetLinearVestingEndTime)
				if err := _IFFixedSale.contract.UnpackLog(event, "SetLinearVestingEndTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetLinearVestingEndTime is a log parse operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFFixedSale *IFFixedSaleFilterer) ParseSetLinearVestingEndTime(log types.Log) (*IFFixedSaleSetLinearVestingEndTime, error) {
	event := new(IFFixedSaleSetLinearVestingEndTime)
	if err := _IFFixedSale.contract.UnpackLog(event, "SetLinearVestingEndTime", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleSetMinTotalPaymentIterator is returned from FilterSetMinTotalPayment and is used to iterate over the raw logs and unpacked data for SetMinTotalPayment events raised by the IFFixedSale contract.
type IFFixedSaleSetMinTotalPaymentIterator struct {
	Event *IFFixedSaleSetMinTotalPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleSetMinTotalPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleSetMinTotalPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleSetMinTotalPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleSetMinTotalPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleSetMinTotalPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleSetMinTotalPayment represents a SetMinTotalPayment event raised by the IFFixedSale contract.
type IFFixedSaleSetMinTotalPayment struct {
	MinTotalPayment *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetMinTotalPayment is a free log retrieval operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFFixedSale *IFFixedSaleFilterer) FilterSetMinTotalPayment(opts *bind.FilterOpts, minTotalPayment []*big.Int) (*IFFixedSaleSetMinTotalPaymentIterator, error) {

	var minTotalPaymentRule []interface{}
	for _, minTotalPaymentItem := range minTotalPayment {
		minTotalPaymentRule = append(minTotalPaymentRule, minTotalPaymentItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "SetMinTotalPayment", minTotalPaymentRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleSetMinTotalPaymentIterator{contract: _IFFixedSale.contract, event: "SetMinTotalPayment", logs: logs, sub: sub}, nil
}

// WatchSetMinTotalPayment is a free log subscription operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFFixedSale *IFFixedSaleFilterer) WatchSetMinTotalPayment(opts *bind.WatchOpts, sink chan<- *IFFixedSaleSetMinTotalPayment, minTotalPayment []*big.Int) (event.Subscription, error) {

	var minTotalPaymentRule []interface{}
	for _, minTotalPaymentItem := range minTotalPayment {
		minTotalPaymentRule = append(minTotalPaymentRule, minTotalPaymentItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "SetMinTotalPayment", minTotalPaymentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleSetMinTotalPayment)
				if err := _IFFixedSale.contract.UnpackLog(event, "SetMinTotalPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinTotalPayment is a log parse operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFFixedSale *IFFixedSaleFilterer) ParseSetMinTotalPayment(log types.Log) (*IFFixedSaleSetMinTotalPayment, error) {
	event := new(IFFixedSaleSetMinTotalPayment)
	if err := _IFFixedSale.contract.UnpackLog(event, "SetMinTotalPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleSetWhitelistIterator is returned from FilterSetWhitelist and is used to iterate over the raw logs and unpacked data for SetWhitelist events raised by the IFFixedSale contract.
type IFFixedSaleSetWhitelistIterator struct {
	Event *IFFixedSaleSetWhitelist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleSetWhitelistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleSetWhitelist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleSetWhitelist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleSetWhitelistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleSetWhitelistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleSetWhitelist represents a SetWhitelist event raised by the IFFixedSale contract.
type IFFixedSaleSetWhitelist struct {
	WhitelistRootHash [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSetWhitelist is a free log retrieval operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFFixedSale *IFFixedSaleFilterer) FilterSetWhitelist(opts *bind.FilterOpts, whitelistRootHash [][32]byte) (*IFFixedSaleSetWhitelistIterator, error) {

	var whitelistRootHashRule []interface{}
	for _, whitelistRootHashItem := range whitelistRootHash {
		whitelistRootHashRule = append(whitelistRootHashRule, whitelistRootHashItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "SetWhitelist", whitelistRootHashRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleSetWhitelistIterator{contract: _IFFixedSale.contract, event: "SetWhitelist", logs: logs, sub: sub}, nil
}

// WatchSetWhitelist is a free log subscription operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFFixedSale *IFFixedSaleFilterer) WatchSetWhitelist(opts *bind.WatchOpts, sink chan<- *IFFixedSaleSetWhitelist, whitelistRootHash [][32]byte) (event.Subscription, error) {

	var whitelistRootHashRule []interface{}
	for _, whitelistRootHashItem := range whitelistRootHash {
		whitelistRootHashRule = append(whitelistRootHashRule, whitelistRootHashItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "SetWhitelist", whitelistRootHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleSetWhitelist)
				if err := _IFFixedSale.contract.UnpackLog(event, "SetWhitelist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWhitelist is a log parse operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFFixedSale *IFFixedSaleFilterer) ParseSetWhitelist(log types.Log) (*IFFixedSaleSetWhitelist, error) {
	event := new(IFFixedSaleSetWhitelist)
	if err := _IFFixedSale.contract.UnpackLog(event, "SetWhitelist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleSetWhitelistSetterIterator is returned from FilterSetWhitelistSetter and is used to iterate over the raw logs and unpacked data for SetWhitelistSetter events raised by the IFFixedSale contract.
type IFFixedSaleSetWhitelistSetterIterator struct {
	Event *IFFixedSaleSetWhitelistSetter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleSetWhitelistSetterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleSetWhitelistSetter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleSetWhitelistSetter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleSetWhitelistSetterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleSetWhitelistSetterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleSetWhitelistSetter represents a SetWhitelistSetter event raised by the IFFixedSale contract.
type IFFixedSaleSetWhitelistSetter struct {
	WhitelistSetter common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetWhitelistSetter is a free log retrieval operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFFixedSale *IFFixedSaleFilterer) FilterSetWhitelistSetter(opts *bind.FilterOpts, whitelistSetter []common.Address) (*IFFixedSaleSetWhitelistSetterIterator, error) {

	var whitelistSetterRule []interface{}
	for _, whitelistSetterItem := range whitelistSetter {
		whitelistSetterRule = append(whitelistSetterRule, whitelistSetterItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "SetWhitelistSetter", whitelistSetterRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleSetWhitelistSetterIterator{contract: _IFFixedSale.contract, event: "SetWhitelistSetter", logs: logs, sub: sub}, nil
}

// WatchSetWhitelistSetter is a free log subscription operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFFixedSale *IFFixedSaleFilterer) WatchSetWhitelistSetter(opts *bind.WatchOpts, sink chan<- *IFFixedSaleSetWhitelistSetter, whitelistSetter []common.Address) (event.Subscription, error) {

	var whitelistSetterRule []interface{}
	for _, whitelistSetterItem := range whitelistSetter {
		whitelistSetterRule = append(whitelistSetterRule, whitelistSetterItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "SetWhitelistSetter", whitelistSetterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleSetWhitelistSetter)
				if err := _IFFixedSale.contract.UnpackLog(event, "SetWhitelistSetter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWhitelistSetter is a log parse operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFFixedSale *IFFixedSaleFilterer) ParseSetWhitelistSetter(log types.Log) (*IFFixedSaleSetWhitelistSetter, error) {
	event := new(IFFixedSaleSetWhitelistSetter)
	if err := _IFFixedSale.contract.UnpackLog(event, "SetWhitelistSetter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleSetWithdrawDelayIterator is returned from FilterSetWithdrawDelay and is used to iterate over the raw logs and unpacked data for SetWithdrawDelay events raised by the IFFixedSale contract.
type IFFixedSaleSetWithdrawDelayIterator struct {
	Event *IFFixedSaleSetWithdrawDelay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleSetWithdrawDelayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleSetWithdrawDelay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleSetWithdrawDelay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleSetWithdrawDelayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleSetWithdrawDelayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleSetWithdrawDelay represents a SetWithdrawDelay event raised by the IFFixedSale contract.
type IFFixedSaleSetWithdrawDelay struct {
	WithdrawDelay *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetWithdrawDelay is a free log retrieval operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFFixedSale *IFFixedSaleFilterer) FilterSetWithdrawDelay(opts *bind.FilterOpts, withdrawDelay []*big.Int) (*IFFixedSaleSetWithdrawDelayIterator, error) {

	var withdrawDelayRule []interface{}
	for _, withdrawDelayItem := range withdrawDelay {
		withdrawDelayRule = append(withdrawDelayRule, withdrawDelayItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "SetWithdrawDelay", withdrawDelayRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleSetWithdrawDelayIterator{contract: _IFFixedSale.contract, event: "SetWithdrawDelay", logs: logs, sub: sub}, nil
}

// WatchSetWithdrawDelay is a free log subscription operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFFixedSale *IFFixedSaleFilterer) WatchSetWithdrawDelay(opts *bind.WatchOpts, sink chan<- *IFFixedSaleSetWithdrawDelay, withdrawDelay []*big.Int) (event.Subscription, error) {

	var withdrawDelayRule []interface{}
	for _, withdrawDelayItem := range withdrawDelay {
		withdrawDelayRule = append(withdrawDelayRule, withdrawDelayItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "SetWithdrawDelay", withdrawDelayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleSetWithdrawDelay)
				if err := _IFFixedSale.contract.UnpackLog(event, "SetWithdrawDelay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWithdrawDelay is a log parse operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFFixedSale *IFFixedSaleFilterer) ParseSetWithdrawDelay(log types.Log) (*IFFixedSaleSetWithdrawDelay, error) {
	event := new(IFFixedSaleSetWithdrawDelay)
	if err := _IFFixedSale.contract.UnpackLog(event, "SetWithdrawDelay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFFixedSaleWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the IFFixedSale contract.
type IFFixedSaleWithdrawIterator struct {
	Event *IFFixedSaleWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFFixedSaleWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFFixedSaleWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFFixedSaleWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFFixedSaleWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFFixedSaleWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFFixedSaleWithdraw represents a Withdraw event raised by the IFFixedSale contract.
type IFFixedSaleWithdraw struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) FilterWithdraw(opts *bind.FilterOpts, sender []common.Address) (*IFFixedSaleWithdrawIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.FilterLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFFixedSaleWithdrawIterator{contract: _IFFixedSale.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IFFixedSaleWithdraw, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFFixedSale.contract.WatchLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFFixedSaleWithdraw)
				if err := _IFFixedSale.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFFixedSale *IFFixedSaleFilterer) ParseWithdraw(log types.Log) (*IFFixedSaleWithdraw, error) {
	event := new(IFFixedSaleWithdraw)
	if err := _IFFixedSale.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
