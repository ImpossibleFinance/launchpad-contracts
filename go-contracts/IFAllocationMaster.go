// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package IFAllocationMaster

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IFAllocationMasterMetaData contains all meta data concerning the IFAllocationMaster contract.
var IFAllocationMasterMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ActiveRollOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddTrack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"AddTrackCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"AddUserCheckpoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newCount\",\"type\":\"uint32\"}],\"name\":\"BumpSaleCounter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"DisableTrack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"srcTrackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dstTrackId\",\"type\":\"uint24\"}],\"name\":\"SyncTotalWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"srcTrackId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"dstTrackId\",\"type\":\"uint24\"}],\"name\":\"SyncUserWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"activeRollOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contractERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_weightAccrualRate\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"_passiveRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_activeRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint104\",\"name\":\"_maxTotalStake\",\"type\":\"uint104\"}],\"name\":\"addTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"bumpSaleCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"disableTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"getTotalStakeWeight\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"}],\"name\":\"getUserStakeWeight\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasEmergencyWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"numTrackStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"}],\"name\":\"syncTotalWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"}],\"name\":\"syncUserWeight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackActiveRollOvers\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackCheckpointCounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"trackCheckpoints\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint104\",\"name\":\"totalStaked\",\"type\":\"uint104\"},{\"internalType\":\"uint192\",\"name\":\"totalStakeWeight\",\"type\":\"uint192\"},{\"internalType\":\"uint24\",\"name\":\"numFinishedSales\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackCount\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackFinishedSaleTimestamps\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackMaxStakes\",\"outputs\":[{\"internalType\":\"uint104\",\"name\":\"\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trackStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"trackTotalActiveRollOvers\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tracks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contractERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"weightAccrualRate\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"passiveRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"activeRolloverRate\",\"type\":\"uint64\"},{\"internalType\":\"uint104\",\"name\":\"maxTotalStake\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCheckpointCounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"userCheckpoints\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"timestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint104\",\"name\":\"staked\",\"type\":\"uint104\"},{\"internalType\":\"uint192\",\"name\":\"stakeWeight\",\"type\":\"uint192\"},{\"internalType\":\"uint24\",\"name\":\"numFinishedSales\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// IFAllocationMasterABI is the input ABI used to generate the binding from.
// Deprecated: Use IFAllocationMasterMetaData.ABI instead.
var IFAllocationMasterABI = IFAllocationMasterMetaData.ABI

// IFAllocationMasterBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IFAllocationMasterMetaData.Bin instead.
var IFAllocationMasterBin = IFAllocationMasterMetaData.Bin

// DeployIFAllocationMaster deploys a new Ethereum contract, binding an instance of IFAllocationMaster to it.
func DeployIFAllocationMaster(auth *bind.TransactOpts, backend bind.ContractBackend, _messageBus common.Address) (common.Address, *types.Transaction, *IFAllocationMaster, error) {
	parsed, err := IFAllocationMasterMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IFAllocationMasterBin), backend, _messageBus)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IFAllocationMaster{IFAllocationMasterCaller: IFAllocationMasterCaller{contract: contract}, IFAllocationMasterTransactor: IFAllocationMasterTransactor{contract: contract}, IFAllocationMasterFilterer: IFAllocationMasterFilterer{contract: contract}}, nil
}

// IFAllocationMaster is an auto generated Go binding around an Ethereum contract.
type IFAllocationMaster struct {
	IFAllocationMasterCaller     // Read-only binding to the contract
	IFAllocationMasterTransactor // Write-only binding to the contract
	IFAllocationMasterFilterer   // Log filterer for contract events
}

// IFAllocationMasterCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFAllocationMasterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationMasterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFAllocationMasterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationMasterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFAllocationMasterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationMasterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFAllocationMasterSession struct {
	Contract     *IFAllocationMaster // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IFAllocationMasterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFAllocationMasterCallerSession struct {
	Contract *IFAllocationMasterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IFAllocationMasterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFAllocationMasterTransactorSession struct {
	Contract     *IFAllocationMasterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IFAllocationMasterRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFAllocationMasterRaw struct {
	Contract *IFAllocationMaster // Generic contract binding to access the raw methods on
}

// IFAllocationMasterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFAllocationMasterCallerRaw struct {
	Contract *IFAllocationMasterCaller // Generic read-only contract binding to access the raw methods on
}

// IFAllocationMasterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFAllocationMasterTransactorRaw struct {
	Contract *IFAllocationMasterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFAllocationMaster creates a new instance of IFAllocationMaster, bound to a specific deployed contract.
func NewIFAllocationMaster(address common.Address, backend bind.ContractBackend) (*IFAllocationMaster, error) {
	contract, err := bindIFAllocationMaster(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMaster{IFAllocationMasterCaller: IFAllocationMasterCaller{contract: contract}, IFAllocationMasterTransactor: IFAllocationMasterTransactor{contract: contract}, IFAllocationMasterFilterer: IFAllocationMasterFilterer{contract: contract}}, nil
}

// NewIFAllocationMasterCaller creates a new read-only instance of IFAllocationMaster, bound to a specific deployed contract.
func NewIFAllocationMasterCaller(address common.Address, caller bind.ContractCaller) (*IFAllocationMasterCaller, error) {
	contract, err := bindIFAllocationMaster(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterCaller{contract: contract}, nil
}

// NewIFAllocationMasterTransactor creates a new write-only instance of IFAllocationMaster, bound to a specific deployed contract.
func NewIFAllocationMasterTransactor(address common.Address, transactor bind.ContractTransactor) (*IFAllocationMasterTransactor, error) {
	contract, err := bindIFAllocationMaster(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterTransactor{contract: contract}, nil
}

// NewIFAllocationMasterFilterer creates a new log filterer instance of IFAllocationMaster, bound to a specific deployed contract.
func NewIFAllocationMasterFilterer(address common.Address, filterer bind.ContractFilterer) (*IFAllocationMasterFilterer, error) {
	contract, err := bindIFAllocationMaster(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterFilterer{contract: contract}, nil
}

// bindIFAllocationMaster binds a generic wrapper to an already deployed contract.
func bindIFAllocationMaster(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFAllocationMasterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFAllocationMaster *IFAllocationMasterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFAllocationMaster.Contract.IFAllocationMasterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFAllocationMaster *IFAllocationMasterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.IFAllocationMasterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFAllocationMaster *IFAllocationMasterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.IFAllocationMasterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFAllocationMaster *IFAllocationMasterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFAllocationMaster.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFAllocationMaster *IFAllocationMasterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFAllocationMaster *IFAllocationMasterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.contract.Transact(opts, method, params...)
}

// GetTotalStakeWeight is a free data retrieval call binding the contract method 0x5301f3ad.
//
// Solidity: function getTotalStakeWeight(uint24 trackId, uint80 timestamp) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCaller) GetTotalStakeWeight(opts *bind.CallOpts, trackId *big.Int, timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "getTotalStakeWeight", trackId, timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeWeight is a free data retrieval call binding the contract method 0x5301f3ad.
//
// Solidity: function getTotalStakeWeight(uint24 trackId, uint80 timestamp) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterSession) GetTotalStakeWeight(trackId *big.Int, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.GetTotalStakeWeight(&_IFAllocationMaster.CallOpts, trackId, timestamp)
}

// GetTotalStakeWeight is a free data retrieval call binding the contract method 0x5301f3ad.
//
// Solidity: function getTotalStakeWeight(uint24 trackId, uint80 timestamp) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) GetTotalStakeWeight(trackId *big.Int, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.GetTotalStakeWeight(&_IFAllocationMaster.CallOpts, trackId, timestamp)
}

// GetUserStakeWeight is a free data retrieval call binding the contract method 0x7db85246.
//
// Solidity: function getUserStakeWeight(uint24 trackId, address user, uint80 timestamp) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCaller) GetUserStakeWeight(opts *bind.CallOpts, trackId *big.Int, user common.Address, timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "getUserStakeWeight", trackId, user, timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserStakeWeight is a free data retrieval call binding the contract method 0x7db85246.
//
// Solidity: function getUserStakeWeight(uint24 trackId, address user, uint80 timestamp) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterSession) GetUserStakeWeight(trackId *big.Int, user common.Address, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.GetUserStakeWeight(&_IFAllocationMaster.CallOpts, trackId, user, timestamp)
}

// GetUserStakeWeight is a free data retrieval call binding the contract method 0x7db85246.
//
// Solidity: function getUserStakeWeight(uint24 trackId, address user, uint80 timestamp) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) GetUserStakeWeight(trackId *big.Int, user common.Address, timestamp *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.GetUserStakeWeight(&_IFAllocationMaster.CallOpts, trackId, user, timestamp)
}

// HasEmergencyWithdrawn is a free data retrieval call binding the contract method 0x1ee93a3a.
//
// Solidity: function hasEmergencyWithdrawn(uint24 , address ) view returns(bool)
func (_IFAllocationMaster *IFAllocationMasterCaller) HasEmergencyWithdrawn(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "hasEmergencyWithdrawn", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEmergencyWithdrawn is a free data retrieval call binding the contract method 0x1ee93a3a.
//
// Solidity: function hasEmergencyWithdrawn(uint24 , address ) view returns(bool)
func (_IFAllocationMaster *IFAllocationMasterSession) HasEmergencyWithdrawn(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _IFAllocationMaster.Contract.HasEmergencyWithdrawn(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// HasEmergencyWithdrawn is a free data retrieval call binding the contract method 0x1ee93a3a.
//
// Solidity: function hasEmergencyWithdrawn(uint24 , address ) view returns(bool)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) HasEmergencyWithdrawn(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _IFAllocationMaster.Contract.HasEmergencyWithdrawn(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_IFAllocationMaster *IFAllocationMasterCaller) MessageBus(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "messageBus")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_IFAllocationMaster *IFAllocationMasterSession) MessageBus() (common.Address, error) {
	return _IFAllocationMaster.Contract.MessageBus(&_IFAllocationMaster.CallOpts)
}

// MessageBus is a free data retrieval call binding the contract method 0xa1a227fa.
//
// Solidity: function messageBus() view returns(address)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) MessageBus() (common.Address, error) {
	return _IFAllocationMaster.Contract.MessageBus(&_IFAllocationMaster.CallOpts)
}

// NumTrackStakers is a free data retrieval call binding the contract method 0x0ee4d197.
//
// Solidity: function numTrackStakers(uint24 ) view returns(uint256)
func (_IFAllocationMaster *IFAllocationMasterCaller) NumTrackStakers(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "numTrackStakers", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumTrackStakers is a free data retrieval call binding the contract method 0x0ee4d197.
//
// Solidity: function numTrackStakers(uint24 ) view returns(uint256)
func (_IFAllocationMaster *IFAllocationMasterSession) NumTrackStakers(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.NumTrackStakers(&_IFAllocationMaster.CallOpts, arg0)
}

// NumTrackStakers is a free data retrieval call binding the contract method 0x0ee4d197.
//
// Solidity: function numTrackStakers(uint24 ) view returns(uint256)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) NumTrackStakers(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.NumTrackStakers(&_IFAllocationMaster.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationMaster *IFAllocationMasterCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationMaster *IFAllocationMasterSession) Owner() (common.Address, error) {
	return _IFAllocationMaster.Contract.Owner(&_IFAllocationMaster.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) Owner() (common.Address, error) {
	return _IFAllocationMaster.Contract.Owner(&_IFAllocationMaster.CallOpts)
}

// TrackActiveRollOvers is a free data retrieval call binding the contract method 0x83e64d94.
//
// Solidity: function trackActiveRollOvers(uint24 , address , uint24 ) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackActiveRollOvers(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackActiveRollOvers", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackActiveRollOvers is a free data retrieval call binding the contract method 0x83e64d94.
//
// Solidity: function trackActiveRollOvers(uint24 , address , uint24 ) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackActiveRollOvers(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackActiveRollOvers(&_IFAllocationMaster.CallOpts, arg0, arg1, arg2)
}

// TrackActiveRollOvers is a free data retrieval call binding the contract method 0x83e64d94.
//
// Solidity: function trackActiveRollOvers(uint24 , address , uint24 ) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackActiveRollOvers(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackActiveRollOvers(&_IFAllocationMaster.CallOpts, arg0, arg1, arg2)
}

// TrackCheckpointCounts is a free data retrieval call binding the contract method 0x7e14a790.
//
// Solidity: function trackCheckpointCounts(uint24 ) view returns(uint32)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackCheckpointCounts(opts *bind.CallOpts, arg0 *big.Int) (uint32, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackCheckpointCounts", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// TrackCheckpointCounts is a free data retrieval call binding the contract method 0x7e14a790.
//
// Solidity: function trackCheckpointCounts(uint24 ) view returns(uint32)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackCheckpointCounts(arg0 *big.Int) (uint32, error) {
	return _IFAllocationMaster.Contract.TrackCheckpointCounts(&_IFAllocationMaster.CallOpts, arg0)
}

// TrackCheckpointCounts is a free data retrieval call binding the contract method 0x7e14a790.
//
// Solidity: function trackCheckpointCounts(uint24 ) view returns(uint32)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackCheckpointCounts(arg0 *big.Int) (uint32, error) {
	return _IFAllocationMaster.Contract.TrackCheckpointCounts(&_IFAllocationMaster.CallOpts, arg0)
}

// TrackCheckpoints is a free data retrieval call binding the contract method 0xfe9d4747.
//
// Solidity: function trackCheckpoints(uint24 , uint32 ) view returns(uint80 timestamp, uint104 totalStaked, uint192 totalStakeWeight, uint24 numFinishedSales)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackCheckpoints(opts *bind.CallOpts, arg0 *big.Int, arg1 uint32) (struct {
	Timestamp        *big.Int
	TotalStaked      *big.Int
	TotalStakeWeight *big.Int
	NumFinishedSales *big.Int
}, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackCheckpoints", arg0, arg1)

	outstruct := new(struct {
		Timestamp        *big.Int
		TotalStaked      *big.Int
		TotalStakeWeight *big.Int
		NumFinishedSales *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TotalStaked = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalStakeWeight = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.NumFinishedSales = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TrackCheckpoints is a free data retrieval call binding the contract method 0xfe9d4747.
//
// Solidity: function trackCheckpoints(uint24 , uint32 ) view returns(uint80 timestamp, uint104 totalStaked, uint192 totalStakeWeight, uint24 numFinishedSales)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackCheckpoints(arg0 *big.Int, arg1 uint32) (struct {
	Timestamp        *big.Int
	TotalStaked      *big.Int
	TotalStakeWeight *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMaster.Contract.TrackCheckpoints(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// TrackCheckpoints is a free data retrieval call binding the contract method 0xfe9d4747.
//
// Solidity: function trackCheckpoints(uint24 , uint32 ) view returns(uint80 timestamp, uint104 totalStaked, uint192 totalStakeWeight, uint24 numFinishedSales)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackCheckpoints(arg0 *big.Int, arg1 uint32) (struct {
	Timestamp        *big.Int
	TotalStaked      *big.Int
	TotalStakeWeight *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMaster.Contract.TrackCheckpoints(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// TrackCount is a free data retrieval call binding the contract method 0xab35678c.
//
// Solidity: function trackCount() view returns(uint24)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackCount is a free data retrieval call binding the contract method 0xab35678c.
//
// Solidity: function trackCount() view returns(uint24)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackCount() (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackCount(&_IFAllocationMaster.CallOpts)
}

// TrackCount is a free data retrieval call binding the contract method 0xab35678c.
//
// Solidity: function trackCount() view returns(uint24)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackCount() (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackCount(&_IFAllocationMaster.CallOpts)
}

// TrackDisabled is a free data retrieval call binding the contract method 0xd4799a06.
//
// Solidity: function trackDisabled(uint24 ) view returns(bool)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackDisabled(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackDisabled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TrackDisabled is a free data retrieval call binding the contract method 0xd4799a06.
//
// Solidity: function trackDisabled(uint24 ) view returns(bool)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackDisabled(arg0 *big.Int) (bool, error) {
	return _IFAllocationMaster.Contract.TrackDisabled(&_IFAllocationMaster.CallOpts, arg0)
}

// TrackDisabled is a free data retrieval call binding the contract method 0xd4799a06.
//
// Solidity: function trackDisabled(uint24 ) view returns(bool)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackDisabled(arg0 *big.Int) (bool, error) {
	return _IFAllocationMaster.Contract.TrackDisabled(&_IFAllocationMaster.CallOpts, arg0)
}

// TrackFinishedSaleTimestamps is a free data retrieval call binding the contract method 0x00c40584.
//
// Solidity: function trackFinishedSaleTimestamps(uint24 , uint24 ) view returns(uint80)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackFinishedSaleTimestamps(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackFinishedSaleTimestamps", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackFinishedSaleTimestamps is a free data retrieval call binding the contract method 0x00c40584.
//
// Solidity: function trackFinishedSaleTimestamps(uint24 , uint24 ) view returns(uint80)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackFinishedSaleTimestamps(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackFinishedSaleTimestamps(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// TrackFinishedSaleTimestamps is a free data retrieval call binding the contract method 0x00c40584.
//
// Solidity: function trackFinishedSaleTimestamps(uint24 , uint24 ) view returns(uint80)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackFinishedSaleTimestamps(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackFinishedSaleTimestamps(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// TrackMaxStakes is a free data retrieval call binding the contract method 0x3fceccbe.
//
// Solidity: function trackMaxStakes(uint24 ) view returns(uint104)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackMaxStakes(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackMaxStakes", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackMaxStakes is a free data retrieval call binding the contract method 0x3fceccbe.
//
// Solidity: function trackMaxStakes(uint24 ) view returns(uint104)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackMaxStakes(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackMaxStakes(&_IFAllocationMaster.CallOpts, arg0)
}

// TrackMaxStakes is a free data retrieval call binding the contract method 0x3fceccbe.
//
// Solidity: function trackMaxStakes(uint24 ) view returns(uint104)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackMaxStakes(arg0 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackMaxStakes(&_IFAllocationMaster.CallOpts, arg0)
}

// TrackStakers is a free data retrieval call binding the contract method 0x92721276.
//
// Solidity: function trackStakers(uint24 , uint256 ) view returns(address)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackStakers(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackStakers", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TrackStakers is a free data retrieval call binding the contract method 0x92721276.
//
// Solidity: function trackStakers(uint24 , uint256 ) view returns(address)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackStakers(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IFAllocationMaster.Contract.TrackStakers(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// TrackStakers is a free data retrieval call binding the contract method 0x92721276.
//
// Solidity: function trackStakers(uint24 , uint256 ) view returns(address)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackStakers(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _IFAllocationMaster.Contract.TrackStakers(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// TrackTotalActiveRollOvers is a free data retrieval call binding the contract method 0xb33f517a.
//
// Solidity: function trackTotalActiveRollOvers(uint24 , uint24 ) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCaller) TrackTotalActiveRollOvers(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "trackTotalActiveRollOvers", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackTotalActiveRollOvers is a free data retrieval call binding the contract method 0xb33f517a.
//
// Solidity: function trackTotalActiveRollOvers(uint24 , uint24 ) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterSession) TrackTotalActiveRollOvers(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackTotalActiveRollOvers(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// TrackTotalActiveRollOvers is a free data retrieval call binding the contract method 0xb33f517a.
//
// Solidity: function trackTotalActiveRollOvers(uint24 , uint24 ) view returns(uint192)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) TrackTotalActiveRollOvers(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _IFAllocationMaster.Contract.TrackTotalActiveRollOvers(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// Tracks is a free data retrieval call binding the contract method 0xa2e34586.
//
// Solidity: function tracks(uint256 ) view returns(string name, address stakeToken, uint24 weightAccrualRate, uint64 passiveRolloverRate, uint64 activeRolloverRate, uint104 maxTotalStake)
func (_IFAllocationMaster *IFAllocationMasterCaller) Tracks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name                string
	StakeToken          common.Address
	WeightAccrualRate   *big.Int
	PassiveRolloverRate uint64
	ActiveRolloverRate  uint64
	MaxTotalStake       *big.Int
}, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "tracks", arg0)

	outstruct := new(struct {
		Name                string
		StakeToken          common.Address
		WeightAccrualRate   *big.Int
		PassiveRolloverRate uint64
		ActiveRolloverRate  uint64
		MaxTotalStake       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.StakeToken = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.WeightAccrualRate = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PassiveRolloverRate = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.ActiveRolloverRate = *abi.ConvertType(out[4], new(uint64)).(*uint64)
	outstruct.MaxTotalStake = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Tracks is a free data retrieval call binding the contract method 0xa2e34586.
//
// Solidity: function tracks(uint256 ) view returns(string name, address stakeToken, uint24 weightAccrualRate, uint64 passiveRolloverRate, uint64 activeRolloverRate, uint104 maxTotalStake)
func (_IFAllocationMaster *IFAllocationMasterSession) Tracks(arg0 *big.Int) (struct {
	Name                string
	StakeToken          common.Address
	WeightAccrualRate   *big.Int
	PassiveRolloverRate uint64
	ActiveRolloverRate  uint64
	MaxTotalStake       *big.Int
}, error) {
	return _IFAllocationMaster.Contract.Tracks(&_IFAllocationMaster.CallOpts, arg0)
}

// Tracks is a free data retrieval call binding the contract method 0xa2e34586.
//
// Solidity: function tracks(uint256 ) view returns(string name, address stakeToken, uint24 weightAccrualRate, uint64 passiveRolloverRate, uint64 activeRolloverRate, uint104 maxTotalStake)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) Tracks(arg0 *big.Int) (struct {
	Name                string
	StakeToken          common.Address
	WeightAccrualRate   *big.Int
	PassiveRolloverRate uint64
	ActiveRolloverRate  uint64
	MaxTotalStake       *big.Int
}, error) {
	return _IFAllocationMaster.Contract.Tracks(&_IFAllocationMaster.CallOpts, arg0)
}

// UserCheckpointCounts is a free data retrieval call binding the contract method 0x2f385bcb.
//
// Solidity: function userCheckpointCounts(uint24 , address ) view returns(uint32)
func (_IFAllocationMaster *IFAllocationMasterCaller) UserCheckpointCounts(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (uint32, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "userCheckpointCounts", arg0, arg1)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// UserCheckpointCounts is a free data retrieval call binding the contract method 0x2f385bcb.
//
// Solidity: function userCheckpointCounts(uint24 , address ) view returns(uint32)
func (_IFAllocationMaster *IFAllocationMasterSession) UserCheckpointCounts(arg0 *big.Int, arg1 common.Address) (uint32, error) {
	return _IFAllocationMaster.Contract.UserCheckpointCounts(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// UserCheckpointCounts is a free data retrieval call binding the contract method 0x2f385bcb.
//
// Solidity: function userCheckpointCounts(uint24 , address ) view returns(uint32)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) UserCheckpointCounts(arg0 *big.Int, arg1 common.Address) (uint32, error) {
	return _IFAllocationMaster.Contract.UserCheckpointCounts(&_IFAllocationMaster.CallOpts, arg0, arg1)
}

// UserCheckpoints is a free data retrieval call binding the contract method 0x25cab7f9.
//
// Solidity: function userCheckpoints(uint24 , address , uint32 ) view returns(uint80 timestamp, uint104 staked, uint192 stakeWeight, uint24 numFinishedSales)
func (_IFAllocationMaster *IFAllocationMasterCaller) UserCheckpoints(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 uint32) (struct {
	Timestamp        *big.Int
	Staked           *big.Int
	StakeWeight      *big.Int
	NumFinishedSales *big.Int
}, error) {
	var out []interface{}
	err := _IFAllocationMaster.contract.Call(opts, &out, "userCheckpoints", arg0, arg1, arg2)

	outstruct := new(struct {
		Timestamp        *big.Int
		Staked           *big.Int
		StakeWeight      *big.Int
		NumFinishedSales *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Timestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Staked = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.StakeWeight = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.NumFinishedSales = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserCheckpoints is a free data retrieval call binding the contract method 0x25cab7f9.
//
// Solidity: function userCheckpoints(uint24 , address , uint32 ) view returns(uint80 timestamp, uint104 staked, uint192 stakeWeight, uint24 numFinishedSales)
func (_IFAllocationMaster *IFAllocationMasterSession) UserCheckpoints(arg0 *big.Int, arg1 common.Address, arg2 uint32) (struct {
	Timestamp        *big.Int
	Staked           *big.Int
	StakeWeight      *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMaster.Contract.UserCheckpoints(&_IFAllocationMaster.CallOpts, arg0, arg1, arg2)
}

// UserCheckpoints is a free data retrieval call binding the contract method 0x25cab7f9.
//
// Solidity: function userCheckpoints(uint24 , address , uint32 ) view returns(uint80 timestamp, uint104 staked, uint192 stakeWeight, uint24 numFinishedSales)
func (_IFAllocationMaster *IFAllocationMasterCallerSession) UserCheckpoints(arg0 *big.Int, arg1 common.Address, arg2 uint32) (struct {
	Timestamp        *big.Int
	Staked           *big.Int
	StakeWeight      *big.Int
	NumFinishedSales *big.Int
}, error) {
	return _IFAllocationMaster.Contract.UserCheckpoints(&_IFAllocationMaster.CallOpts, arg0, arg1, arg2)
}

// ActiveRollOver is a paid mutator transaction binding the contract method 0x85e94209.
//
// Solidity: function activeRollOver(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) ActiveRollOver(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "activeRollOver", trackId)
}

// ActiveRollOver is a paid mutator transaction binding the contract method 0x85e94209.
//
// Solidity: function activeRollOver(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) ActiveRollOver(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.ActiveRollOver(&_IFAllocationMaster.TransactOpts, trackId)
}

// ActiveRollOver is a paid mutator transaction binding the contract method 0x85e94209.
//
// Solidity: function activeRollOver(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) ActiveRollOver(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.ActiveRollOver(&_IFAllocationMaster.TransactOpts, trackId)
}

// AddTrack is a paid mutator transaction binding the contract method 0x26df01e4.
//
// Solidity: function addTrack(string name, address stakeToken, uint24 _weightAccrualRate, uint64 _passiveRolloverRate, uint64 _activeRolloverRate, uint104 _maxTotalStake) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) AddTrack(opts *bind.TransactOpts, name string, stakeToken common.Address, _weightAccrualRate *big.Int, _passiveRolloverRate uint64, _activeRolloverRate uint64, _maxTotalStake *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "addTrack", name, stakeToken, _weightAccrualRate, _passiveRolloverRate, _activeRolloverRate, _maxTotalStake)
}

// AddTrack is a paid mutator transaction binding the contract method 0x26df01e4.
//
// Solidity: function addTrack(string name, address stakeToken, uint24 _weightAccrualRate, uint64 _passiveRolloverRate, uint64 _activeRolloverRate, uint104 _maxTotalStake) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) AddTrack(name string, stakeToken common.Address, _weightAccrualRate *big.Int, _passiveRolloverRate uint64, _activeRolloverRate uint64, _maxTotalStake *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.AddTrack(&_IFAllocationMaster.TransactOpts, name, stakeToken, _weightAccrualRate, _passiveRolloverRate, _activeRolloverRate, _maxTotalStake)
}

// AddTrack is a paid mutator transaction binding the contract method 0x26df01e4.
//
// Solidity: function addTrack(string name, address stakeToken, uint24 _weightAccrualRate, uint64 _passiveRolloverRate, uint64 _activeRolloverRate, uint104 _maxTotalStake) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) AddTrack(name string, stakeToken common.Address, _weightAccrualRate *big.Int, _passiveRolloverRate uint64, _activeRolloverRate uint64, _maxTotalStake *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.AddTrack(&_IFAllocationMaster.TransactOpts, name, stakeToken, _weightAccrualRate, _passiveRolloverRate, _activeRolloverRate, _maxTotalStake)
}

// BumpSaleCounter is a paid mutator transaction binding the contract method 0xec331ee8.
//
// Solidity: function bumpSaleCounter(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) BumpSaleCounter(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "bumpSaleCounter", trackId)
}

// BumpSaleCounter is a paid mutator transaction binding the contract method 0xec331ee8.
//
// Solidity: function bumpSaleCounter(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) BumpSaleCounter(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.BumpSaleCounter(&_IFAllocationMaster.TransactOpts, trackId)
}

// BumpSaleCounter is a paid mutator transaction binding the contract method 0xec331ee8.
//
// Solidity: function bumpSaleCounter(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) BumpSaleCounter(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.BumpSaleCounter(&_IFAllocationMaster.TransactOpts, trackId)
}

// DisableTrack is a paid mutator transaction binding the contract method 0x0a29ffd9.
//
// Solidity: function disableTrack(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) DisableTrack(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "disableTrack", trackId)
}

// DisableTrack is a paid mutator transaction binding the contract method 0x0a29ffd9.
//
// Solidity: function disableTrack(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) DisableTrack(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.DisableTrack(&_IFAllocationMaster.TransactOpts, trackId)
}

// DisableTrack is a paid mutator transaction binding the contract method 0x0a29ffd9.
//
// Solidity: function disableTrack(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) DisableTrack(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.DisableTrack(&_IFAllocationMaster.TransactOpts, trackId)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xdea47071.
//
// Solidity: function emergencyWithdraw(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) EmergencyWithdraw(opts *bind.TransactOpts, trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "emergencyWithdraw", trackId)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xdea47071.
//
// Solidity: function emergencyWithdraw(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) EmergencyWithdraw(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.EmergencyWithdraw(&_IFAllocationMaster.TransactOpts, trackId)
}

// EmergencyWithdraw is a paid mutator transaction binding the contract method 0xdea47071.
//
// Solidity: function emergencyWithdraw(uint24 trackId) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) EmergencyWithdraw(trackId *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.EmergencyWithdraw(&_IFAllocationMaster.TransactOpts, trackId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationMaster *IFAllocationMasterSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.RenounceOwnership(&_IFAllocationMaster.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.RenounceOwnership(&_IFAllocationMaster.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0x770c5c12.
//
// Solidity: function stake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) Stake(opts *bind.TransactOpts, trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "stake", trackId, amount)
}

// Stake is a paid mutator transaction binding the contract method 0x770c5c12.
//
// Solidity: function stake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) Stake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.Stake(&_IFAllocationMaster.TransactOpts, trackId, amount)
}

// Stake is a paid mutator transaction binding the contract method 0x770c5c12.
//
// Solidity: function stake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) Stake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.Stake(&_IFAllocationMaster.TransactOpts, trackId, amount)
}

// SyncTotalWeight is a paid mutator transaction binding the contract method 0x185242b0.
//
// Solidity: function syncTotalWeight(address receiver, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) SyncTotalWeight(opts *bind.TransactOpts, receiver common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "syncTotalWeight", receiver, trackId, timestamp, dstChainId)
}

// SyncTotalWeight is a paid mutator transaction binding the contract method 0x185242b0.
//
// Solidity: function syncTotalWeight(address receiver, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMaster *IFAllocationMasterSession) SyncTotalWeight(receiver common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.SyncTotalWeight(&_IFAllocationMaster.TransactOpts, receiver, trackId, timestamp, dstChainId)
}

// SyncTotalWeight is a paid mutator transaction binding the contract method 0x185242b0.
//
// Solidity: function syncTotalWeight(address receiver, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) SyncTotalWeight(receiver common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.SyncTotalWeight(&_IFAllocationMaster.TransactOpts, receiver, trackId, timestamp, dstChainId)
}

// SyncUserWeight is a paid mutator transaction binding the contract method 0x2f4fe782.
//
// Solidity: function syncUserWeight(address receiver, address[] users, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) SyncUserWeight(opts *bind.TransactOpts, receiver common.Address, users []common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "syncUserWeight", receiver, users, trackId, timestamp, dstChainId)
}

// SyncUserWeight is a paid mutator transaction binding the contract method 0x2f4fe782.
//
// Solidity: function syncUserWeight(address receiver, address[] users, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMaster *IFAllocationMasterSession) SyncUserWeight(receiver common.Address, users []common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.SyncUserWeight(&_IFAllocationMaster.TransactOpts, receiver, users, trackId, timestamp, dstChainId)
}

// SyncUserWeight is a paid mutator transaction binding the contract method 0x2f4fe782.
//
// Solidity: function syncUserWeight(address receiver, address[] users, uint24 trackId, uint80 timestamp, uint64 dstChainId) payable returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) SyncUserWeight(receiver common.Address, users []common.Address, trackId *big.Int, timestamp *big.Int, dstChainId uint64) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.SyncUserWeight(&_IFAllocationMaster.TransactOpts, receiver, users, trackId, timestamp, dstChainId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.TransferOwnership(&_IFAllocationMaster.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.TransferOwnership(&_IFAllocationMaster.TransactOpts, newOwner)
}

// Unstake is a paid mutator transaction binding the contract method 0xcbc50245.
//
// Solidity: function unstake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactor) Unstake(opts *bind.TransactOpts, trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.contract.Transact(opts, "unstake", trackId, amount)
}

// Unstake is a paid mutator transaction binding the contract method 0xcbc50245.
//
// Solidity: function unstake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMaster *IFAllocationMasterSession) Unstake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.Unstake(&_IFAllocationMaster.TransactOpts, trackId, amount)
}

// Unstake is a paid mutator transaction binding the contract method 0xcbc50245.
//
// Solidity: function unstake(uint24 trackId, uint104 amount) returns()
func (_IFAllocationMaster *IFAllocationMasterTransactorSession) Unstake(trackId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationMaster.Contract.Unstake(&_IFAllocationMaster.TransactOpts, trackId, amount)
}

// IFAllocationMasterActiveRollOverIterator is returned from FilterActiveRollOver and is used to iterate over the raw logs and unpacked data for ActiveRollOver events raised by the IFAllocationMaster contract.
type IFAllocationMasterActiveRollOverIterator struct {
	Event *IFAllocationMasterActiveRollOver // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterActiveRollOverIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterActiveRollOver)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterActiveRollOver)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterActiveRollOverIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterActiveRollOverIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterActiveRollOver represents a ActiveRollOver event raised by the IFAllocationMaster contract.
type IFAllocationMasterActiveRollOver struct {
	TrackId *big.Int
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterActiveRollOver is a free log retrieval operation binding the contract event 0x2ad99c2ef3fb067831abd0a8620f3b2ddda1e7be89576a286edea06e048cf3dc.
//
// Solidity: event ActiveRollOver(uint24 indexed trackId, address indexed user)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterActiveRollOver(opts *bind.FilterOpts, trackId []*big.Int, user []common.Address) (*IFAllocationMasterActiveRollOverIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "ActiveRollOver", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterActiveRollOverIterator{contract: _IFAllocationMaster.contract, event: "ActiveRollOver", logs: logs, sub: sub}, nil
}

// WatchActiveRollOver is a free log subscription operation binding the contract event 0x2ad99c2ef3fb067831abd0a8620f3b2ddda1e7be89576a286edea06e048cf3dc.
//
// Solidity: event ActiveRollOver(uint24 indexed trackId, address indexed user)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchActiveRollOver(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterActiveRollOver, trackId []*big.Int, user []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "ActiveRollOver", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterActiveRollOver)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "ActiveRollOver", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseActiveRollOver is a log parse operation binding the contract event 0x2ad99c2ef3fb067831abd0a8620f3b2ddda1e7be89576a286edea06e048cf3dc.
//
// Solidity: event ActiveRollOver(uint24 indexed trackId, address indexed user)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseActiveRollOver(log types.Log) (*IFAllocationMasterActiveRollOver, error) {
	event := new(IFAllocationMasterActiveRollOver)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "ActiveRollOver", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterAddTrackIterator is returned from FilterAddTrack and is used to iterate over the raw logs and unpacked data for AddTrack events raised by the IFAllocationMaster contract.
type IFAllocationMasterAddTrackIterator struct {
	Event *IFAllocationMasterAddTrack // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterAddTrackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterAddTrack)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterAddTrack)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterAddTrackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterAddTrackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterAddTrack represents a AddTrack event raised by the IFAllocationMaster contract.
type IFAllocationMasterAddTrack struct {
	Name  common.Hash
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddTrack is a free log retrieval operation binding the contract event 0x1e50e9757b681e9008a480e25488ddd40b47b5295b68ae5f6d9c7204377e5b3b.
//
// Solidity: event AddTrack(string indexed name, address indexed token)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterAddTrack(opts *bind.FilterOpts, name []string, token []common.Address) (*IFAllocationMasterAddTrackIterator, error) {

	var nameRule []interface{}
	for _, nameItem := range name {
		nameRule = append(nameRule, nameItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "AddTrack", nameRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterAddTrackIterator{contract: _IFAllocationMaster.contract, event: "AddTrack", logs: logs, sub: sub}, nil
}

// WatchAddTrack is a free log subscription operation binding the contract event 0x1e50e9757b681e9008a480e25488ddd40b47b5295b68ae5f6d9c7204377e5b3b.
//
// Solidity: event AddTrack(string indexed name, address indexed token)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchAddTrack(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterAddTrack, name []string, token []common.Address) (event.Subscription, error) {

	var nameRule []interface{}
	for _, nameItem := range name {
		nameRule = append(nameRule, nameItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "AddTrack", nameRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterAddTrack)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "AddTrack", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddTrack is a log parse operation binding the contract event 0x1e50e9757b681e9008a480e25488ddd40b47b5295b68ae5f6d9c7204377e5b3b.
//
// Solidity: event AddTrack(string indexed name, address indexed token)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseAddTrack(log types.Log) (*IFAllocationMasterAddTrack, error) {
	event := new(IFAllocationMasterAddTrack)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "AddTrack", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterAddTrackCheckpointIterator is returned from FilterAddTrackCheckpoint and is used to iterate over the raw logs and unpacked data for AddTrackCheckpoint events raised by the IFAllocationMaster contract.
type IFAllocationMasterAddTrackCheckpointIterator struct {
	Event *IFAllocationMasterAddTrackCheckpoint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterAddTrackCheckpointIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterAddTrackCheckpoint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterAddTrackCheckpoint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterAddTrackCheckpointIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterAddTrackCheckpointIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterAddTrackCheckpoint represents a AddTrackCheckpoint event raised by the IFAllocationMaster contract.
type IFAllocationMasterAddTrackCheckpoint struct {
	TrackId   *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddTrackCheckpoint is a free log retrieval operation binding the contract event 0xbae21b9ce1f492a8affaa603b56fe9c921dceb290c3a3c11815c26b6e6e67fc3.
//
// Solidity: event AddTrackCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterAddTrackCheckpoint(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterAddTrackCheckpointIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "AddTrackCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterAddTrackCheckpointIterator{contract: _IFAllocationMaster.contract, event: "AddTrackCheckpoint", logs: logs, sub: sub}, nil
}

// WatchAddTrackCheckpoint is a free log subscription operation binding the contract event 0xbae21b9ce1f492a8affaa603b56fe9c921dceb290c3a3c11815c26b6e6e67fc3.
//
// Solidity: event AddTrackCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchAddTrackCheckpoint(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterAddTrackCheckpoint, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "AddTrackCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterAddTrackCheckpoint)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "AddTrackCheckpoint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddTrackCheckpoint is a log parse operation binding the contract event 0xbae21b9ce1f492a8affaa603b56fe9c921dceb290c3a3c11815c26b6e6e67fc3.
//
// Solidity: event AddTrackCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseAddTrackCheckpoint(log types.Log) (*IFAllocationMasterAddTrackCheckpoint, error) {
	event := new(IFAllocationMasterAddTrackCheckpoint)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "AddTrackCheckpoint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterAddUserCheckpointIterator is returned from FilterAddUserCheckpoint and is used to iterate over the raw logs and unpacked data for AddUserCheckpoint events raised by the IFAllocationMaster contract.
type IFAllocationMasterAddUserCheckpointIterator struct {
	Event *IFAllocationMasterAddUserCheckpoint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterAddUserCheckpointIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterAddUserCheckpoint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterAddUserCheckpoint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterAddUserCheckpointIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterAddUserCheckpointIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterAddUserCheckpoint represents a AddUserCheckpoint event raised by the IFAllocationMaster contract.
type IFAllocationMasterAddUserCheckpoint struct {
	TrackId   *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddUserCheckpoint is a free log retrieval operation binding the contract event 0x452e6119384e406a318edbd63efae9316d44abef87b7b0d4a557e935b0d7f2e5.
//
// Solidity: event AddUserCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterAddUserCheckpoint(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterAddUserCheckpointIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "AddUserCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterAddUserCheckpointIterator{contract: _IFAllocationMaster.contract, event: "AddUserCheckpoint", logs: logs, sub: sub}, nil
}

// WatchAddUserCheckpoint is a free log subscription operation binding the contract event 0x452e6119384e406a318edbd63efae9316d44abef87b7b0d4a557e935b0d7f2e5.
//
// Solidity: event AddUserCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchAddUserCheckpoint(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterAddUserCheckpoint, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "AddUserCheckpoint", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterAddUserCheckpoint)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "AddUserCheckpoint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddUserCheckpoint is a log parse operation binding the contract event 0x452e6119384e406a318edbd63efae9316d44abef87b7b0d4a557e935b0d7f2e5.
//
// Solidity: event AddUserCheckpoint(uint24 indexed trackId, uint80 timestamp)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseAddUserCheckpoint(log types.Log) (*IFAllocationMasterAddUserCheckpoint, error) {
	event := new(IFAllocationMasterAddUserCheckpoint)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "AddUserCheckpoint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterBumpSaleCounterIterator is returned from FilterBumpSaleCounter and is used to iterate over the raw logs and unpacked data for BumpSaleCounter events raised by the IFAllocationMaster contract.
type IFAllocationMasterBumpSaleCounterIterator struct {
	Event *IFAllocationMasterBumpSaleCounter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterBumpSaleCounterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterBumpSaleCounter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterBumpSaleCounter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterBumpSaleCounterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterBumpSaleCounterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterBumpSaleCounter represents a BumpSaleCounter event raised by the IFAllocationMaster contract.
type IFAllocationMasterBumpSaleCounter struct {
	TrackId  *big.Int
	NewCount uint32
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBumpSaleCounter is a free log retrieval operation binding the contract event 0xcd058f3f37dac45b4ea419da18091e06ea38756c9996298ca517599007e777c4.
//
// Solidity: event BumpSaleCounter(uint24 indexed trackId, uint32 newCount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterBumpSaleCounter(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterBumpSaleCounterIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "BumpSaleCounter", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterBumpSaleCounterIterator{contract: _IFAllocationMaster.contract, event: "BumpSaleCounter", logs: logs, sub: sub}, nil
}

// WatchBumpSaleCounter is a free log subscription operation binding the contract event 0xcd058f3f37dac45b4ea419da18091e06ea38756c9996298ca517599007e777c4.
//
// Solidity: event BumpSaleCounter(uint24 indexed trackId, uint32 newCount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchBumpSaleCounter(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterBumpSaleCounter, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "BumpSaleCounter", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterBumpSaleCounter)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "BumpSaleCounter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBumpSaleCounter is a log parse operation binding the contract event 0xcd058f3f37dac45b4ea419da18091e06ea38756c9996298ca517599007e777c4.
//
// Solidity: event BumpSaleCounter(uint24 indexed trackId, uint32 newCount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseBumpSaleCounter(log types.Log) (*IFAllocationMasterBumpSaleCounter, error) {
	event := new(IFAllocationMasterBumpSaleCounter)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "BumpSaleCounter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterDisableTrackIterator is returned from FilterDisableTrack and is used to iterate over the raw logs and unpacked data for DisableTrack events raised by the IFAllocationMaster contract.
type IFAllocationMasterDisableTrackIterator struct {
	Event *IFAllocationMasterDisableTrack // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterDisableTrackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterDisableTrack)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterDisableTrack)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterDisableTrackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterDisableTrackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterDisableTrack represents a DisableTrack event raised by the IFAllocationMaster contract.
type IFAllocationMasterDisableTrack struct {
	TrackId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDisableTrack is a free log retrieval operation binding the contract event 0xcb27b9acd764424cf6cdaa672c3a35243af86cbf4ecb53ad48a9212610e5781b.
//
// Solidity: event DisableTrack(uint24 indexed trackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterDisableTrack(opts *bind.FilterOpts, trackId []*big.Int) (*IFAllocationMasterDisableTrackIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "DisableTrack", trackIdRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterDisableTrackIterator{contract: _IFAllocationMaster.contract, event: "DisableTrack", logs: logs, sub: sub}, nil
}

// WatchDisableTrack is a free log subscription operation binding the contract event 0xcb27b9acd764424cf6cdaa672c3a35243af86cbf4ecb53ad48a9212610e5781b.
//
// Solidity: event DisableTrack(uint24 indexed trackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchDisableTrack(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterDisableTrack, trackId []*big.Int) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "DisableTrack", trackIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterDisableTrack)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "DisableTrack", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisableTrack is a log parse operation binding the contract event 0xcb27b9acd764424cf6cdaa672c3a35243af86cbf4ecb53ad48a9212610e5781b.
//
// Solidity: event DisableTrack(uint24 indexed trackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseDisableTrack(log types.Log) (*IFAllocationMasterDisableTrack, error) {
	event := new(IFAllocationMasterDisableTrack)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "DisableTrack", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterEmergencyWithdrawIterator is returned from FilterEmergencyWithdraw and is used to iterate over the raw logs and unpacked data for EmergencyWithdraw events raised by the IFAllocationMaster contract.
type IFAllocationMasterEmergencyWithdrawIterator struct {
	Event *IFAllocationMasterEmergencyWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterEmergencyWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterEmergencyWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterEmergencyWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterEmergencyWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterEmergencyWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterEmergencyWithdraw represents a EmergencyWithdraw event raised by the IFAllocationMaster contract.
type IFAllocationMasterEmergencyWithdraw struct {
	TrackId *big.Int
	Sender  common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterEmergencyWithdraw is a free log retrieval operation binding the contract event 0xf427794f261016177479dd3be6bcc4f1dfbf441739b329c9f29c0046002ade0d.
//
// Solidity: event EmergencyWithdraw(uint24 indexed trackId, address indexed sender, uint256 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterEmergencyWithdraw(opts *bind.FilterOpts, trackId []*big.Int, sender []common.Address) (*IFAllocationMasterEmergencyWithdrawIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "EmergencyWithdraw", trackIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterEmergencyWithdrawIterator{contract: _IFAllocationMaster.contract, event: "EmergencyWithdraw", logs: logs, sub: sub}, nil
}

// WatchEmergencyWithdraw is a free log subscription operation binding the contract event 0xf427794f261016177479dd3be6bcc4f1dfbf441739b329c9f29c0046002ade0d.
//
// Solidity: event EmergencyWithdraw(uint24 indexed trackId, address indexed sender, uint256 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchEmergencyWithdraw(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterEmergencyWithdraw, trackId []*big.Int, sender []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "EmergencyWithdraw", trackIdRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterEmergencyWithdraw)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "EmergencyWithdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyWithdraw is a log parse operation binding the contract event 0xf427794f261016177479dd3be6bcc4f1dfbf441739b329c9f29c0046002ade0d.
//
// Solidity: event EmergencyWithdraw(uint24 indexed trackId, address indexed sender, uint256 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseEmergencyWithdraw(log types.Log) (*IFAllocationMasterEmergencyWithdraw, error) {
	event := new(IFAllocationMasterEmergencyWithdraw)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "EmergencyWithdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the IFAllocationMaster contract.
type IFAllocationMasterOwnershipTransferredIterator struct {
	Event *IFAllocationMasterOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterOwnershipTransferred represents a OwnershipTransferred event raised by the IFAllocationMaster contract.
type IFAllocationMasterOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IFAllocationMasterOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterOwnershipTransferredIterator{contract: _IFAllocationMaster.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterOwnershipTransferred)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseOwnershipTransferred(log types.Log) (*IFAllocationMasterOwnershipTransferred, error) {
	event := new(IFAllocationMasterOwnershipTransferred)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterStakeIterator is returned from FilterStake and is used to iterate over the raw logs and unpacked data for Stake events raised by the IFAllocationMaster contract.
type IFAllocationMasterStakeIterator struct {
	Event *IFAllocationMasterStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterStake represents a Stake event raised by the IFAllocationMaster contract.
type IFAllocationMasterStake struct {
	TrackId *big.Int
	User    common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStake is a free log retrieval operation binding the contract event 0xc7de557a4862000809abc99c50fd0b30c35beb37a010dae4335462b336827fd3.
//
// Solidity: event Stake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterStake(opts *bind.FilterOpts, trackId []*big.Int, user []common.Address) (*IFAllocationMasterStakeIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "Stake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterStakeIterator{contract: _IFAllocationMaster.contract, event: "Stake", logs: logs, sub: sub}, nil
}

// WatchStake is a free log subscription operation binding the contract event 0xc7de557a4862000809abc99c50fd0b30c35beb37a010dae4335462b336827fd3.
//
// Solidity: event Stake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchStake(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterStake, trackId []*big.Int, user []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "Stake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterStake)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "Stake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStake is a log parse operation binding the contract event 0xc7de557a4862000809abc99c50fd0b30c35beb37a010dae4335462b336827fd3.
//
// Solidity: event Stake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseStake(log types.Log) (*IFAllocationMasterStake, error) {
	event := new(IFAllocationMasterStake)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "Stake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterSyncTotalWeightIterator is returned from FilterSyncTotalWeight and is used to iterate over the raw logs and unpacked data for SyncTotalWeight events raised by the IFAllocationMaster contract.
type IFAllocationMasterSyncTotalWeightIterator struct {
	Event *IFAllocationMasterSyncTotalWeight // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterSyncTotalWeightIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterSyncTotalWeight)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterSyncTotalWeight)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterSyncTotalWeightIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterSyncTotalWeightIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterSyncTotalWeight represents a SyncTotalWeight event raised by the IFAllocationMaster contract.
type IFAllocationMasterSyncTotalWeight struct {
	Receiver   common.Address
	SrcTrackId *big.Int
	Timestamp  *big.Int
	DstChainId uint64
	DstTrackId *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSyncTotalWeight is a free log retrieval operation binding the contract event 0x26f761805bf5b48d09abfb7b15d908bb69dd697594afda09ffae497db2a3df4a.
//
// Solidity: event SyncTotalWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterSyncTotalWeight(opts *bind.FilterOpts) (*IFAllocationMasterSyncTotalWeightIterator, error) {

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "SyncTotalWeight")
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterSyncTotalWeightIterator{contract: _IFAllocationMaster.contract, event: "SyncTotalWeight", logs: logs, sub: sub}, nil
}

// WatchSyncTotalWeight is a free log subscription operation binding the contract event 0x26f761805bf5b48d09abfb7b15d908bb69dd697594afda09ffae497db2a3df4a.
//
// Solidity: event SyncTotalWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchSyncTotalWeight(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterSyncTotalWeight) (event.Subscription, error) {

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "SyncTotalWeight")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterSyncTotalWeight)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "SyncTotalWeight", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncTotalWeight is a log parse operation binding the contract event 0x26f761805bf5b48d09abfb7b15d908bb69dd697594afda09ffae497db2a3df4a.
//
// Solidity: event SyncTotalWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseSyncTotalWeight(log types.Log) (*IFAllocationMasterSyncTotalWeight, error) {
	event := new(IFAllocationMasterSyncTotalWeight)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "SyncTotalWeight", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterSyncUserWeightIterator is returned from FilterSyncUserWeight and is used to iterate over the raw logs and unpacked data for SyncUserWeight events raised by the IFAllocationMaster contract.
type IFAllocationMasterSyncUserWeightIterator struct {
	Event *IFAllocationMasterSyncUserWeight // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterSyncUserWeightIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterSyncUserWeight)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterSyncUserWeight)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterSyncUserWeightIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterSyncUserWeightIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterSyncUserWeight represents a SyncUserWeight event raised by the IFAllocationMaster contract.
type IFAllocationMasterSyncUserWeight struct {
	Receiver   common.Address
	SrcTrackId *big.Int
	Timestamp  *big.Int
	DstChainId uint64
	DstTrackId *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSyncUserWeight is a free log retrieval operation binding the contract event 0x63f7370c5ec881103dc49f9b20da0dd67baa69c60e154fafa9f9b914fa198285.
//
// Solidity: event SyncUserWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterSyncUserWeight(opts *bind.FilterOpts) (*IFAllocationMasterSyncUserWeightIterator, error) {

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "SyncUserWeight")
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterSyncUserWeightIterator{contract: _IFAllocationMaster.contract, event: "SyncUserWeight", logs: logs, sub: sub}, nil
}

// WatchSyncUserWeight is a free log subscription operation binding the contract event 0x63f7370c5ec881103dc49f9b20da0dd67baa69c60e154fafa9f9b914fa198285.
//
// Solidity: event SyncUserWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchSyncUserWeight(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterSyncUserWeight) (event.Subscription, error) {

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "SyncUserWeight")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterSyncUserWeight)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "SyncUserWeight", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncUserWeight is a log parse operation binding the contract event 0x63f7370c5ec881103dc49f9b20da0dd67baa69c60e154fafa9f9b914fa198285.
//
// Solidity: event SyncUserWeight(address receiver, uint24 srcTrackId, uint80 timestamp, uint64 dstChainId, uint24 dstTrackId)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseSyncUserWeight(log types.Log) (*IFAllocationMasterSyncUserWeight, error) {
	event := new(IFAllocationMasterSyncUserWeight)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "SyncUserWeight", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationMasterUnstakeIterator is returned from FilterUnstake and is used to iterate over the raw logs and unpacked data for Unstake events raised by the IFAllocationMaster contract.
type IFAllocationMasterUnstakeIterator struct {
	Event *IFAllocationMasterUnstake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationMasterUnstakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationMasterUnstake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationMasterUnstake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationMasterUnstakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationMasterUnstakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationMasterUnstake represents a Unstake event raised by the IFAllocationMaster contract.
type IFAllocationMasterUnstake struct {
	TrackId *big.Int
	User    common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnstake is a free log retrieval operation binding the contract event 0xbd1cd43f77539b6f0bc66ed76923ac8eb8cb34f9d6ff0c16b6b8b1d43cf94f08.
//
// Solidity: event Unstake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) FilterUnstake(opts *bind.FilterOpts, trackId []*big.Int, user []common.Address) (*IFAllocationMasterUnstakeIterator, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.FilterLogs(opts, "Unstake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationMasterUnstakeIterator{contract: _IFAllocationMaster.contract, event: "Unstake", logs: logs, sub: sub}, nil
}

// WatchUnstake is a free log subscription operation binding the contract event 0xbd1cd43f77539b6f0bc66ed76923ac8eb8cb34f9d6ff0c16b6b8b1d43cf94f08.
//
// Solidity: event Unstake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) WatchUnstake(opts *bind.WatchOpts, sink chan<- *IFAllocationMasterUnstake, trackId []*big.Int, user []common.Address) (event.Subscription, error) {

	var trackIdRule []interface{}
	for _, trackIdItem := range trackId {
		trackIdRule = append(trackIdRule, trackIdItem)
	}
	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _IFAllocationMaster.contract.WatchLogs(opts, "Unstake", trackIdRule, userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationMasterUnstake)
				if err := _IFAllocationMaster.contract.UnpackLog(event, "Unstake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstake is a log parse operation binding the contract event 0xbd1cd43f77539b6f0bc66ed76923ac8eb8cb34f9d6ff0c16b6b8b1d43cf94f08.
//
// Solidity: event Unstake(uint24 indexed trackId, address indexed user, uint104 amount)
func (_IFAllocationMaster *IFAllocationMasterFilterer) ParseUnstake(log types.Log) (*IFAllocationMasterUnstake, error) {
	event := new(IFAllocationMasterUnstake)
	if err := _IFAllocationMaster.contract.UnpackLog(event, "Unstake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
