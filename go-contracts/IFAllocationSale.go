// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package IFAllocationSale

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IFVestableCliff is an auto generated low-level Go binding around an user-defined struct.
type IFVestableCliff struct {
	ClaimTime *big.Int
	Pct       uint8
}

// IFAllocationSaleMetaData contains all meta data concerning the IFAllocationSale contract.
var IFAllocationSaleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"contractIIFRetrievableStakeWeight\",\"name\":\"_allocationMaster\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_trackId\",\"type\":\"uint24\"},{\"internalType\":\"uint80\",\"name\":\"_allocSnapshotTimestamp\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalPayment\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleTokenBalance\",\"type\":\"uint256\"}],\"name\":\"Cash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyTokenRetrieve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"casher\",\"type\":\"address\"}],\"name\":\"SetCasher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"indexed\":true,\"internalType\":\"structIFVestable.Cliff[]\",\"name\":\"cliffPeriod\",\"type\":\"tuple[]\"}],\"name\":\"SetCliffVestingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"linearVestingEndTime\",\"type\":\"uint256\"}],\"name\":\"SetLinearVestingEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minTotalPayment\",\"type\":\"uint256\"}],\"name\":\"SetMinTotalPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"whitelistRootHash\",\"type\":\"bytes32\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistSetter\",\"type\":\"address\"}],\"name\":\"SetWhitelistSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"withdrawDelay\",\"type\":\"uint24\"}],\"name\":\"SetWithdrawDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allocSnapshotTimestamp\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationMaster\",\"outputs\":[{\"internalType\":\"contractIIFRetrievableStakeWeight\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cliffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pct\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergencyTokenRetrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentClaimableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalPaymentAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnlockedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasCashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linearVestingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotalPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contractERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaserCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_casher\",\"type\":\"address\"}],\"name\":\"setCasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"pct\",\"type\":\"uint8[]\"}],\"name\":\"setCliffPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingEndTime\",\"type\":\"uint256\"}],\"name\":\"setLinearVestingEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTotalPayment\",\"type\":\"uint256\"}],\"name\":\"setMinTotalPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_vestingEditableOverride\",\"type\":\"bool\"}],\"name\":\"setVestingEditable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRootHash\",\"type\":\"bytes32\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistSetter\",\"type\":\"address\"}],\"name\":\"setWhitelistSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_withdrawDelay\",\"type\":\"uint24\"}],\"name\":\"setWithdrawDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPaymentReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trackId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEditableOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistedPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDelay\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawerCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// IFAllocationSaleABI is the input ABI used to generate the binding from.
// Deprecated: Use IFAllocationSaleMetaData.ABI instead.
var IFAllocationSaleABI = IFAllocationSaleMetaData.ABI

// IFAllocationSaleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IFAllocationSaleMetaData.Bin instead.
var IFAllocationSaleBin = IFAllocationSaleMetaData.Bin

// DeployIFAllocationSale deploys a new Ethereum contract, binding an instance of IFAllocationSale to it.
func DeployIFAllocationSale(auth *bind.TransactOpts, backend bind.ContractBackend, _salePrice *big.Int, _funder common.Address, _paymentToken common.Address, _saleToken common.Address, _allocationMaster common.Address, _trackId *big.Int, _allocSnapshotTimestamp *big.Int, _startTime *big.Int, _endTime *big.Int, _maxTotalPayment *big.Int) (common.Address, *types.Transaction, *IFAllocationSale, error) {
	parsed, err := IFAllocationSaleMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IFAllocationSaleBin), backend, _salePrice, _funder, _paymentToken, _saleToken, _allocationMaster, _trackId, _allocSnapshotTimestamp, _startTime, _endTime, _maxTotalPayment)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IFAllocationSale{IFAllocationSaleCaller: IFAllocationSaleCaller{contract: contract}, IFAllocationSaleTransactor: IFAllocationSaleTransactor{contract: contract}, IFAllocationSaleFilterer: IFAllocationSaleFilterer{contract: contract}}, nil
}

// IFAllocationSale is an auto generated Go binding around an Ethereum contract.
type IFAllocationSale struct {
	IFAllocationSaleCaller     // Read-only binding to the contract
	IFAllocationSaleTransactor // Write-only binding to the contract
	IFAllocationSaleFilterer   // Log filterer for contract events
}

// IFAllocationSaleCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFAllocationSaleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationSaleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFAllocationSaleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationSaleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFAllocationSaleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFAllocationSaleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFAllocationSaleSession struct {
	Contract     *IFAllocationSale // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFAllocationSaleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFAllocationSaleCallerSession struct {
	Contract *IFAllocationSaleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IFAllocationSaleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFAllocationSaleTransactorSession struct {
	Contract     *IFAllocationSaleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IFAllocationSaleRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFAllocationSaleRaw struct {
	Contract *IFAllocationSale // Generic contract binding to access the raw methods on
}

// IFAllocationSaleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFAllocationSaleCallerRaw struct {
	Contract *IFAllocationSaleCaller // Generic read-only contract binding to access the raw methods on
}

// IFAllocationSaleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFAllocationSaleTransactorRaw struct {
	Contract *IFAllocationSaleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFAllocationSale creates a new instance of IFAllocationSale, bound to a specific deployed contract.
func NewIFAllocationSale(address common.Address, backend bind.ContractBackend) (*IFAllocationSale, error) {
	contract, err := bindIFAllocationSale(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSale{IFAllocationSaleCaller: IFAllocationSaleCaller{contract: contract}, IFAllocationSaleTransactor: IFAllocationSaleTransactor{contract: contract}, IFAllocationSaleFilterer: IFAllocationSaleFilterer{contract: contract}}, nil
}

// NewIFAllocationSaleCaller creates a new read-only instance of IFAllocationSale, bound to a specific deployed contract.
func NewIFAllocationSaleCaller(address common.Address, caller bind.ContractCaller) (*IFAllocationSaleCaller, error) {
	contract, err := bindIFAllocationSale(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleCaller{contract: contract}, nil
}

// NewIFAllocationSaleTransactor creates a new write-only instance of IFAllocationSale, bound to a specific deployed contract.
func NewIFAllocationSaleTransactor(address common.Address, transactor bind.ContractTransactor) (*IFAllocationSaleTransactor, error) {
	contract, err := bindIFAllocationSale(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleTransactor{contract: contract}, nil
}

// NewIFAllocationSaleFilterer creates a new log filterer instance of IFAllocationSale, bound to a specific deployed contract.
func NewIFAllocationSaleFilterer(address common.Address, filterer bind.ContractFilterer) (*IFAllocationSaleFilterer, error) {
	contract, err := bindIFAllocationSale(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleFilterer{contract: contract}, nil
}

// bindIFAllocationSale binds a generic wrapper to an already deployed contract.
func bindIFAllocationSale(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFAllocationSaleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFAllocationSale *IFAllocationSaleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFAllocationSale.Contract.IFAllocationSaleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFAllocationSale *IFAllocationSaleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.IFAllocationSaleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFAllocationSale *IFAllocationSaleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.IFAllocationSaleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFAllocationSale *IFAllocationSaleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFAllocationSale.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFAllocationSale *IFAllocationSaleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFAllocationSale *IFAllocationSaleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.contract.Transact(opts, method, params...)
}

// AllocSnapshotTimestamp is a free data retrieval call binding the contract method 0x1efddc2f.
//
// Solidity: function allocSnapshotTimestamp() view returns(uint80)
func (_IFAllocationSale *IFAllocationSaleCaller) AllocSnapshotTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "allocSnapshotTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocSnapshotTimestamp is a free data retrieval call binding the contract method 0x1efddc2f.
//
// Solidity: function allocSnapshotTimestamp() view returns(uint80)
func (_IFAllocationSale *IFAllocationSaleSession) AllocSnapshotTimestamp() (*big.Int, error) {
	return _IFAllocationSale.Contract.AllocSnapshotTimestamp(&_IFAllocationSale.CallOpts)
}

// AllocSnapshotTimestamp is a free data retrieval call binding the contract method 0x1efddc2f.
//
// Solidity: function allocSnapshotTimestamp() view returns(uint80)
func (_IFAllocationSale *IFAllocationSaleCallerSession) AllocSnapshotTimestamp() (*big.Int, error) {
	return _IFAllocationSale.Contract.AllocSnapshotTimestamp(&_IFAllocationSale.CallOpts)
}

// AllocationMaster is a free data retrieval call binding the contract method 0x665e8acb.
//
// Solidity: function allocationMaster() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCaller) AllocationMaster(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "allocationMaster")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllocationMaster is a free data retrieval call binding the contract method 0x665e8acb.
//
// Solidity: function allocationMaster() view returns(address)
func (_IFAllocationSale *IFAllocationSaleSession) AllocationMaster() (common.Address, error) {
	return _IFAllocationSale.Contract.AllocationMaster(&_IFAllocationSale.CallOpts)
}

// AllocationMaster is a free data retrieval call binding the contract method 0x665e8acb.
//
// Solidity: function allocationMaster() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCallerSession) AllocationMaster() (common.Address, error) {
	return _IFAllocationSale.Contract.AllocationMaster(&_IFAllocationSale.CallOpts)
}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCaller) Casher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "casher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFAllocationSale *IFAllocationSaleSession) Casher() (common.Address, error) {
	return _IFAllocationSale.Contract.Casher(&_IFAllocationSale.CallOpts)
}

// Casher is a free data retrieval call binding the contract method 0xcc89629b.
//
// Solidity: function casher() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCallerSession) Casher() (common.Address, error) {
	return _IFAllocationSale.Contract.Casher(&_IFAllocationSale.CallOpts)
}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCaller) CheckWhitelist(opts *bind.CallOpts, user common.Address, merkleProof [][32]byte) (bool, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "checkWhitelist", user, merkleProof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFAllocationSale *IFAllocationSaleSession) CheckWhitelist(user common.Address, merkleProof [][32]byte) (bool, error) {
	return _IFAllocationSale.Contract.CheckWhitelist(&_IFAllocationSale.CallOpts, user, merkleProof)
}

// CheckWhitelist is a free data retrieval call binding the contract method 0x1649a8a9.
//
// Solidity: function checkWhitelist(address user, bytes32[] merkleProof) view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCallerSession) CheckWhitelist(user common.Address, merkleProof [][32]byte) (bool, error) {
	return _IFAllocationSale.Contract.CheckWhitelist(&_IFAllocationSale.CallOpts, user, merkleProof)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) Claimable(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "claimable", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) Claimable(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.Claimable(&_IFAllocationSale.CallOpts, arg0)
}

// Claimable is a free data retrieval call binding the contract method 0x402914f5.
//
// Solidity: function claimable(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) Claimable(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.Claimable(&_IFAllocationSale.CallOpts, arg0)
}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFAllocationSale *IFAllocationSaleCaller) CliffPeriod(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "cliffPeriod", arg0)

	outstruct := new(struct {
		ClaimTime *big.Int
		Pct       uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ClaimTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Pct = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFAllocationSale *IFAllocationSaleSession) CliffPeriod(arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	return _IFAllocationSale.Contract.CliffPeriod(&_IFAllocationSale.CallOpts, arg0)
}

// CliffPeriod is a free data retrieval call binding the contract method 0x5dbb4dbd.
//
// Solidity: function cliffPeriod(uint256 ) view returns(uint256 claimTime, uint8 pct)
func (_IFAllocationSale *IFAllocationSaleCallerSession) CliffPeriod(arg0 *big.Int) (struct {
	ClaimTime *big.Int
	Pct       uint8
}, error) {
	return _IFAllocationSale.Contract.CliffPeriod(&_IFAllocationSale.CallOpts, arg0)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "endTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) EndTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.EndTime(&_IFAllocationSale.CallOpts)
}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) EndTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.EndTime(&_IFAllocationSale.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCaller) Funder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "funder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFAllocationSale *IFAllocationSaleSession) Funder() (common.Address, error) {
	return _IFAllocationSale.Contract.Funder(&_IFAllocationSale.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCallerSession) Funder() (common.Address, error) {
	return _IFAllocationSale.Contract.Funder(&_IFAllocationSale.CallOpts)
}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) GetCurrentClaimableToken(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "getCurrentClaimableToken", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) GetCurrentClaimableToken(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetCurrentClaimableToken(&_IFAllocationSale.CallOpts, user)
}

// GetCurrentClaimableToken is a free data retrieval call binding the contract method 0xc9a2ff43.
//
// Solidity: function getCurrentClaimableToken(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) GetCurrentClaimableToken(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetCurrentClaimableToken(&_IFAllocationSale.CallOpts, user)
}

// GetMaxPayment is a free data retrieval call binding the contract method 0xe3af5527.
//
// Solidity: function getMaxPayment(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) GetMaxPayment(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "getMaxPayment", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxPayment is a free data retrieval call binding the contract method 0xe3af5527.
//
// Solidity: function getMaxPayment(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) GetMaxPayment(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetMaxPayment(&_IFAllocationSale.CallOpts, user)
}

// GetMaxPayment is a free data retrieval call binding the contract method 0xe3af5527.
//
// Solidity: function getMaxPayment(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) GetMaxPayment(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetMaxPayment(&_IFAllocationSale.CallOpts, user)
}

// GetTotalPaymentAllocation is a free data retrieval call binding the contract method 0x47ae8109.
//
// Solidity: function getTotalPaymentAllocation(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) GetTotalPaymentAllocation(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "getTotalPaymentAllocation", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalPaymentAllocation is a free data retrieval call binding the contract method 0x47ae8109.
//
// Solidity: function getTotalPaymentAllocation(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) GetTotalPaymentAllocation(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetTotalPaymentAllocation(&_IFAllocationSale.CallOpts, user)
}

// GetTotalPaymentAllocation is a free data retrieval call binding the contract method 0x47ae8109.
//
// Solidity: function getTotalPaymentAllocation(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) GetTotalPaymentAllocation(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetTotalPaymentAllocation(&_IFAllocationSale.CallOpts, user)
}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) GetUnlockedToken(opts *bind.CallOpts, totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "getUnlockedToken", totalPurchased, claimable, user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) GetUnlockedToken(totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetUnlockedToken(&_IFAllocationSale.CallOpts, totalPurchased, claimable, user)
}

// GetUnlockedToken is a free data retrieval call binding the contract method 0x642d0f70.
//
// Solidity: function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) GetUnlockedToken(totalPurchased *big.Int, claimable *big.Int, user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetUnlockedToken(&_IFAllocationSale.CallOpts, totalPurchased, claimable, user)
}

// GetUserStakeValue is a free data retrieval call binding the contract method 0x7a11cf5b.
//
// Solidity: function getUserStakeValue(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) GetUserStakeValue(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "getUserStakeValue", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserStakeValue is a free data retrieval call binding the contract method 0x7a11cf5b.
//
// Solidity: function getUserStakeValue(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) GetUserStakeValue(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetUserStakeValue(&_IFAllocationSale.CallOpts, user)
}

// GetUserStakeValue is a free data retrieval call binding the contract method 0x7a11cf5b.
//
// Solidity: function getUserStakeValue(address user) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) GetUserStakeValue(user common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.GetUserStakeValue(&_IFAllocationSale.CallOpts, user)
}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCaller) HasCashed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "hasCashed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFAllocationSale *IFAllocationSaleSession) HasCashed() (bool, error) {
	return _IFAllocationSale.Contract.HasCashed(&_IFAllocationSale.CallOpts)
}

// HasCashed is a free data retrieval call binding the contract method 0x7dd20946.
//
// Solidity: function hasCashed() view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCallerSession) HasCashed() (bool, error) {
	return _IFAllocationSale.Contract.HasCashed(&_IFAllocationSale.CallOpts)
}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCaller) HasWithdrawn(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "hasWithdrawn", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFAllocationSale *IFAllocationSaleSession) HasWithdrawn(arg0 common.Address) (bool, error) {
	return _IFAllocationSale.Contract.HasWithdrawn(&_IFAllocationSale.CallOpts, arg0)
}

// HasWithdrawn is a free data retrieval call binding the contract method 0x5e2c19db.
//
// Solidity: function hasWithdrawn(address ) view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCallerSession) HasWithdrawn(arg0 common.Address) (bool, error) {
	return _IFAllocationSale.Contract.HasWithdrawn(&_IFAllocationSale.CallOpts, arg0)
}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) LatestClaimTime(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "latestClaimTime", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) LatestClaimTime(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.LatestClaimTime(&_IFAllocationSale.CallOpts, arg0)
}

// LatestClaimTime is a free data retrieval call binding the contract method 0x5b2ee404.
//
// Solidity: function latestClaimTime(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) LatestClaimTime(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.LatestClaimTime(&_IFAllocationSale.CallOpts, arg0)
}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) LinearVestingEndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "linearVestingEndTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) LinearVestingEndTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.LinearVestingEndTime(&_IFAllocationSale.CallOpts)
}

// LinearVestingEndTime is a free data retrieval call binding the contract method 0xd98b1f9d.
//
// Solidity: function linearVestingEndTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) LinearVestingEndTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.LinearVestingEndTime(&_IFAllocationSale.CallOpts)
}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) MaxTotalPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "maxTotalPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) MaxTotalPayment() (*big.Int, error) {
	return _IFAllocationSale.Contract.MaxTotalPayment(&_IFAllocationSale.CallOpts)
}

// MaxTotalPayment is a free data retrieval call binding the contract method 0xa89e8522.
//
// Solidity: function maxTotalPayment() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) MaxTotalPayment() (*big.Int, error) {
	return _IFAllocationSale.Contract.MaxTotalPayment(&_IFAllocationSale.CallOpts)
}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) MinTotalPayment(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "minTotalPayment")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) MinTotalPayment() (*big.Int, error) {
	return _IFAllocationSale.Contract.MinTotalPayment(&_IFAllocationSale.CallOpts)
}

// MinTotalPayment is a free data retrieval call binding the contract method 0x4797a548.
//
// Solidity: function minTotalPayment() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) MinTotalPayment() (*big.Int, error) {
	return _IFAllocationSale.Contract.MinTotalPayment(&_IFAllocationSale.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationSale *IFAllocationSaleSession) Owner() (common.Address, error) {
	return _IFAllocationSale.Contract.Owner(&_IFAllocationSale.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCallerSession) Owner() (common.Address, error) {
	return _IFAllocationSale.Contract.Owner(&_IFAllocationSale.CallOpts)
}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) PaymentReceived(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "paymentReceived", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) PaymentReceived(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.PaymentReceived(&_IFAllocationSale.CallOpts, arg0)
}

// PaymentReceived is a free data retrieval call binding the contract method 0x5559638f.
//
// Solidity: function paymentReceived(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) PaymentReceived(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.PaymentReceived(&_IFAllocationSale.CallOpts, arg0)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFAllocationSale *IFAllocationSaleSession) PaymentToken() (common.Address, error) {
	return _IFAllocationSale.Contract.PaymentToken(&_IFAllocationSale.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCallerSession) PaymentToken() (common.Address, error) {
	return _IFAllocationSale.Contract.PaymentToken(&_IFAllocationSale.CallOpts)
}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFAllocationSale *IFAllocationSaleCaller) PurchaserCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "purchaserCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFAllocationSale *IFAllocationSaleSession) PurchaserCount() (uint32, error) {
	return _IFAllocationSale.Contract.PurchaserCount(&_IFAllocationSale.CallOpts)
}

// PurchaserCount is a free data retrieval call binding the contract method 0x1101eaaf.
//
// Solidity: function purchaserCount() view returns(uint32)
func (_IFAllocationSale *IFAllocationSaleCallerSession) PurchaserCount() (uint32, error) {
	return _IFAllocationSale.Contract.PurchaserCount(&_IFAllocationSale.CallOpts)
}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) SaleAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "saleAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) SaleAmount() (*big.Int, error) {
	return _IFAllocationSale.Contract.SaleAmount(&_IFAllocationSale.CallOpts)
}

// SaleAmount is a free data retrieval call binding the contract method 0x8aae995a.
//
// Solidity: function saleAmount() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) SaleAmount() (*big.Int, error) {
	return _IFAllocationSale.Contract.SaleAmount(&_IFAllocationSale.CallOpts)
}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) SalePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "salePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) SalePrice() (*big.Int, error) {
	return _IFAllocationSale.Contract.SalePrice(&_IFAllocationSale.CallOpts)
}

// SalePrice is a free data retrieval call binding the contract method 0xf51f96dd.
//
// Solidity: function salePrice() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) SalePrice() (*big.Int, error) {
	return _IFAllocationSale.Contract.SalePrice(&_IFAllocationSale.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "startTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) StartTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.StartTime(&_IFAllocationSale.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) StartTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.StartTime(&_IFAllocationSale.CallOpts)
}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) TotalPaymentReceived(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "totalPaymentReceived")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) TotalPaymentReceived() (*big.Int, error) {
	return _IFAllocationSale.Contract.TotalPaymentReceived(&_IFAllocationSale.CallOpts)
}

// TotalPaymentReceived is a free data retrieval call binding the contract method 0x48faade4.
//
// Solidity: function totalPaymentReceived() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) TotalPaymentReceived() (*big.Int, error) {
	return _IFAllocationSale.Contract.TotalPaymentReceived(&_IFAllocationSale.CallOpts)
}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) TotalPurchased(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "totalPurchased", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) TotalPurchased(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.TotalPurchased(&_IFAllocationSale.CallOpts, arg0)
}

// TotalPurchased is a free data retrieval call binding the contract method 0x497aef28.
//
// Solidity: function totalPurchased(address ) view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) TotalPurchased(arg0 common.Address) (*big.Int, error) {
	return _IFAllocationSale.Contract.TotalPurchased(&_IFAllocationSale.CallOpts, arg0)
}

// TrackId is a free data retrieval call binding the contract method 0xfbf40624.
//
// Solidity: function trackId() view returns(uint24)
func (_IFAllocationSale *IFAllocationSaleCaller) TrackId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "trackId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TrackId is a free data retrieval call binding the contract method 0xfbf40624.
//
// Solidity: function trackId() view returns(uint24)
func (_IFAllocationSale *IFAllocationSaleSession) TrackId() (*big.Int, error) {
	return _IFAllocationSale.Contract.TrackId(&_IFAllocationSale.CallOpts)
}

// TrackId is a free data retrieval call binding the contract method 0xfbf40624.
//
// Solidity: function trackId() view returns(uint24)
func (_IFAllocationSale *IFAllocationSaleCallerSession) TrackId() (*big.Int, error) {
	return _IFAllocationSale.Contract.TrackId(&_IFAllocationSale.CallOpts)
}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCaller) VestingEditableOverride(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "vestingEditableOverride")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFAllocationSale *IFAllocationSaleSession) VestingEditableOverride() (bool, error) {
	return _IFAllocationSale.Contract.VestingEditableOverride(&_IFAllocationSale.CallOpts)
}

// VestingEditableOverride is a free data retrieval call binding the contract method 0x76ebbbc2.
//
// Solidity: function vestingEditableOverride() view returns(bool)
func (_IFAllocationSale *IFAllocationSaleCallerSession) VestingEditableOverride() (bool, error) {
	return _IFAllocationSale.Contract.VestingEditableOverride(&_IFAllocationSale.CallOpts)
}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFAllocationSale *IFAllocationSaleCaller) WhitelistRootHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "whitelistRootHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFAllocationSale *IFAllocationSaleSession) WhitelistRootHash() ([32]byte, error) {
	return _IFAllocationSale.Contract.WhitelistRootHash(&_IFAllocationSale.CallOpts)
}

// WhitelistRootHash is a free data retrieval call binding the contract method 0xd1a12d6a.
//
// Solidity: function whitelistRootHash() view returns(bytes32)
func (_IFAllocationSale *IFAllocationSaleCallerSession) WhitelistRootHash() ([32]byte, error) {
	return _IFAllocationSale.Contract.WhitelistRootHash(&_IFAllocationSale.CallOpts)
}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCaller) WhitelistSetter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "whitelistSetter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFAllocationSale *IFAllocationSaleSession) WhitelistSetter() (common.Address, error) {
	return _IFAllocationSale.Contract.WhitelistSetter(&_IFAllocationSale.CallOpts)
}

// WhitelistSetter is a free data retrieval call binding the contract method 0xd03df6dd.
//
// Solidity: function whitelistSetter() view returns(address)
func (_IFAllocationSale *IFAllocationSaleCallerSession) WhitelistSetter() (common.Address, error) {
	return _IFAllocationSale.Contract.WhitelistSetter(&_IFAllocationSale.CallOpts)
}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFAllocationSale *IFAllocationSaleCaller) WithdrawDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "withdrawDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFAllocationSale *IFAllocationSaleSession) WithdrawDelay() (*big.Int, error) {
	return _IFAllocationSale.Contract.WithdrawDelay(&_IFAllocationSale.CallOpts)
}

// WithdrawDelay is a free data retrieval call binding the contract method 0x0288a39c.
//
// Solidity: function withdrawDelay() view returns(uint24)
func (_IFAllocationSale *IFAllocationSaleCallerSession) WithdrawDelay() (*big.Int, error) {
	return _IFAllocationSale.Contract.WithdrawDelay(&_IFAllocationSale.CallOpts)
}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCaller) WithdrawTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "withdrawTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleSession) WithdrawTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.WithdrawTime(&_IFAllocationSale.CallOpts)
}

// WithdrawTime is a free data retrieval call binding the contract method 0x45cb3dde.
//
// Solidity: function withdrawTime() view returns(uint256)
func (_IFAllocationSale *IFAllocationSaleCallerSession) WithdrawTime() (*big.Int, error) {
	return _IFAllocationSale.Contract.WithdrawTime(&_IFAllocationSale.CallOpts)
}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFAllocationSale *IFAllocationSaleCaller) WithdrawerCount(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _IFAllocationSale.contract.Call(opts, &out, "withdrawerCount")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFAllocationSale *IFAllocationSaleSession) WithdrawerCount() (uint32, error) {
	return _IFAllocationSale.Contract.WithdrawerCount(&_IFAllocationSale.CallOpts)
}

// WithdrawerCount is a free data retrieval call binding the contract method 0xd6ca214d.
//
// Solidity: function withdrawerCount() view returns(uint32)
func (_IFAllocationSale *IFAllocationSaleCallerSession) WithdrawerCount() (uint32, error) {
	return _IFAllocationSale.Contract.WithdrawerCount(&_IFAllocationSale.CallOpts)
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) Cash(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "cash")
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFAllocationSale *IFAllocationSaleSession) Cash() (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Cash(&_IFAllocationSale.TransactOpts)
}

// Cash is a paid mutator transaction binding the contract method 0x961be391.
//
// Solidity: function cash() returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) Cash() (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Cash(&_IFAllocationSale.TransactOpts)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) EmergencyTokenRetrieve(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "emergencyTokenRetrieve", token)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFAllocationSale *IFAllocationSaleSession) EmergencyTokenRetrieve(token common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.EmergencyTokenRetrieve(&_IFAllocationSale.TransactOpts, token)
}

// EmergencyTokenRetrieve is a paid mutator transaction binding the contract method 0x26c65482.
//
// Solidity: function emergencyTokenRetrieve(address token) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) EmergencyTokenRetrieve(token common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.EmergencyTokenRetrieve(&_IFAllocationSale.TransactOpts, token)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) Fund(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "fund", amount)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFAllocationSale *IFAllocationSaleSession) Fund(amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Fund(&_IFAllocationSale.TransactOpts, amount)
}

// Fund is a paid mutator transaction binding the contract method 0xca1d209d.
//
// Solidity: function fund(uint256 amount) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) Fund(amount *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Fund(&_IFAllocationSale.TransactOpts, amount)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 paymentAmount) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) Purchase(opts *bind.TransactOpts, paymentAmount *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "purchase", paymentAmount)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 paymentAmount) returns()
func (_IFAllocationSale *IFAllocationSaleSession) Purchase(paymentAmount *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Purchase(&_IFAllocationSale.TransactOpts, paymentAmount)
}

// Purchase is a paid mutator transaction binding the contract method 0xefef39a1.
//
// Solidity: function purchase(uint256 paymentAmount) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) Purchase(paymentAmount *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Purchase(&_IFAllocationSale.TransactOpts, paymentAmount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationSale *IFAllocationSaleSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFAllocationSale.Contract.RenounceOwnership(&_IFAllocationSale.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _IFAllocationSale.Contract.RenounceOwnership(&_IFAllocationSale.TransactOpts)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetCasher(opts *bind.TransactOpts, _casher common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setCasher", _casher)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetCasher(_casher common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetCasher(&_IFAllocationSale.TransactOpts, _casher)
}

// SetCasher is a paid mutator transaction binding the contract method 0xa590c84e.
//
// Solidity: function setCasher(address _casher) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetCasher(_casher common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetCasher(&_IFAllocationSale.TransactOpts, _casher)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetCliffPeriod(opts *bind.TransactOpts, claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setCliffPeriod", claimTimes, pct)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetCliffPeriod(claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetCliffPeriod(&_IFAllocationSale.TransactOpts, claimTimes, pct)
}

// SetCliffPeriod is a paid mutator transaction binding the contract method 0x89910cac.
//
// Solidity: function setCliffPeriod(uint256[] claimTimes, uint8[] pct) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetCliffPeriod(claimTimes []*big.Int, pct []uint8) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetCliffPeriod(&_IFAllocationSale.TransactOpts, claimTimes, pct)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetLinearVestingEndTime(opts *bind.TransactOpts, _vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setLinearVestingEndTime", _vestingEndTime)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetLinearVestingEndTime(_vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetLinearVestingEndTime(&_IFAllocationSale.TransactOpts, _vestingEndTime)
}

// SetLinearVestingEndTime is a paid mutator transaction binding the contract method 0xcddfb5fd.
//
// Solidity: function setLinearVestingEndTime(uint256 _vestingEndTime) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetLinearVestingEndTime(_vestingEndTime *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetLinearVestingEndTime(&_IFAllocationSale.TransactOpts, _vestingEndTime)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetMinTotalPayment(opts *bind.TransactOpts, _minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setMinTotalPayment", _minTotalPayment)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetMinTotalPayment(_minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetMinTotalPayment(&_IFAllocationSale.TransactOpts, _minTotalPayment)
}

// SetMinTotalPayment is a paid mutator transaction binding the contract method 0x252b99c5.
//
// Solidity: function setMinTotalPayment(uint256 _minTotalPayment) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetMinTotalPayment(_minTotalPayment *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetMinTotalPayment(&_IFAllocationSale.TransactOpts, _minTotalPayment)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetVestingEditable(opts *bind.TransactOpts, _vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setVestingEditable", _vestingEditableOverride)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetVestingEditable(_vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetVestingEditable(&_IFAllocationSale.TransactOpts, _vestingEditableOverride)
}

// SetVestingEditable is a paid mutator transaction binding the contract method 0x2270e82d.
//
// Solidity: function setVestingEditable(bool _vestingEditableOverride) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetVestingEditable(_vestingEditableOverride bool) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetVestingEditable(&_IFAllocationSale.TransactOpts, _vestingEditableOverride)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetWhitelist(opts *bind.TransactOpts, _whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setWhitelist", _whitelistRootHash)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetWhitelist(_whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetWhitelist(&_IFAllocationSale.TransactOpts, _whitelistRootHash)
}

// SetWhitelist is a paid mutator transaction binding the contract method 0x440bc7f3.
//
// Solidity: function setWhitelist(bytes32 _whitelistRootHash) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetWhitelist(_whitelistRootHash [32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetWhitelist(&_IFAllocationSale.TransactOpts, _whitelistRootHash)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetWhitelistSetter(opts *bind.TransactOpts, _whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setWhitelistSetter", _whitelistSetter)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetWhitelistSetter(_whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetWhitelistSetter(&_IFAllocationSale.TransactOpts, _whitelistSetter)
}

// SetWhitelistSetter is a paid mutator transaction binding the contract method 0x547a5eee.
//
// Solidity: function setWhitelistSetter(address _whitelistSetter) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetWhitelistSetter(_whitelistSetter common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetWhitelistSetter(&_IFAllocationSale.TransactOpts, _whitelistSetter)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) SetWithdrawDelay(opts *bind.TransactOpts, _withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "setWithdrawDelay", _withdrawDelay)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFAllocationSale *IFAllocationSaleSession) SetWithdrawDelay(_withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetWithdrawDelay(&_IFAllocationSale.TransactOpts, _withdrawDelay)
}

// SetWithdrawDelay is a paid mutator transaction binding the contract method 0xaacc557a.
//
// Solidity: function setWithdrawDelay(uint24 _withdrawDelay) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) SetWithdrawDelay(_withdrawDelay *big.Int) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.SetWithdrawDelay(&_IFAllocationSale.TransactOpts, _withdrawDelay)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationSale *IFAllocationSaleSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.TransferOwnership(&_IFAllocationSale.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.TransferOwnership(&_IFAllocationSale.TransactOpts, newOwner)
}

// WhitelistedPurchase is a paid mutator transaction binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) WhitelistedPurchase(opts *bind.TransactOpts, paymentAmount *big.Int, merkleProof [][32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "whitelistedPurchase", paymentAmount, merkleProof)
}

// WhitelistedPurchase is a paid mutator transaction binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof) returns()
func (_IFAllocationSale *IFAllocationSaleSession) WhitelistedPurchase(paymentAmount *big.Int, merkleProof [][32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.WhitelistedPurchase(&_IFAllocationSale.TransactOpts, paymentAmount, merkleProof)
}

// WhitelistedPurchase is a paid mutator transaction binding the contract method 0x01fc191c.
//
// Solidity: function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) WhitelistedPurchase(paymentAmount *big.Int, merkleProof [][32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.WhitelistedPurchase(&_IFAllocationSale.TransactOpts, paymentAmount, merkleProof)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFAllocationSale *IFAllocationSaleSession) Withdraw() (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Withdraw(&_IFAllocationSale.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) Withdraw() (*types.Transaction, error) {
	return _IFAllocationSale.Contract.Withdraw(&_IFAllocationSale.TransactOpts)
}

// WithdrawGiveaway is a paid mutator transaction binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof) returns()
func (_IFAllocationSale *IFAllocationSaleTransactor) WithdrawGiveaway(opts *bind.TransactOpts, merkleProof [][32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.contract.Transact(opts, "withdrawGiveaway", merkleProof)
}

// WithdrawGiveaway is a paid mutator transaction binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof) returns()
func (_IFAllocationSale *IFAllocationSaleSession) WithdrawGiveaway(merkleProof [][32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.WithdrawGiveaway(&_IFAllocationSale.TransactOpts, merkleProof)
}

// WithdrawGiveaway is a paid mutator transaction binding the contract method 0x1637cde0.
//
// Solidity: function withdrawGiveaway(bytes32[] merkleProof) returns()
func (_IFAllocationSale *IFAllocationSaleTransactorSession) WithdrawGiveaway(merkleProof [][32]byte) (*types.Transaction, error) {
	return _IFAllocationSale.Contract.WithdrawGiveaway(&_IFAllocationSale.TransactOpts, merkleProof)
}

// IFAllocationSaleCashIterator is returned from FilterCash and is used to iterate over the raw logs and unpacked data for Cash events raised by the IFAllocationSale contract.
type IFAllocationSaleCashIterator struct {
	Event *IFAllocationSaleCash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleCashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleCash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleCash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleCashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleCashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleCash represents a Cash event raised by the IFAllocationSale contract.
type IFAllocationSaleCash struct {
	Sender              common.Address
	PaymentTokenBalance *big.Int
	SaleTokenBalance    *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterCash is a free log retrieval operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterCash(opts *bind.FilterOpts, sender []common.Address) (*IFAllocationSaleCashIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "Cash", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleCashIterator{contract: _IFAllocationSale.contract, event: "Cash", logs: logs, sub: sub}, nil
}

// WatchCash is a free log subscription operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchCash(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleCash, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "Cash", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleCash)
				if err := _IFAllocationSale.contract.UnpackLog(event, "Cash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCash is a log parse operation binding the contract event 0x83205c70ca31ffcb57664adecfd9894647d48665aefae1fb38bbc7ca4c1b86fb.
//
// Solidity: event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseCash(log types.Log) (*IFAllocationSaleCash, error) {
	event := new(IFAllocationSaleCash)
	if err := _IFAllocationSale.contract.UnpackLog(event, "Cash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleEmergencyTokenRetrieveIterator is returned from FilterEmergencyTokenRetrieve and is used to iterate over the raw logs and unpacked data for EmergencyTokenRetrieve events raised by the IFAllocationSale contract.
type IFAllocationSaleEmergencyTokenRetrieveIterator struct {
	Event *IFAllocationSaleEmergencyTokenRetrieve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleEmergencyTokenRetrieveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleEmergencyTokenRetrieve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleEmergencyTokenRetrieve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleEmergencyTokenRetrieveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleEmergencyTokenRetrieveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleEmergencyTokenRetrieve represents a EmergencyTokenRetrieve event raised by the IFAllocationSale contract.
type IFAllocationSaleEmergencyTokenRetrieve struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEmergencyTokenRetrieve is a free log retrieval operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterEmergencyTokenRetrieve(opts *bind.FilterOpts, sender []common.Address) (*IFAllocationSaleEmergencyTokenRetrieveIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "EmergencyTokenRetrieve", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleEmergencyTokenRetrieveIterator{contract: _IFAllocationSale.contract, event: "EmergencyTokenRetrieve", logs: logs, sub: sub}, nil
}

// WatchEmergencyTokenRetrieve is a free log subscription operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchEmergencyTokenRetrieve(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleEmergencyTokenRetrieve, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "EmergencyTokenRetrieve", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleEmergencyTokenRetrieve)
				if err := _IFAllocationSale.contract.UnpackLog(event, "EmergencyTokenRetrieve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEmergencyTokenRetrieve is a log parse operation binding the contract event 0xb1d34d1c064a5cb36c65797ef779e448eefccf2b978edbcfd206cc687c8cea5a.
//
// Solidity: event EmergencyTokenRetrieve(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseEmergencyTokenRetrieve(log types.Log) (*IFAllocationSaleEmergencyTokenRetrieve, error) {
	event := new(IFAllocationSaleEmergencyTokenRetrieve)
	if err := _IFAllocationSale.contract.UnpackLog(event, "EmergencyTokenRetrieve", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleFundIterator is returned from FilterFund and is used to iterate over the raw logs and unpacked data for Fund events raised by the IFAllocationSale contract.
type IFAllocationSaleFundIterator struct {
	Event *IFAllocationSaleFund // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleFundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleFund)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleFund)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleFundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleFundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleFund represents a Fund event raised by the IFAllocationSale contract.
type IFAllocationSaleFund struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFund is a free log retrieval operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterFund(opts *bind.FilterOpts, sender []common.Address) (*IFAllocationSaleFundIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "Fund", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleFundIterator{contract: _IFAllocationSale.contract, event: "Fund", logs: logs, sub: sub}, nil
}

// WatchFund is a free log subscription operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchFund(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleFund, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "Fund", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleFund)
				if err := _IFAllocationSale.contract.UnpackLog(event, "Fund", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFund is a log parse operation binding the contract event 0xda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd.
//
// Solidity: event Fund(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseFund(log types.Log) (*IFAllocationSaleFund, error) {
	event := new(IFAllocationSaleFund)
	if err := _IFAllocationSale.contract.UnpackLog(event, "Fund", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the IFAllocationSale contract.
type IFAllocationSaleOwnershipTransferredIterator struct {
	Event *IFAllocationSaleOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleOwnershipTransferred represents a OwnershipTransferred event raised by the IFAllocationSale contract.
type IFAllocationSaleOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IFAllocationSaleOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleOwnershipTransferredIterator{contract: _IFAllocationSale.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleOwnershipTransferred)
				if err := _IFAllocationSale.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseOwnershipTransferred(log types.Log) (*IFAllocationSaleOwnershipTransferred, error) {
	event := new(IFAllocationSaleOwnershipTransferred)
	if err := _IFAllocationSale.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSalePurchaseIterator is returned from FilterPurchase and is used to iterate over the raw logs and unpacked data for Purchase events raised by the IFAllocationSale contract.
type IFAllocationSalePurchaseIterator struct {
	Event *IFAllocationSalePurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSalePurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSalePurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSalePurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSalePurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSalePurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSalePurchase represents a Purchase event raised by the IFAllocationSale contract.
type IFAllocationSalePurchase struct {
	Sender        common.Address
	PaymentAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPurchase is a free log retrieval operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterPurchase(opts *bind.FilterOpts, sender []common.Address) (*IFAllocationSalePurchaseIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "Purchase", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSalePurchaseIterator{contract: _IFAllocationSale.contract, event: "Purchase", logs: logs, sub: sub}, nil
}

// WatchPurchase is a free log subscription operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchPurchase(opts *bind.WatchOpts, sink chan<- *IFAllocationSalePurchase, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "Purchase", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSalePurchase)
				if err := _IFAllocationSale.contract.UnpackLog(event, "Purchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePurchase is a log parse operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address indexed sender, uint256 paymentAmount)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParsePurchase(log types.Log) (*IFAllocationSalePurchase, error) {
	event := new(IFAllocationSalePurchase)
	if err := _IFAllocationSale.contract.UnpackLog(event, "Purchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleSetCasherIterator is returned from FilterSetCasher and is used to iterate over the raw logs and unpacked data for SetCasher events raised by the IFAllocationSale contract.
type IFAllocationSaleSetCasherIterator struct {
	Event *IFAllocationSaleSetCasher // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleSetCasherIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleSetCasher)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleSetCasher)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleSetCasherIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleSetCasherIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleSetCasher represents a SetCasher event raised by the IFAllocationSale contract.
type IFAllocationSaleSetCasher struct {
	Casher common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetCasher is a free log retrieval operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterSetCasher(opts *bind.FilterOpts, casher []common.Address) (*IFAllocationSaleSetCasherIterator, error) {

	var casherRule []interface{}
	for _, casherItem := range casher {
		casherRule = append(casherRule, casherItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "SetCasher", casherRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleSetCasherIterator{contract: _IFAllocationSale.contract, event: "SetCasher", logs: logs, sub: sub}, nil
}

// WatchSetCasher is a free log subscription operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchSetCasher(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleSetCasher, casher []common.Address) (event.Subscription, error) {

	var casherRule []interface{}
	for _, casherItem := range casher {
		casherRule = append(casherRule, casherItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "SetCasher", casherRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleSetCasher)
				if err := _IFAllocationSale.contract.UnpackLog(event, "SetCasher", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCasher is a log parse operation binding the contract event 0xde112653552cba8a4f696cac12b4478ce2b9b8c0e04429455a2052ec7c0412ce.
//
// Solidity: event SetCasher(address indexed casher)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseSetCasher(log types.Log) (*IFAllocationSaleSetCasher, error) {
	event := new(IFAllocationSaleSetCasher)
	if err := _IFAllocationSale.contract.UnpackLog(event, "SetCasher", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleSetCliffVestingPeriodIterator is returned from FilterSetCliffVestingPeriod and is used to iterate over the raw logs and unpacked data for SetCliffVestingPeriod events raised by the IFAllocationSale contract.
type IFAllocationSaleSetCliffVestingPeriodIterator struct {
	Event *IFAllocationSaleSetCliffVestingPeriod // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleSetCliffVestingPeriodIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleSetCliffVestingPeriod)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleSetCliffVestingPeriod)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleSetCliffVestingPeriodIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleSetCliffVestingPeriodIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleSetCliffVestingPeriod represents a SetCliffVestingPeriod event raised by the IFAllocationSale contract.
type IFAllocationSaleSetCliffVestingPeriod struct {
	CliffPeriod []IFVestableCliff
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetCliffVestingPeriod is a free log retrieval operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterSetCliffVestingPeriod(opts *bind.FilterOpts, cliffPeriod [][]IFVestableCliff) (*IFAllocationSaleSetCliffVestingPeriodIterator, error) {

	var cliffPeriodRule []interface{}
	for _, cliffPeriodItem := range cliffPeriod {
		cliffPeriodRule = append(cliffPeriodRule, cliffPeriodItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "SetCliffVestingPeriod", cliffPeriodRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleSetCliffVestingPeriodIterator{contract: _IFAllocationSale.contract, event: "SetCliffVestingPeriod", logs: logs, sub: sub}, nil
}

// WatchSetCliffVestingPeriod is a free log subscription operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchSetCliffVestingPeriod(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleSetCliffVestingPeriod, cliffPeriod [][]IFVestableCliff) (event.Subscription, error) {

	var cliffPeriodRule []interface{}
	for _, cliffPeriodItem := range cliffPeriod {
		cliffPeriodRule = append(cliffPeriodRule, cliffPeriodItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "SetCliffVestingPeriod", cliffPeriodRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleSetCliffVestingPeriod)
				if err := _IFAllocationSale.contract.UnpackLog(event, "SetCliffVestingPeriod", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetCliffVestingPeriod is a log parse operation binding the contract event 0x3593839147bb7832f5ec3cbd35ab371fb0283d503cfc9460ed0bd7b473f8efd4.
//
// Solidity: event SetCliffVestingPeriod((uint256,uint8)[] indexed cliffPeriod)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseSetCliffVestingPeriod(log types.Log) (*IFAllocationSaleSetCliffVestingPeriod, error) {
	event := new(IFAllocationSaleSetCliffVestingPeriod)
	if err := _IFAllocationSale.contract.UnpackLog(event, "SetCliffVestingPeriod", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleSetLinearVestingEndTimeIterator is returned from FilterSetLinearVestingEndTime and is used to iterate over the raw logs and unpacked data for SetLinearVestingEndTime events raised by the IFAllocationSale contract.
type IFAllocationSaleSetLinearVestingEndTimeIterator struct {
	Event *IFAllocationSaleSetLinearVestingEndTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleSetLinearVestingEndTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleSetLinearVestingEndTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleSetLinearVestingEndTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleSetLinearVestingEndTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleSetLinearVestingEndTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleSetLinearVestingEndTime represents a SetLinearVestingEndTime event raised by the IFAllocationSale contract.
type IFAllocationSaleSetLinearVestingEndTime struct {
	LinearVestingEndTime *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSetLinearVestingEndTime is a free log retrieval operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterSetLinearVestingEndTime(opts *bind.FilterOpts, linearVestingEndTime []*big.Int) (*IFAllocationSaleSetLinearVestingEndTimeIterator, error) {

	var linearVestingEndTimeRule []interface{}
	for _, linearVestingEndTimeItem := range linearVestingEndTime {
		linearVestingEndTimeRule = append(linearVestingEndTimeRule, linearVestingEndTimeItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "SetLinearVestingEndTime", linearVestingEndTimeRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleSetLinearVestingEndTimeIterator{contract: _IFAllocationSale.contract, event: "SetLinearVestingEndTime", logs: logs, sub: sub}, nil
}

// WatchSetLinearVestingEndTime is a free log subscription operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchSetLinearVestingEndTime(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleSetLinearVestingEndTime, linearVestingEndTime []*big.Int) (event.Subscription, error) {

	var linearVestingEndTimeRule []interface{}
	for _, linearVestingEndTimeItem := range linearVestingEndTime {
		linearVestingEndTimeRule = append(linearVestingEndTimeRule, linearVestingEndTimeItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "SetLinearVestingEndTime", linearVestingEndTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleSetLinearVestingEndTime)
				if err := _IFAllocationSale.contract.UnpackLog(event, "SetLinearVestingEndTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetLinearVestingEndTime is a log parse operation binding the contract event 0x83d190eb78c1206ea1abb0222d475a5f70b7f63bcd534ab65e9404b39016c7a4.
//
// Solidity: event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseSetLinearVestingEndTime(log types.Log) (*IFAllocationSaleSetLinearVestingEndTime, error) {
	event := new(IFAllocationSaleSetLinearVestingEndTime)
	if err := _IFAllocationSale.contract.UnpackLog(event, "SetLinearVestingEndTime", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleSetMinTotalPaymentIterator is returned from FilterSetMinTotalPayment and is used to iterate over the raw logs and unpacked data for SetMinTotalPayment events raised by the IFAllocationSale contract.
type IFAllocationSaleSetMinTotalPaymentIterator struct {
	Event *IFAllocationSaleSetMinTotalPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleSetMinTotalPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleSetMinTotalPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleSetMinTotalPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleSetMinTotalPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleSetMinTotalPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleSetMinTotalPayment represents a SetMinTotalPayment event raised by the IFAllocationSale contract.
type IFAllocationSaleSetMinTotalPayment struct {
	MinTotalPayment *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetMinTotalPayment is a free log retrieval operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterSetMinTotalPayment(opts *bind.FilterOpts, minTotalPayment []*big.Int) (*IFAllocationSaleSetMinTotalPaymentIterator, error) {

	var minTotalPaymentRule []interface{}
	for _, minTotalPaymentItem := range minTotalPayment {
		minTotalPaymentRule = append(minTotalPaymentRule, minTotalPaymentItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "SetMinTotalPayment", minTotalPaymentRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleSetMinTotalPaymentIterator{contract: _IFAllocationSale.contract, event: "SetMinTotalPayment", logs: logs, sub: sub}, nil
}

// WatchSetMinTotalPayment is a free log subscription operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchSetMinTotalPayment(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleSetMinTotalPayment, minTotalPayment []*big.Int) (event.Subscription, error) {

	var minTotalPaymentRule []interface{}
	for _, minTotalPaymentItem := range minTotalPayment {
		minTotalPaymentRule = append(minTotalPaymentRule, minTotalPaymentItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "SetMinTotalPayment", minTotalPaymentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleSetMinTotalPayment)
				if err := _IFAllocationSale.contract.UnpackLog(event, "SetMinTotalPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinTotalPayment is a log parse operation binding the contract event 0x4d893dbff365afe590ba8bf0f5d258598f5e63fde5b989dcd4902cf89d403c2f.
//
// Solidity: event SetMinTotalPayment(uint256 indexed minTotalPayment)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseSetMinTotalPayment(log types.Log) (*IFAllocationSaleSetMinTotalPayment, error) {
	event := new(IFAllocationSaleSetMinTotalPayment)
	if err := _IFAllocationSale.contract.UnpackLog(event, "SetMinTotalPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleSetWhitelistIterator is returned from FilterSetWhitelist and is used to iterate over the raw logs and unpacked data for SetWhitelist events raised by the IFAllocationSale contract.
type IFAllocationSaleSetWhitelistIterator struct {
	Event *IFAllocationSaleSetWhitelist // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleSetWhitelistIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleSetWhitelist)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleSetWhitelist)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleSetWhitelistIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleSetWhitelistIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleSetWhitelist represents a SetWhitelist event raised by the IFAllocationSale contract.
type IFAllocationSaleSetWhitelist struct {
	WhitelistRootHash [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSetWhitelist is a free log retrieval operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterSetWhitelist(opts *bind.FilterOpts, whitelistRootHash [][32]byte) (*IFAllocationSaleSetWhitelistIterator, error) {

	var whitelistRootHashRule []interface{}
	for _, whitelistRootHashItem := range whitelistRootHash {
		whitelistRootHashRule = append(whitelistRootHashRule, whitelistRootHashItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "SetWhitelist", whitelistRootHashRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleSetWhitelistIterator{contract: _IFAllocationSale.contract, event: "SetWhitelist", logs: logs, sub: sub}, nil
}

// WatchSetWhitelist is a free log subscription operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchSetWhitelist(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleSetWhitelist, whitelistRootHash [][32]byte) (event.Subscription, error) {

	var whitelistRootHashRule []interface{}
	for _, whitelistRootHashItem := range whitelistRootHash {
		whitelistRootHashRule = append(whitelistRootHashRule, whitelistRootHashItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "SetWhitelist", whitelistRootHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleSetWhitelist)
				if err := _IFAllocationSale.contract.UnpackLog(event, "SetWhitelist", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWhitelist is a log parse operation binding the contract event 0xc504a95022b9d01b3024e95b0a85c200d0c538f417160776512b95fcbf7b2daa.
//
// Solidity: event SetWhitelist(bytes32 indexed whitelistRootHash)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseSetWhitelist(log types.Log) (*IFAllocationSaleSetWhitelist, error) {
	event := new(IFAllocationSaleSetWhitelist)
	if err := _IFAllocationSale.contract.UnpackLog(event, "SetWhitelist", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleSetWhitelistSetterIterator is returned from FilterSetWhitelistSetter and is used to iterate over the raw logs and unpacked data for SetWhitelistSetter events raised by the IFAllocationSale contract.
type IFAllocationSaleSetWhitelistSetterIterator struct {
	Event *IFAllocationSaleSetWhitelistSetter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleSetWhitelistSetterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleSetWhitelistSetter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleSetWhitelistSetter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleSetWhitelistSetterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleSetWhitelistSetterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleSetWhitelistSetter represents a SetWhitelistSetter event raised by the IFAllocationSale contract.
type IFAllocationSaleSetWhitelistSetter struct {
	WhitelistSetter common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSetWhitelistSetter is a free log retrieval operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterSetWhitelistSetter(opts *bind.FilterOpts, whitelistSetter []common.Address) (*IFAllocationSaleSetWhitelistSetterIterator, error) {

	var whitelistSetterRule []interface{}
	for _, whitelistSetterItem := range whitelistSetter {
		whitelistSetterRule = append(whitelistSetterRule, whitelistSetterItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "SetWhitelistSetter", whitelistSetterRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleSetWhitelistSetterIterator{contract: _IFAllocationSale.contract, event: "SetWhitelistSetter", logs: logs, sub: sub}, nil
}

// WatchSetWhitelistSetter is a free log subscription operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchSetWhitelistSetter(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleSetWhitelistSetter, whitelistSetter []common.Address) (event.Subscription, error) {

	var whitelistSetterRule []interface{}
	for _, whitelistSetterItem := range whitelistSetter {
		whitelistSetterRule = append(whitelistSetterRule, whitelistSetterItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "SetWhitelistSetter", whitelistSetterRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleSetWhitelistSetter)
				if err := _IFAllocationSale.contract.UnpackLog(event, "SetWhitelistSetter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWhitelistSetter is a log parse operation binding the contract event 0x7aba5fc71e3607d34203924738fbacc00b5782879615f86db108794b4bdcc95b.
//
// Solidity: event SetWhitelistSetter(address indexed whitelistSetter)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseSetWhitelistSetter(log types.Log) (*IFAllocationSaleSetWhitelistSetter, error) {
	event := new(IFAllocationSaleSetWhitelistSetter)
	if err := _IFAllocationSale.contract.UnpackLog(event, "SetWhitelistSetter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleSetWithdrawDelayIterator is returned from FilterSetWithdrawDelay and is used to iterate over the raw logs and unpacked data for SetWithdrawDelay events raised by the IFAllocationSale contract.
type IFAllocationSaleSetWithdrawDelayIterator struct {
	Event *IFAllocationSaleSetWithdrawDelay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleSetWithdrawDelayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleSetWithdrawDelay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleSetWithdrawDelay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleSetWithdrawDelayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleSetWithdrawDelayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleSetWithdrawDelay represents a SetWithdrawDelay event raised by the IFAllocationSale contract.
type IFAllocationSaleSetWithdrawDelay struct {
	WithdrawDelay *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetWithdrawDelay is a free log retrieval operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterSetWithdrawDelay(opts *bind.FilterOpts, withdrawDelay []*big.Int) (*IFAllocationSaleSetWithdrawDelayIterator, error) {

	var withdrawDelayRule []interface{}
	for _, withdrawDelayItem := range withdrawDelay {
		withdrawDelayRule = append(withdrawDelayRule, withdrawDelayItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "SetWithdrawDelay", withdrawDelayRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleSetWithdrawDelayIterator{contract: _IFAllocationSale.contract, event: "SetWithdrawDelay", logs: logs, sub: sub}, nil
}

// WatchSetWithdrawDelay is a free log subscription operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchSetWithdrawDelay(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleSetWithdrawDelay, withdrawDelay []*big.Int) (event.Subscription, error) {

	var withdrawDelayRule []interface{}
	for _, withdrawDelayItem := range withdrawDelay {
		withdrawDelayRule = append(withdrawDelayRule, withdrawDelayItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "SetWithdrawDelay", withdrawDelayRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleSetWithdrawDelay)
				if err := _IFAllocationSale.contract.UnpackLog(event, "SetWithdrawDelay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWithdrawDelay is a log parse operation binding the contract event 0x0dac7b34fe917a51c24c51f379615699f5c23ce9168eaed469bc161c90028608.
//
// Solidity: event SetWithdrawDelay(uint24 indexed withdrawDelay)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseSetWithdrawDelay(log types.Log) (*IFAllocationSaleSetWithdrawDelay, error) {
	event := new(IFAllocationSaleSetWithdrawDelay)
	if err := _IFAllocationSale.contract.UnpackLog(event, "SetWithdrawDelay", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFAllocationSaleWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the IFAllocationSale contract.
type IFAllocationSaleWithdrawIterator struct {
	Event *IFAllocationSaleWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFAllocationSaleWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFAllocationSaleWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFAllocationSaleWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFAllocationSaleWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFAllocationSaleWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFAllocationSaleWithdraw represents a Withdraw event raised by the IFAllocationSale contract.
type IFAllocationSaleWithdraw struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) FilterWithdraw(opts *bind.FilterOpts, sender []common.Address) (*IFAllocationSaleWithdrawIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.FilterLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return &IFAllocationSaleWithdrawIterator{contract: _IFAllocationSale.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IFAllocationSaleWithdraw, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IFAllocationSale.contract.WatchLogs(opts, "Withdraw", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFAllocationSaleWithdraw)
				if err := _IFAllocationSale.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed sender, uint256 amount)
func (_IFAllocationSale *IFAllocationSaleFilterer) ParseWithdraw(log types.Log) (*IFAllocationSaleWithdraw, error) {
	event := new(IFAllocationSaleWithdraw)
	if err := _IFAllocationSale.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
